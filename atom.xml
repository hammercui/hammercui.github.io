<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hammer崔的程序世界</title>
  <subtitle>我的生涯一片无悔，我想起那个午夜在灯泡下的抠代码，那是我逝去的青春！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hammercui.github.io/"/>
  <updated>2016-11-18T08:11:38.000Z</updated>
  <id>http://hammercui.github.io/</id>
  
  <author>
    <name>hammercui</name>
    <email>hammercui@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python学习笔记：2.面向对象</title>
    <link href="http://hammercui.github.io/post/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A2-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://hammercui.github.io/post/python学习笔记：2-面向对象/</id>
    <published>2016-09-05T02:36:00.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>一个py文件，就是一个模块（module），相同函数和变量名可以存在不同的模块中。一个py模块就是一个类，可以这么理解</p>
<p>为了避免类的冲突，引入包的概念。注意每一个包下面，都会有一个<strong>init</strong>.py的文件，他的模块名就是包名    </p>
<p><strong>作用域</strong></p>
<ul>
<li><p>正常的函数和变量名是公开的（public），可以被直接引用，比如：abc，x123，PI等；</p>
</li>
<li><p>类似_xxx和<strong>xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，</strong>abc等；</p>
</li>
</ul>
<p>之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。</p>
<p><strong>命令行运行</strong><br>在命令行运行py文件时，Python解释器把一个特殊变量<strong>name</strong>置为<strong>main</strong><br>因此以下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if __name__==&apos;__main__&apos;:</div><div class="line">    test()</div></pre></td></tr></table></figure>
<p>在<code>$ python hello.py</code>运行时，会执行<code>test()</code>，但是import时不会执行</p>
<h3 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h3><p><strong>安装pip</strong><br>使用pip安装，可在命令行检查输入pip，检查是否安装。<br>如果安装不成功，可以直接去<a href="https://pypi.python.org/pypi/pip#downloads ：" target="_blank" rel="external">官网地址</a>下载<br><img src="http://img1.tuicool.com/qau2yqQ.png!web" alt=""></p>
<p>下载完成之后，解压到一个文件夹，用CMD控制台进入解压目录，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py install</div></pre></td></tr></table></figure></p>
<p>然后输入pip命令，检测是否安装成功</p>
<p><strong>安装PIL</strong><br>PIL是一个图片处理库，而且是跨平台的。<br>当我们执行以下失败时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install PIL</div></pre></td></tr></table></figure></p>
<p>换成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pillow</div></pre></td></tr></table></figure></p>
<p>然后引入时<code>fom PIL import Image</code></p>
<p><strong>在python2中使用python3</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">from __future__ import unicode_literals</div><div class="line">from __future__ import division</div></pre></td></tr></table></figure></p>
<p>2.x里的字符串用’xxx’表示str，Unicode字符串用u’xxx’表示unicode<br>在3.x中，所有字符串都被视为unicode，写u’xxx’和’xxx’是完全一致的，但是str就必须写成b’xxx’，来表示“二进制字符串”</p>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>给对象发消息实际上就是调用对象对应的关联函数，我们称之为对象的方法（Method）。这里指明了方法跟函数概念上的区别</p>
<p>数据封装、继承和多态是面向对象的三大特点。</p>
<p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<strong>，在Python中，实例的变量名如果以</strong>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问</p>
<p><strong>继承和多态</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#父类</div><div class="line">class Animal(object):</div><div class="line">    def run(self):</div><div class="line">        print &quot;Animal is running&quot;</div><div class="line"></div><div class="line">class Dog(Animal):</div><div class="line">    pass</div><div class="line">class Cat(Animal):</div><div class="line">    pass</div><div class="line"></div><div class="line">dog = Dog()</div><div class="line">dog.run()</div><div class="line">cat = Cat()</div><div class="line">cat.run()</div></pre></td></tr></table></figure></p>
<ul>
<li><p><code>type()</code>,来判断对象类型。</p>
</li>
<li><p>通过内置的一系列函数，我们可以对任意一个Python对象进行剖析，拿到其内部的数据。</p>
</li>
<li><code>dir()</code>,来获得一个对象的所有属性跟方法。</li>
</ul>
<p>高级特性：多重继承，定制类，元类</p>
<p><strong>动态绑定</strong><br>动态绑定允许我们在程序运行的过程中动态给class加上功能，这在静态语言中很难实现</p>
<p>以下给一个实例绑定方法，其他实例没有这个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 给dog对象动态新增方法set_age</div><div class="line"></div><div class="line">def set_age(self,age): #定义一个函数作为实例方法</div><div class="line">    self.age = age</div><div class="line"></div><div class="line">dog.set_age = MethodType(set_age,dog,Dog)# 给实例绑定一个方法</div><div class="line">dog.set_age(25)</div><div class="line">print &apos;dog的age:%s&apos; % dog.age</div></pre></td></tr></table></figure></p>
<p>以下是给对象绑定方法，它的所有实例都会有这个方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def set_price(self,price): #定义一个函数作为实例方法</div><div class="line">    self.price = price</div><div class="line"></div><div class="line">Animal.set_price = MethodType(set_price,None,Animal)# 给类绑定一个方法</div><div class="line">dog.set_price(&apos;200$&apos;)</div><div class="line">cat.set_price(&apos;300$&apos;)</div><div class="line">print dog.price</div><div class="line">print cat.price</div></pre></td></tr></table></figure></p>
<p><strong>@property</strong><br>类似java的get set，避免把属性直接暴露<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Student(object):</div><div class="line"></div><div class="line">    @property</div><div class="line">    def birth(self):</div><div class="line">        return self._birth</div><div class="line"></div><div class="line">    @birth.setter</div><div class="line">    def birth(self, value):</div><div class="line">        self._birth = value</div></pre></td></tr></table></figure></p>
<p><strong>多重继承</strong></p>
<p>区别于java的单继承<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class Dog(Mammal, RunnableMixin, CarnivorousMixin):</div><div class="line">    pass</div><div class="line"></div><div class="line">这样Dog类就继承了Mammal类，RunnableMixin类，CarnivorousMixin类</div></pre></td></tr></table></figure></p>
<p><strong>定制类</strong><br><code>__str__</code><br><code>__repr__</code><br>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Student(object):</div><div class="line">    def __init__(self, name):</div><div class="line">        self.name = name</div><div class="line">    def __str__(self):</div><div class="line">        return &apos;Student object (name=%s)&apos; % self.name</div><div class="line">    __repr__ = __str__</div></pre></td></tr></table></figure></p>
<p><code>__iter__</code>用法：<br>如果一个类想被用于for … in循环，类似list或tuple那样，就必须实现一个<strong>iter</strong>()方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的next()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。</p>
<p><code>__getattr__</code><br>利用完全动态的<strong>getattr</strong>写一个链式调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Chain(object):</div><div class="line">    # class实例化调用</div><div class="line">    def __init__(self,path = &apos;&apos;):</div><div class="line">        self._pathh = path</div><div class="line">    # 调用Chain不存在的属性时</div><div class="line">    def __getattr__(self, path):</div><div class="line">        return Chain(&apos;%s/%s&apos; % (self._pathh,path))</div><div class="line">    def __str__(self):</div><div class="line">        return self._pathh</div><div class="line"></div><div class="line">print Chain().statu.v2.member.center</div><div class="line">结果</div><div class="line">/statu/v2/member/center</div></pre></td></tr></table></figure>
<p><code>__call()__</code>可以使对象被当成函数进行调用</p>
<p><strong>使用元类</strong></p>
<ul>
<li>type() 动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的</li>
<li><p>type()函数既可以返回一个对象的类型，又可以创建出新的类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def fn(self, name=&apos;world&apos;): # 先定义函数</div><div class="line">       print(&apos;Hello, %s.&apos; % name)</div><div class="line">Hello = type(&apos;Hello&apos;, (object,), dict(hello=fn)) # 创建Hello class</div><div class="line">h = Hello()</div><div class="line">h.hello()</div></pre></td></tr></table></figure>
</li>
<li><p><code>metaclass</code><br>控制类的创建行为，还可使使用这个，元类<br>先定义metaclass，就可以创建类，最后创建实例。所以，metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的“实例”。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;p&gt;一个py文件，就是一个模块（module），相同函数和变量名可以存在不同的模块中。一个py模块就是一个类，可以这么理解&lt;/p&gt;
&lt;p&gt;为了避
    
    </summary>
    
      <category term="python" scheme="http://hammercui.github.io/categories/python/"/>
    
    
      <category term="python基础" scheme="http://hammercui.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记：1.基础</title>
    <link href="http://hammercui.github.io/post/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A1-%E5%9F%BA%E7%A1%80/"/>
    <id>http://hammercui.github.io/post/python学习笔记：1-基础/</id>
    <published>2016-08-31T08:48:58.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>对于大多数程序员来说，有了一定功底，就会觉得语言大同小异，再学习动态语言，也不会觉得是难事。因此，我只做一些简单的记录，记录会跟静态语言混淆的地方。</p>
</blockquote>
<h1 id="数据类型，变量"><a href="#数据类型，变量" class="headerlink" title="数据类型，变量"></a>数据类型，变量</h1><ul>
<li><p>python中同一个变量，可以反复赋值，而且可以是不同类型的变量。这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错，笔记java.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = 123 # a是整数</div><div class="line">print a</div><div class="line">a = &apos;ABC&apos; # a变为字符串</div><div class="line">print a</div></pre></td></tr></table></figure>
</li>
<li><p>通常用全部大写，表示常量。Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法</p>
</li>
</ul>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><ul>
<li><p>Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素<br>用索引来访问list中每一个位置的元素，记得索引是从0开始的,这点跟lua有区别</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nameList = [&apos;xiaoming&apos;,&apos;xiaoli&apos;,&apos;xiaozhang&apos;]</div><div class="line">print nameList</div><div class="line">print len(nameList)</div></pre></td></tr></table></figure>
</li>
<li><p>如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素,以此类推，可以获取倒数第2个、倒数第3个：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nameList[-1]</div><div class="line">nameList[-2]</div></pre></td></tr></table></figure>
</li>
<li><p>要删除list末尾的元素，用pop()方法</p>
</li>
<li>要删除指定位置的元素，用pop(i)方法，其中i是索引位置</li>
</ul>
<h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p>元组，跟list的区别是，元组是不能修改的，不能赋值成其他的元素，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nameList = （&apos;xiaoming&apos;,&apos;xiaoli&apos;,&apos;xiaozhang&apos;）</div></pre></td></tr></table></figure></p>
<h2 id="dic"><a href="#dic" class="headerlink" title="dic"></a>dic</h2><p>字典，普遍用法</p>
<ul>
<li><p>判断key是否存在</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&apos;key&apos; in dict</div><div class="line">或者</div><div class="line">dict.get(&apos;key&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p>删除key:pop(key)</p>
</li>
</ul>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。<br>s = set([1, 2, 3])</p>
<ul>
<li><p>重复元素在set中自动被过滤：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s = set([1, 1, 2, 2, 3, 3])</div><div class="line">&gt;&gt;&gt; s</div><div class="line">set([1, 2, 3])</div></pre></td></tr></table></figure>
</li>
<li><p>通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果</p>
</li>
<li><p>通过remove(key)方法可以删除元素：</p>
</li>
<li>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s1 = set([1, 2, 3])</div><div class="line">&gt;&gt;&gt; s2 = set([2, 3, 4])</div><div class="line">&gt;&gt;&gt; s1 &amp; s2</div><div class="line">set([2, 3])</div><div class="line">&gt;&gt;&gt; s1 | s2</div><div class="line">set([1, 2, 3, 4])</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><ul>
<li>支持中文，需要在开头添加</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div></pre></td></tr></table></figure>
<ul>
<li>在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a = &apos;Hi ,%s,you have 钱数:%d&apos; % (&apos;Hammercui&apos;,10000)</div><div class="line">print a</div><div class="line"></div><div class="line">常见的占位符有：</div><div class="line"></div><div class="line">%d	整数</div><div class="line">%f	浮点数</div><div class="line">%s	字符串</div><div class="line">%x	十六进制整数</div></pre></td></tr></table></figure>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul>
<li>abs()绝对值函数</li>
<li>cmp(x,y)比较函数</li>
<li>int() 转int函数</li>
<li>声明函数：<code>def</code>,依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">def my_abs(x):</div><div class="line">    if x&gt;0:</div><div class="line">        return x</div><div class="line">    else:</div><div class="line">        return -x</div><div class="line"></div><div class="line">print my_abs(-2000)</div></pre></td></tr></table></figure>
<ul>
<li>默认参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def power(x, n=2):</div><div class="line">    s = 1</div><div class="line">    while n &gt; 0:</div><div class="line">        n = n - 1</div><div class="line">        s = s * x</div><div class="line">    return s</div><div class="line"></div><div class="line">power(5)</div></pre></td></tr></table></figure>
<ul>
<li>fact(n)阶乘函数。递归不做优化的话，会导致栈溢出</li>
</ul>
<h2 id="slice切片操作符"><a href="#slice切片操作符" class="headerlink" title="slice切片操作符"></a>slice切片操作符</h2><p>L[0:3]表示从list L中取出索引0到3，不包括3的元素，返回list<br>前10个数，每两个取一个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> L[:10:2]</div><div class="line">[0, 2, 4, 6, 8]</div></pre></td></tr></table></figure></p>
<ul>
<li>字符串’xxx’或Unicode字符串u’xxx’也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &apos;ABCDEFG&apos;[:3]</div><div class="line">&apos;ABC&apos;</div><div class="line">&gt;&gt;&gt; &apos;ABCDEFG&apos;[::2]</div><div class="line">&apos;ACEG&apos;</div></pre></td></tr></table></figure>
<h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><ul>
<li><p>判断是否能是迭代</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from collections import Iterable</div><div class="line">&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterable) # str是否可迭代</div><div class="line">True</div><div class="line">&gt;&gt;&gt; isinstance([1,2,3], Iterable) # list是否可迭代</div><div class="line">True</div><div class="line">&gt;&gt;&gt; isinstance(123, Iterable) # 整数是否可迭代</div><div class="line">False</div></pre></td></tr></table></figure>
</li>
<li><p>如果要对list实现类似Java那样的下标循环怎么办？Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 模仿java写法</div><div class="line">for i,value in enumerate([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]):</div><div class="line">    print i,value</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p>但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？方法一是循环，方法二如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [x * x for x in range(1, 11)]</div><div class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</div></pre></td></tr></table></figure></p>
<p>可以增加条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0]</div><div class="line">[4, 16, 36, 64, 100]</div></pre></td></tr></table></figure></p>
<p>还可以双层循环<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [m + n for m in &apos;ABC&apos; for n in &apos;XYZ&apos;]</div><div class="line">[&apos;AX&apos;, &apos;AY&apos;, &apos;AZ&apos;, &apos;BX&apos;, &apos;BY&apos;, &apos;BZ&apos;, &apos;CX&apos;, &apos;CY&apos;, &apos;CZ&apos;]</div></pre></td></tr></table></figure></p>
<h2 id="生成器generator"><a href="#生成器generator" class="headerlink" title="生成器generator"></a>生成器generator</h2><p>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器（Generator）</p>
<p>定义generator的另一种方法。如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator</p>
<p>而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。这样就保证了，每次next都是从上次的结果之后执行的。</p>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>指函数名也是变量，可以把函数作为参数传递。<br>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式</p>
<h2 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h2><p>接收两个参数，第一个函数，第二个序列（可以是list,tuple），返回结果list<br>比如，把一个int类型的list转成string类型的list<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">map(str,[1,2,3,4])</div><div class="line">结果：</div><div class="line">[&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;]</div></pre></td></tr></table></figure></p>
<h2 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h2><p>接收两个参数，第一函数，但这个函数必须<strong>接收2个参数</strong>，第二个序列，返回list。<br>reduce与map的区别是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</div></pre></td></tr></table></figure></p>
<p>相当于每次传入2个参数，把结果作为新的参数，跟下一个参数再传入</p>
<h2 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h2><p>传入两个参数，和map()不同的时，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。</p>
<p>例如，在一个list中，删掉偶数，只保留奇数，可以这么写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def is_odd(n):</div><div class="line">    return n % 2 == 1</div><div class="line"></div><div class="line">filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15])</div><div class="line">结果</div><div class="line"># 结果: [1, 5, 9, 15]</div></pre></td></tr></table></figure></p>
<h2 id="sorted函数"><a href="#sorted函数" class="headerlink" title="sorted函数"></a>sorted函数</h2><p>与其他相反，序列在前，函数在后</p>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>比如函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def f(x)</div><div class="line">	return x*x</div></pre></td></tr></table></figure></p>
<p>可以写作<br><code>lambda x:x*x</code><br>用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数</p>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>假设我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改now()函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。</p>
<h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p>
<p>比如二进制转换成int<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def int2(x, base=2):</div><div class="line">    return int(x, base)</div><div class="line"></div><div class="line">int2(&apos;1000000&apos;)</div><div class="line">结果</div><div class="line">64</div></pre></td></tr></table></figure></p>
<p>使用偏函数写法就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import functools</div><div class="line">int2 = functools.partical(int,base=2)</div><div class="line">int2(&apos;1000000&apos;)</div><div class="line">结果</div><div class="line">64</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;对于大多数程序员来说，有了一定功底，就会觉得语言大同小异，再学习动态语言，也不会觉得是难事。因此，我只做一些简单的记录，记录会跟静态语言混淆的地方。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;数据类型，变量&quot;&gt;&lt;a href=&quot;#数据类型
    
    </summary>
    
      <category term="python" scheme="http://hammercui.github.io/categories/python/"/>
    
    
      <category term="python基础" scheme="http://hammercui.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>android最佳实践9-2：greenDao的数据库升级</title>
    <link href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B59-2%EF%BC%9AgreenDao%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%87%E7%BA%A7/"/>
    <id>http://hammercui.github.io/post/android最佳实践9-2：greenDao的数据库升级/</id>
    <published>2016-08-01T03:13:49.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="app开发期间的数据库升级"><a href="#app开发期间的数据库升级" class="headerlink" title="app开发期间的数据库升级"></a>app开发期间的数据库升级</h1><p>我们使用DevOpenHelper打开数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> DaoMaster.DevOpenHelper helper = </div><div class="line">new DevOpenHelper(application,&quot;xue_old.db&quot;,null);</div></pre></td></tr></table></figure></p>
<p>DevOpenHelper内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public static class DevOpenHelper extends OpenHelper &#123;</div><div class="line">      public DevOpenHelper(Context context, String name, CursorFactory factory) &#123;</div><div class="line">          super(context, name, factory);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      @Override</div><div class="line">      public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</div><div class="line">          Log.i(&quot;greenDAO&quot;, &quot;Upgrading schema from version &quot; + oldVersion + &quot; to &quot; + newVersion + &quot; by dropping all tables&quot;);</div><div class="line">          dropAllTables(db, true);</div><div class="line">          onCreate(db);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>其中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//删除当前所有表</div><div class="line">dropAllTables(db, true);</div><div class="line">//新建当前所有表</div><div class="line">onCreate(db);</div></pre></td></tr></table></figure>
<p>这种方式意味着每次都重新创建，所以数据不会报错</p>
<h1 id="app-上线后的数据库升级，Migration（合并）方式"><a href="#app-上线后的数据库升级，Migration（合并）方式" class="headerlink" title="app 上线后的数据库升级，Migration（合并）方式"></a>app 上线后的数据库升级，Migration（合并）方式</h1><p>我们自己新建一个HMROpenHelper,继承自OpenHelper<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class HMROpenHelper extends DaoMaster.OpenHelper &#123;</div><div class="line"></div><div class="line">    public HMROpenHelper(Context context, String name, SQLiteDatabase.CursorFactory factory) &#123;</div><div class="line">        super(context, name, factory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 数据库升级</div><div class="line">     * @param db</div><div class="line">     * @param oldVersion</div><div class="line">     * @param newVersion</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</div><div class="line">        //操作数据库的更新</div><div class="line">        MigrationHelper.migrate(db,NoteDao.class,LessonDao.class,ZhangDao.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>数据库的合并如下<br>MigrationHelper.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line">public class MigrationHelper &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 调用升级方法</div><div class="line">     * @param db</div><div class="line">     * @param daoClasses 一系列dao.class</div><div class="line">     */</div><div class="line">    public static void migrate(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses) &#123;</div><div class="line">        //1 新建临时表</div><div class="line">        generateTempTables(db, daoClasses);</div><div class="line">        //2 创建新表</div><div class="line">        createAllTables(db, false, daoClasses);</div><div class="line">        //3 临时表数据写入新表，删除临时表</div><div class="line">        restoreData(db, daoClasses);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 生成临时表，存储旧的表数据</div><div class="line">     * @param db</div><div class="line">     * @param daoClasses</div><div class="line">     */</div><div class="line">    private static void generateTempTables(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses) &#123;</div><div class="line">        //方法2</div><div class="line">        for (int i=0;i&lt;daoClasses.length;i++)&#123;</div><div class="line">            DaoConfig daoConfig = new DaoConfig(db,daoClasses[i]);</div><div class="line">            String tableName = daoConfig.tablename;</div><div class="line">            if (!checkTable(db,tableName))</div><div class="line">                continue;</div><div class="line">            String tempTableName = daoConfig.tablename.concat(&quot;_TEMP&quot;);</div><div class="line">            StringBuilder insertTableStringBuilder = new StringBuilder();</div><div class="line">            insertTableStringBuilder.append(&quot;alter table &quot;)</div><div class="line">                    .append(tableName)</div><div class="line">                    .append(&quot; rename to &quot;)</div><div class="line">                    .append(tempTableName)</div><div class="line">                    .append(&quot;;&quot;);</div><div class="line">            db.execSQL(insertTableStringBuilder.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 检测table是否存在</div><div class="line">     * @param db</div><div class="line">     * @param tableName</div><div class="line">     */</div><div class="line">    private static Boolean checkTable(SQLiteDatabase db,String  tableName)&#123;</div><div class="line">        StringBuilder query = new StringBuilder();</div><div class="line">        query.append(&quot;SELECT count(*) FROM sqlite_master WHERE type=&apos;table&apos; AND name=&apos;&quot;).append(tableName).append(&quot;&apos;&quot;);</div><div class="line">        Cursor c = db.rawQuery(query.toString(), null);</div><div class="line">        if (c.moveToNext())&#123;</div><div class="line">            int count = c.getInt(0);</div><div class="line">            if(count&gt;0)&#123;</div><div class="line">               return true;</div><div class="line">            &#125;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 删除所有旧表</div><div class="line">     * @param db</div><div class="line">     * @param ifExists</div><div class="line">     * @param daoClasses</div><div class="line">     */</div><div class="line">    private static void dropAllTables(SQLiteDatabase db, boolean ifExists, @NonNull Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses) &#123;</div><div class="line">        reflectMethod(db, &quot;dropTable&quot;, ifExists, daoClasses);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 创建新的表结构</div><div class="line">     * @param db</div><div class="line">     * @param ifNotExists</div><div class="line">     * @param daoClasses</div><div class="line">     */</div><div class="line">    private static void createAllTables(SQLiteDatabase db, boolean ifNotExists, @NonNull Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses) &#123;</div><div class="line">        reflectMethod(db, &quot;createTable&quot;, ifNotExists, daoClasses);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 创建根删除都在NoteDao声明了，可以直接拿过来用</div><div class="line">     * dao class already define the sql exec method, so just invoke it</div><div class="line">     */</div><div class="line">    private static void reflectMethod(SQLiteDatabase db, String methodName, boolean isExists, @NonNull Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses) &#123;</div><div class="line">        if (daoClasses.length &lt; 1) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            for (Class cls : daoClasses) &#123;</div><div class="line">                //根据方法名，找到声明的方法</div><div class="line">                Method method = cls.getDeclaredMethod(methodName, SQLiteDatabase.class, boolean.class);</div><div class="line">                method.invoke(null, db, isExists);</div><div class="line">            &#125;</div><div class="line">        &#125; catch (NoSuchMethodException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (InvocationTargetException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IllegalAccessException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 临时表的数据写入新表</div><div class="line">     * @param db</div><div class="line">     * @param daoClasses</div><div class="line">     */</div><div class="line">    private static void restoreData(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses) &#123;</div><div class="line">        for (int i = 0; i &lt; daoClasses.length; i++) &#123;</div><div class="line">            DaoConfig daoConfig = new DaoConfig(db, daoClasses[i]);</div><div class="line">            String tableName = daoConfig.tablename;</div><div class="line">            String tempTableName = daoConfig.tablename.concat(&quot;_TEMP&quot;);</div><div class="line">            if (!checkTable(db,tempTableName))</div><div class="line">                continue;</div><div class="line">            // get all columns from tempTable, take careful to use the columns list</div><div class="line">            List&lt;String&gt; columns = getColumns(db, tempTableName);</div><div class="line">            //新表，临时表都包含的字段</div><div class="line">            ArrayList&lt;String&gt; properties = new ArrayList&lt;&gt;(columns.size());</div><div class="line">            for (int j = 0; j &lt; daoConfig.properties.length; j++) &#123;</div><div class="line">                String columnName = daoConfig.properties[j].columnName;</div><div class="line">                if (columns.contains(columnName)) &#123;</div><div class="line">                    properties.add(columnName);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            if (properties.size() &gt; 0) &#123;</div><div class="line">                final String columnSQL = TextUtils.join(&quot;,&quot;, properties);</div><div class="line"></div><div class="line">                StringBuilder insertTableStringBuilder = new StringBuilder();</div><div class="line">                insertTableStringBuilder.append(&quot;INSERT INTO &quot;).append(tableName).append(&quot; (&quot;);</div><div class="line">                insertTableStringBuilder.append(columnSQL);</div><div class="line">                insertTableStringBuilder.append(&quot;) SELECT &quot;);</div><div class="line">                insertTableStringBuilder.append(columnSQL);</div><div class="line">                insertTableStringBuilder.append(&quot; FROM &quot;).append(tempTableName).append(&quot;;&quot;);</div><div class="line">                db.execSQL(insertTableStringBuilder.toString());</div><div class="line">            &#125;</div><div class="line">            StringBuilder dropTableStringBuilder = new StringBuilder();</div><div class="line">            dropTableStringBuilder.append(&quot;DROP TABLE &quot;).append(tempTableName);</div><div class="line">            db.execSQL(dropTableStringBuilder.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static List&lt;String&gt; getColumns(SQLiteDatabase db, String tableName) &#123;</div><div class="line">        List&lt;String&gt; columns = null;</div><div class="line">        Cursor cursor = null;</div><div class="line">        try &#123;</div><div class="line">            cursor = db.rawQuery(&quot;SELECT * FROM &quot; + tableName + &quot; limit 0&quot;, null);</div><div class="line">            if (null != cursor &amp;&amp; cursor.getColumnCount() &gt; 0) &#123;</div><div class="line">                columns = Arrays.asList(cursor.getColumnNames());</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; finally &#123;</div><div class="line">            if (cursor != null)</div><div class="line">                cursor.close();</div><div class="line">            if (null == columns)</div><div class="line">                columns = new ArrayList&lt;&gt;();</div><div class="line">        &#125;</div><div class="line">        return columns;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其核心思路是<br>1 把旧表改为临时表<br>2 建立新表<br>3 临时表数据写入新表，删除临时表</p>
<p>这样我们就可以直接打开数据库进行更新操作了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HMROpenHelper helper = new HMROpenHelper(application, &quot;xue_old.db&quot;, null);</div><div class="line">       SQLiteDatabase sqlDB = helper.getWritableDatabase();</div><div class="line">       return  sqlDB;</div></pre></td></tr></table></figure></p>
<h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><p>别忘了更新时<code>SCHEMA_VERSION</code>自动加1,不然不会执行更新<br>位于<code>DaoMaster.java</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;app开发期间的数据库升级&quot;&gt;&lt;a href=&quot;#app开发期间的数据库升级&quot; class=&quot;headerlink&quot; title=&quot;app开发期间的数据库升级&quot;&gt;&lt;/a&gt;app开发期间的数据库升级&lt;/h1&gt;&lt;p&gt;我们使用DevOpenHelper打开数据库&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android最佳实践" scheme="http://hammercui.github.io/tags/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>android最佳实践11：butterknife框架使用</title>
    <link href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B511%EF%BC%9Abutterknife%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://hammercui.github.io/post/android最佳实践11：butterknife框架使用/</id>
    <published>2016-07-28T02:23:42.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>butterknife也是一个依赖注入框架，借助annonation实现view的快速初始化，解除findViewById的烦恼</p>
<h1 id="工程引入"><a href="#工程引入" class="headerlink" title="工程引入"></a>工程引入</h1><p>配置project的<code>build.gradle</code>，来引入<code>android-apt</code>插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">  repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">   &#125;</div><div class="line">  dependencies &#123;</div><div class="line">    classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置module的<code>build.gradle</code>,apply the <code>android-apt</code> plugin,and add the <code>Butter Knife</code> dependencies.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">apply plugin: &apos;android-apt`</div><div class="line"></div><div class="line">android&#123;</div><div class="line">...</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies&#123;</div><div class="line"> compile &apos;com.jakewharton:butterknife:8.2.1&apos;</div><div class="line"> apt &apos;com.jakewharton:butterknife-compiler:8.2.1&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><em>注意</em></strong><br>butter knife尽量不要在library中使用，如果要用，还得转R2,太麻烦了</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="使用-BindView注解view"><a href="#使用-BindView注解view" class="headerlink" title="使用@BindView注解view"></a>使用@BindView注解view</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class ExampleActivity extends Activity &#123;</div><div class="line">  @BindView(R.id.title) TextView title;</div><div class="line">  @BindView(R.id.subtitle) TextView subtitle;</div><div class="line">  @BindView(R.id.footer) TextView footer;</div><div class="line"></div><div class="line">  @Override public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.simple_activity);</div><div class="line">    ButterKnife.bind(this);</div><div class="line">    // TODO Use fields...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Resource的注解"><a href="#Resource的注解" class="headerlink" title="Resource的注解"></a>Resource的注解</h2><p>@BindBool, @BindColor, @BindDimen, @BindDrawable, @BindInt, @BindString</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class ExampleActivity extends Activity &#123;</div><div class="line">  @BindString(R.string.title) String title;</div><div class="line">  @BindDrawable(R.drawable.graphic) Drawable graphic;</div><div class="line">  @BindColor(R.color.red) int red; // int or ColorStateList field</div><div class="line">  @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="non-activity的注解"><a href="#non-activity的注解" class="headerlink" title="non-activity的注解"></a>non-activity的注解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class FancyFragment extends Fragment &#123;</div><div class="line">  @BindView(R.id.button1) Button button1;</div><div class="line">  @BindView(R.id.button2) Button button2;</div><div class="line"></div><div class="line">  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</div><div class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, false);</div><div class="line">    ButterKnife.bind(this, view);</div><div class="line">    // TODO Use fields...</div><div class="line">    return view;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以在ViewHolder中使用</p>
<h2 id="View-List"><a href="#View-List" class="headerlink" title="View List"></a>View List</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@BindViews(&#123; R.id.first_name, R.id.middle_name, R.id.last_name &#125;)</div><div class="line">List&lt;EditText&gt; nameViews;</div></pre></td></tr></table></figure>
<p>使用<code>apply</code>方法，能一次操作整个View的List<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ButterKnife.apply(nameViews, DISABLE);</div><div class="line">ButterKnife.apply(nameViews, ENABLED, false);</div></pre></td></tr></table></figure></p>
<p>包括设置属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ButterKnife.apply(nameViews, View.ALPHA, 0.0f);</div></pre></td></tr></table></figure></p>
<h2 id="Listener的绑定"><a href="#Listener的绑定" class="headerlink" title="Listener的绑定"></a>Listener的绑定</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@OnClick(R.id.submit)</div><div class="line">public void submit(View view) &#123;</div><div class="line">  // TODO submit data to server...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="绑定的释放"><a href="#绑定的释放" class="headerlink" title="绑定的释放"></a>绑定的释放</h2><p>由于Fragment的生命周期区别于activity，当我们在Fragment的onCreatView做绑定的时候，要在onDestoryView中设置views为null。Butter Knife 返回一个Unbider实例来解决这个问题，<br>eg:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class FancyFragment extends Fragment &#123;</div><div class="line">  @BindView(R.id.button1) Button button1;</div><div class="line">  @BindView(R.id.button2) Button button2;</div><div class="line">  private Unbinder unbinder;</div><div class="line"></div><div class="line">  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</div><div class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, false);</div><div class="line">    unbinder = ButterKnife.bind(this, view);</div><div class="line">    // TODO Use fields...</div><div class="line">    return view;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override public void onDestroyView() &#123;</div><div class="line">    super.onDestroyView();</div><div class="line">    unbinder.unbind();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="更懒的方式"><a href="#更懒的方式" class="headerlink" title="更懒的方式"></a>更懒的方式</h1><p>使用Zelezny插件，一键生成view<br><img src="http://upload-images.jianshu.io/upload_images/1833901-f6092a8aeda8a37e.gif?imageMogr2/auto-orient/strip" alt=""></p>
<p>如何找到插件<br><img src="http://upload-images.jianshu.io/upload_images/1833901-2bc52b5e7e37e664.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">github地址</a><br><a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="external">文档介绍·英文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;butterknife也是一个依赖注入框架，借助annonation实现view的快速初始化，解除findViewById的烦恼&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android最佳实践" scheme="http://hammercui.github.io/tags/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>android最佳实践7:androidannotations框架</title>
    <link href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B57%EF%BC%9Aandroidannotations%E6%A1%86%E6%9E%B6/"/>
    <id>http://hammercui.github.io/post/android最佳实践7：androidannotations框架/</id>
    <published>2016-06-17T06:54:03.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AndroidAnnotations"><a href="#AndroidAnnotations" class="headerlink" title="AndroidAnnotations"></a>AndroidAnnotations</h1><p>android依赖注入框架，主要作用于view层。</p>
<h1 id="工程引入"><a href="#工程引入" class="headerlink" title="工程引入"></a>工程引入</h1><blockquote>
<p>android studio环境</p>
</blockquote>
<p>工程的build.gradle如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">      mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">       	 ···</div><div class="line">        // replace with the current version of the android-apt plugin</div><div class="line">        classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">    mavenLocal()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>app/build.gradle如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;android-apt&apos;</div><div class="line">def AAVersion = &apos;XXX&apos;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">	...</div><div class="line">    apt &quot;org.androidannotations:androidannotations:$AAVersion&quot;</div><div class="line">    compile &quot;org.androidannotations:androidannotations-api:$AAVersion&quot;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line">apt &#123;</div><div class="line">    arguments &#123;</div><div class="line">        androidManifestFile variant.outputs[0]?.processResources?.manifestFile</div><div class="line">        // if you have multiple outputs (when using splits), you may want to have other index than 0</div><div class="line"></div><div class="line">        // you should set your package name here if you are using different application IDs</div><div class="line">        // resourcePackageName &quot;your.package.name&quot;</div><div class="line"></div><div class="line">        // You can set optional annotation processing options here, like these commented options:</div><div class="line">        // logLevel &apos;INFO&apos;</div><div class="line">        // logFile &apos;/var/log/aa.log&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h1><p><a href="http://blog.csdn.net/zjbpku/article/details/18676149" target="_blank" rel="external">Android开源框架(一)：AndroidAnnotations</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AndroidAnnotations&quot;&gt;&lt;a href=&quot;#AndroidAnnotations&quot; class=&quot;headerlink&quot; title=&quot;AndroidAnnotations&quot;&gt;&lt;/a&gt;AndroidAnnotations&lt;/h1&gt;&lt;p&gt;androi
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android最佳实践" scheme="http://hammercui.github.io/tags/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>android最佳实践8：dagger2框架</title>
    <link href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B58%EF%BC%9Adragger2%E6%A1%86%E6%9E%B6/"/>
    <id>http://hammercui.github.io/post/android最佳实践8：dragger2框架/</id>
    <published>2016-06-17T06:12:30.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dagger2"><a href="#dagger2" class="headerlink" title="dagger2"></a>dagger2</h1><p><a href="http://google.github.io/dagger/" target="_blank" rel="external">dagger2</a>是一种依赖注入框架，由square开发，现在google负责维护。dagger2一般配合mvp，在mvp已经解耦的基础上，让解耦变得更彻底，以便于测试及维护。</p>
<h2 id="dagger2与dagger的区别"><a href="#dagger2与dagger的区别" class="headerlink" title="dagger2与dagger的区别"></a>dagger2与dagger的区别</h2><ul>
<li>再也没有使用反射：图的验证、配置和预先设置都在编译的时候执行。</li>
<li>容易调试和可跟踪：完全具体地调用提供和创建的堆栈</li>
<li>更好的性能：谷歌声称他们提高了13%的处理性能</li>
<li>代码混淆：使用派遣方法，就如同自己写的代码一样</li>
</ul>
<p>当然所有这些很棒的特点都需要付出一个代价，那就是缺乏灵活性，例如：Dagger2没用反射所以没有动态机制。</p>
<h2 id="注解含义"><a href="#注解含义" class="headerlink" title="注解含义"></a>注解含义</h2><ul>
<li><p><code>@Inject</code>: 通常在需要依赖的地方使用这个注解，标识我们需要的实例。另外在<code>@Provide</code>中，直接返回的实例，需要在类的构造函数添加<code>@Inject</code></p>
</li>
<li><p><code>@Module</code>: 我们定义一个类，用<code>@Module注</code>解,<code>Modules</code>类里面的方法专门提供依赖。这样<code>Dagger</code>在构造类的实例的时候，就知道从哪里去找到需要的依赖。modules的一个重要特征是它们设计为分区并组合在一起（比如说，在我们的Component中可以有多个组成在一起的modules）。</p>
</li>
<li><p><code>@Provide</code>: 在<code>Modules</code>类中，我们定义的方法是用这个注解。这些方法都是用来提供依赖，生成实例的。</p>
</li>
<li><p><code>@Singlton</code>：常用在<code>@Provide</code>之前，表示提供的依赖是个单例，也就是每次都提供同一个实体。</p>
</li>
<li><p><code>@Component</code>: 我们定义一个接口，用<code>Components</code>注解，我们可以理解为Component就是一个注入器，是@Inject和@Module的桥梁。它的主要作用就是连接这两个部分。 Components可以提供所有定义了的类型的实例，比如：我们必须用@Component注解一个接口然后列出所有的@Modules组成该组件，如果缺失了任何一块都会在编译的时候报错。所有的组件都可以通过它的<code>Modules</code>知道依赖的范围。</p>
</li>
<li><p><code>@Scope</code>: Dagger2可以通过自定义注解限定注解作用域。后面会演示一个例子，这是一个非常强大的特点，因为就如前面说的一样，没 必要让每个对象都去了解如何管理他们的实例。在scope的例子中，我们用自定义的@PerActivity注解一个类，所以这个对象存活时间就和 activity的一样。简单来说就是我们可以定义所有范围的粒度(@PerFragment, @PerUser, 等等)。</p>
</li>
<li><p><code>Qualifier</code>: 当类的类型不足以鉴别一个依赖的时候，我们就可以使用这个注解标示。例如：在Android中，我们会需要不同类型的context，所以我们就可以定义 qualifier注解“@ForApplication”和“@ForActivity”，这样当注入一个context的时候，我们就可以告诉 Dagger我们想要哪种类型的context。</p>
</li>
</ul>
<h1 id="引入工程"><a href="#引入工程" class="headerlink" title="引入工程"></a>引入工程</h1><p>在app/build.gradle添加依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">apply plugin:&apos;android-apt&apos;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">...</div><div class="line">	//dragger2</div><div class="line">    //provided &apos;org.glassfish:javax.annotation:10.0-b28&apos;</div><div class="line">    apt &apos;com.google.dagger:dagger-compiler:2.0.2&apos;</div><div class="line">    compile &apos;com.google.dagger:dagger:2.0.2&apos;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为Dragger2是基于注解的，它会预先生成一些类文件，所以需要在整个项目的/build.gradle文件中加上apt工具:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        ...</div><div class="line">        classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">task clean(type: Delete) &#123;</div><div class="line">    delete rootProject.buildDir</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="demo详解"><a href="#demo详解" class="headerlink" title="demo详解"></a>demo详解</h1><p>我们通过使用greenDao的示例来说明，引入dagger2的好处。greenDao是非常流行的管理sqldata的orm，我们希望他以单例的形式存在，生命周期等同于Application。</p>
<h2 id="首先，创建GreenDaoModule-java"><a href="#首先，创建GreenDaoModule-java" class="headerlink" title="首先，创建GreenDaoModule.java"></a>首先，创建GreenDaoModule.java</h2><p>GreenDaoModule.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">@Module</div><div class="line">public class GreenDaoModule &#123;</div><div class="line"></div><div class="line">    private final BaseApp application;</div><div class="line"></div><div class="line">    public GreenDaoModule(BaseApp application)&#123;</div><div class="line">        this.application = application;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Provides</div><div class="line">    @Singleton</div><div class="line">    public BaseApp provideApplication()&#123;</div><div class="line">        return application;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Provides</div><div class="line">    @Singleton</div><div class="line">    SQLiteDatabase provideSQLiteDatabase(BaseApp baseApp)&#123;</div><div class="line">        DaoMaster.OpenHelper helper = new DaoMaster.DevOpenHelper(baseApp, &quot;zlot-db&quot;, null);</div><div class="line">        SQLiteDatabase sqlDB = helper.getWritableDatabase();</div><div class="line">        return sqlDB;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Provides</div><div class="line">    @Singleton</div><div class="line">    DaoMaster provideDaoMaster(SQLiteDatabase sqLiteDatabase)&#123;</div><div class="line">        DaoMaster daoMaster = new DaoMaster(sqLiteDatabase);</div><div class="line">        return daoMaster;</div><div class="line">    &#125;</div><div class="line">    @Provides</div><div class="line">    @Singleton</div><div class="line">    DaoSession provideDaoSession(DaoMaster daoMaster)&#123;</div><div class="line">        DaoSession daoSession = daoMaster.newSession();</div><div class="line">        return daoSession;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上述代码中，我们提供了BaseApp，SQLiteDatabase，DaoMaster，DaoSession的依赖，均是单例模式。<br>在目标类注解的时候，会在GreenDaoModule寻找依赖并提供实例。</p>
<h2 id="创建AppComponent-java，提供注射器"><a href="#创建AppComponent-java，提供注射器" class="headerlink" title="创建AppComponent.java，提供注射器"></a>创建AppComponent.java，提供注射器</h2><p>我们新建一个interface，添加@Component注解，就提供了一个注射器，桥接@Inject跟@Module。</p>
<p>AppComponent.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Singleton</div><div class="line">@Component(modules = &#123;GreenDaoModule.class&#125;)</div><div class="line">public interface AppComponent &#123;</div><div class="line">    BaseApp getApplication();</div><div class="line"></div><div class="line">    BasePresenter inject(BasePresenter basePresenter);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中BasePresenter是注射目标，也就是说想要在哪个类里面使用依赖注解，必须在component中注射。</p>
<p>比如我们想在BasePresenter这个类里，使用依赖注入DaoSession实例，必须在component里插入。</p>
<h2 id="在Application中交给dagger2来完成初始化"><a href="#在Application中交给dagger2来完成初始化" class="headerlink" title="在Application中交给dagger2来完成初始化"></a>在Application中交给dagger2来完成初始化</h2><p>Dagger会处理我们的注解，为components生成实现并重命名加上“Dagger”前缀。</p>
<p>MyApplication.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">	 * 初始化依赖加载器</div><div class="line">	 */</div><div class="line">	private void initInjector()&#123;</div><div class="line">		appComponent = DaggerAppComponent</div><div class="line">				.builder()</div><div class="line">				.apiModule(new ApiModule())</div><div class="line">				.greenDaoModule(new GreenDaoModule(this))</div><div class="line">				.build();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">public AppComponent getAppComponent()&#123;</div><div class="line">		return  appComponent;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>我们现在可以利用get方法获取创建的component，然后调用inject()方法将BasePresenter作为参数传进去，这样就完成了绑定BasePresenter依赖。</p>
<h2 id="创建BasePresenter"><a href="#创建BasePresenter" class="headerlink" title="创建BasePresenter"></a>创建BasePresenter</h2><p>BasePresenter的构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public BasePresenter(BaseApp baseApp)&#123;</div><div class="line">    baseApp.getAppComponent().inject(this);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>BasePresenter中使用依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class BasePresenter &#123;</div><div class="line"></div><div class="line">    @Inject</div><div class="line">    DaoSession daoSession;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 自定义http请求任务</div><div class="line">     */</div><div class="line">    @Inject</div><div class="line">    public HttpTask httpTask;</div><div class="line"></div><div class="line">    public BasePresenter(BaseApp baseApp)&#123;</div><div class="line">        baseApp.getAppComponent().inject(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样我们新建一个Presenter继承自BasePresenter，执行inject绑定，就直接可以使用Application提供的依赖来实例化对象了，而且这些实例都是singlton模式，生命周期等同于Application。<br>我们直接可以使用DaoSession来完成sql操作了。</p>
<h2 id="继承Presenter"><a href="#继承Presenter" class="headerlink" title="继承Presenter"></a>继承Presenter</h2><p>UserReguPresenter类继承自BasePresenter类，testLog（）方法来测试数据库的操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class UserReguPresenter  extends BasePresenter&#123;</div><div class="line">    private UserReguActivity userReguActivity;</div><div class="line"></div><div class="line"></div><div class="line">    public UserReguPresenter(UserReguActivity userReguActivity) &#123;</div><div class="line">        super((BaseApp) userReguActivity.getApplication());</div><div class="line">        this.userReguActivity = userReguActivity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"> public void testLog()&#123;</div><div class="line">        Logger.Debug(&quot;调用了presenter的测试&quot;);</div><div class="line">		//new一个实例</div><div class="line">        RegularHoldInfo regularHoldInfo = new RegularHoldInfo();</div><div class="line">        regularHoldInfo.setAmount(100.00);</div><div class="line">        regularHoldInfo.setCcsId(110);</div><div class="line">		//执行sql inset操作</div><div class="line">        daoSession.getRegularHoldInfoDao().insert(regularHoldInfo);</div><div class="line">		//执行sql query操作</div><div class="line">        Query query = daoSession.getRegularHoldInfoDao()</div><div class="line">                .queryBuilder()</div><div class="line">                .where(RegularHoldInfoDao.Properties.CcsId.eq(&quot;110&quot;))</div><div class="line">                .build();</div><div class="line">       List&lt;RegularHoldInfo&gt;  list = (List&lt;RegularHoldInfo&gt;)query.list();</div><div class="line">        if (list.size()&gt;0)&#123;</div><div class="line">            Logger.Debug(&quot;查询结果：&quot;+list.get(0).getAmount());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>泡在网上的日子 <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0519/2892.html" target="_blank" rel="external">详解Dagger2</a></p>
<p><a href="http://blog.csdn.net/finddreams/article/details/50849385" target="_blank" rel="external">基于Retrofit2.0+RxJava+Dragger2实现不一样的Android网络构架搭建</a></p>
<p><a href="http://www.jianshu.com/p/c2feb21064bb" target="_blank" rel="external">Dagger2使用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;dagger2&quot;&gt;&lt;a href=&quot;#dagger2&quot; class=&quot;headerlink&quot; title=&quot;dagger2&quot;&gt;&lt;/a&gt;dagger2&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://google.github.io/dagger/&quot; target=&quot;
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android最佳实践" scheme="http://hammercui.github.io/tags/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>android基础：多渠道打包和代码混淆</title>
    <link href="http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85%E5%92%8C%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/"/>
    <id>http://hammercui.github.io/post/android基础：多渠道打包和代码混淆/</id>
    <published>2016-06-15T03:48:11.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多渠道打包"><a href="#多渠道打包" class="headerlink" title="多渠道打包"></a>多渠道打包</h1><h2 id="AndroidManifest-xml文件解析"><a href="#AndroidManifest-xml文件解析" class="headerlink" title="AndroidManifest.xml文件解析"></a>AndroidManifest.xml文件解析</h2><blockquote>
<p>补充知识<br>AndroidManifest.xml 是每个android程序中必须的文件。它位于整个项目的根目录，描述了package中暴露的组件（activities, services, 等等），他们各自的实现类，各种能被处理的数据和启动位置。 除了能声明程序中的Activities, ContentProviders, Services, 和Intent Receivers,还能指定permissions和instrumentation（安全控制和测试）</p>
</blockquote>
<h3 id="1-lt-meta-adata-gt"><a href="#1-lt-meta-adata-gt" class="headerlink" title="1 &lt;meta-adata&gt;"></a>1 <code>&lt;meta-adata&gt;</code></h3><p><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data android:name=&quot;string&quot;</div><div class="line">           android:resource=&quot;resource specification&quot;</div><div class="line">           android:value=&quot;string&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p><strong>被包含于</strong></p>
<p><code>&lt;activity&gt;</code><br><code>&lt;activity-alias&gt;</code><br><code>&lt;service&gt;</code><br><code>&lt;receiver&gt;</code><br>四个元素中。</p>
<p><strong>说明</strong><br>这个元素用name-value对的格式给其父组件提供任意可选的数据。<br>一个组件元素能够包含任意多个<code>&lt;meta-data&gt;</code>子元素，所有这些元素中定义的值会被收集到一个<a href="http://blog.csdn.net/randyjiawenjie/article/details/6651437" target="_blank" rel="external">Bundle</a>对象中，并且提供给组件的<code>PackageItemInfo.metaData</code>属性字段。<br>通常值是通过其value属性来指定的。但是，也可以使用resource属性来代替，把一个资源ID跟值进行关联。</p>
<p>例如，下面的代码就是把存储在@string/kangaroo资源中的值跟”zoo”名称进行关联：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data android:name=&quot;zoo&quot; android:value=&quot;@string/kangaroo&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>另一个方面，使用resource属性会给zoo分配一个数字资源ID，而不是保存在资源中的值。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data android:name=&quot;zoo&quot; android:resource=&quot;@string/kangaroo&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>要避免使用多个独立的<meta-data>实体来提供相关的数据。相反如果有复杂的数据要跟组件关联，那么把数据作为资源来保存，并使用resource属性，把相关的资源ID通知给组件。</meta-data></p>
<p><strong>属性</strong></p>
<ul>
<li><code>android:name</code><br>针对项目的一个唯一名称。使用Java样式的命名规则，可以确保名称的唯一性，例如：<code>com.example.project.activity.fred</code>。</li>
<li><p><code>android:resource</code><br>这个属性定义了一个要引用的资源。资源的ID会跟这个项目进行关联。通过Bundle.getInt()方法能够从meta-data的Bundle对象中获取这个ID。</p>
</li>
<li><p><code>android:value</code><br>这个属性会给这个项目分配一个值。下表列出了可能分配的数据的数据类型，以及获取这些数据的方法：</p>
</li>
</ul>
<h2 id="多渠道打包-1"><a href="#多渠道打包-1" class="headerlink" title="多渠道打包"></a>多渠道打包</h2><blockquote>
<p>以友盟统计为例,在AndroidManifest.xml里面会有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">    android:name=&quot;UMENG_CHANNEL&quot;</div><div class="line">    android:value=&quot;Channel_ID&quot; /&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>Channel_ID就是渠道标示,我们的目标就是在编译的时候这个值能够自动变化。</p>
<h3 id="1-在AndroidManifest-xml里配置PlaceHolder"><a href="#1-在AndroidManifest-xml里配置PlaceHolder" class="headerlink" title="1 在AndroidManifest.xml里配置PlaceHolder"></a>1 在AndroidManifest.xml里配置PlaceHolder</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">    android:name=&quot;UMENG_CHANNEL&quot;</div><div class="line">    android:value=&quot;$&#123;UMENG_CHANNEL_VALUE&#125;&quot; /&gt;</div></pre></td></tr></table></figure>
<p>${UMENG_CHANNEL_VALUE}这是个引用，具体值在gradle中配置</p>
<h3 id="2-在build-gradle设置productFlavors"><a href="#2-在build-gradle设置productFlavors" class="headerlink" title="2 在build.gradle设置productFlavors"></a>2 在build.gradle设置productFlavors</h3><p>首先配置UMENG_CHANNEL_VALUE的默认值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line"> ···</div><div class="line">	manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;channel_name&quot;]</div><div class="line"> ···</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后配置不同的渠道id</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">android &#123;  </div><div class="line">...</div><div class="line">    productFlavors &#123;</div><div class="line">        xiaomi &#123;</div><div class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;xiaomi&quot;]</div><div class="line">        &#125;</div><div class="line">        _360 &#123;</div><div class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;_360&quot;]</div><div class="line">        &#125;</div><div class="line">        baidu &#123;</div><div class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;baidu&quot;]</div><div class="line">        &#125;</div><div class="line">        wandoujia &#123;</div><div class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;wandoujia&quot;]</div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更简洁的写法，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 友盟多渠道打包</div><div class="line">    productFlavors &#123;</div><div class="line">        wandoujia &#123;&#125;</div><div class="line">        c360 &#123;&#125;</div><div class="line">        baidu &#123;&#125;</div><div class="line">        xiaomi &#123;&#125;</div><div class="line">        tencent &#123;&#125;</div><div class="line">        taobao &#123;&#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    productFlavors.all &#123; flavor -&gt;</div><div class="line">        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>然后在签名配置完成后，就可以使用命令行打包了</p>
<h2 id="gradle命令行打包"><a href="#gradle命令行打包" class="headerlink" title="gradle命令行打包"></a>gradle命令行打包</h2><h3 id="1-使用gradle命令配置签名"><a href="#1-使用gradle命令配置签名" class="headerlink" title="1 使用gradle命令配置签名"></a>1 使用gradle命令配置签名</h3><p>首先在app的build.gradle文件配置要签名的keystore文件</p>
<p>为了不暴露密码，不直接在signingConfigs中配置密码，需要在控制台输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">def releaseTime() &#123;</div><div class="line">    return new Date().format(&quot;yyyy-MM-dd&quot;, TimeZone.getTimeZone(&quot;UTC&quot;))</div><div class="line">&#125;</div><div class="line"></div><div class="line">android &#123;</div><div class="line">...</div><div class="line"></div><div class="line">	//执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。</div><div class="line">    lintOptions &#123;</div><div class="line">        abortOnError false</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">	signingConfigs &#123;</div><div class="line">		debug &#123;</div><div class="line">            // No debug config</div><div class="line">        &#125;		</div><div class="line">		//release版本</div><div class="line">		release&#123;</div><div class="line">           storeFile file(&apos;../keystore文件名&apos;)</div><div class="line">			keyAlias &apos;asar&apos;</div><div class="line">			storePassword System.console().readLine(&quot;\nKeystore password: &quot;)  </div><div class="line">			keyPassword System.console().readLine(&quot;\nKey password: &quot;)  </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	buildTypes &#123;  </div><div class="line">		debug &#123;</div><div class="line">            // 显示Log</div><div class="line">            buildConfigField &quot;boolean&quot;, &quot;LOG_DEBUG&quot;, &quot;true&quot;</div><div class="line"></div><div class="line">            versionNameSuffix &quot;-debug&quot;</div><div class="line">            minifyEnabled false</div><div class="line">            zipAlignEnabled false</div><div class="line">            shrinkResources false</div><div class="line">            signingConfig signingConfigs.debug</div><div class="line">        	&#125;</div><div class="line">	    release &#123;  </div><div class="line">	         ...  </div><div class="line">			// 不显示Log</div><div class="line">            buildConfigField &quot;boolean&quot;, &quot;LOG_DEBUG&quot;, &quot;false&quot;</div><div class="line">			//混淆</div><div class="line">			minifyEnabled true</div><div class="line">			//zipAlgn优化</div><div class="line">			zipAlignEnabled true</div><div class="line">			//移除无用的resource文件</div><div class="line">			shrinkResources true</div><div class="line">			 </div><div class="line">			//加载默认的混淆配置文件</div><div class="line">			proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">			//签名</div><div class="line">	        signingConfig signingConfigs.release </div><div class="line">			//配置输出的apk文件名</div><div class="line"> 			applicationVariants.all &#123; variant -&gt;</div><div class="line">                variant.outputs.each &#123; output -&gt;</div><div class="line">                    def outputFile = output.outputFile</div><div class="line">                    if (outputFile != null &amp;&amp; outputFile.name.endsWith(&apos;.apk&apos;)) &#123;</div><div class="line">                    	// 输出apk名称为zlot_v1.0_2015-01-15_wandoujia.apk</div><div class="line">                        def fileName = &quot;zlot_v$&#123;defaultConfig.versionName&#125;_$&#123;releaseTime()&#125;_$&#123;variant.productFlavors[0].name&#125;.apk&quot;</div><div class="line">                        output.outputFile = new File(outputFile.parent, fileName)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	        &#125;  </div><div class="line">	   &#125;  </div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="2-使用命令行打包"><a href="#2-使用命令行打包" class="headerlink" title="2 使用命令行打包"></a>2 使用命令行打包</h2><p>1 view-&gt;ToolWindows-&gt;Terminal打开命令行<br>2 在命令行输入<code>gradlew -v</code> ，如果第一次会执行下载gradle，记得翻墙，不然会慢到崩溃<br>3 执行<code>gradlew clean</code>,等待时间会比较长<br>4 执行<code>gradle build</code>，开始编译，成功后<code>zlot\build\outputs\apk</code>目录会有编译后的apk,<br>这时编译的apk包括debug版本，release版本，特别慢<br>补充</p>
<ul>
<li><code>gradlew assembleRelease</code> ：只编译并打Release的包</li>
<li><code>gradlew assembleDebug</code>   :只编译并打包debug版本</li>
</ul>
<p>除此之外 assemble 还能和 Product Flavor 结合创建新的任务，其实 assemble 是和 Build Variants 一起结合使用的，而Build Variants = Build Type + Product Flavor ， 举个例子大家就明白了：</p>
<ul>
<li><code>gradlew assembleWandoujiaRelease</code>只打包wandoujia渠道的release包</li>
</ul>
<h3 id="3-比命令行更简单的打包方式"><a href="#3-比命令行更简单的打包方式" class="headerlink" title="3 比命令行更简单的打包方式"></a>3 比命令行更简单的打包方式</h3><p>打开androidStudiode gradle面板，会发现多了很多任务，<br><img src="http://xyzphoto.qiniudn.com/wordpress_20_QQ%E6%88%AA%E5%9B%BE20141117162914.png" alt=""></p>
<p>然后直接双击任务生成apk</p>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>当build faile时，找不到错误的原因，可以执行<code>gradlew check</code>进行检测，一般会给出错误原因，<br>比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ndroid &#123;</div><div class="line">    lintOptions &#123;</div><div class="line">        abortOnError false</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div><div class="line">             </div><div class="line">* Try:</div></pre></td></tr></table></figure></p>
<p>意义是让我们关闭lint检查，因为开启的话，有任何的错误或者警告提示，都会终止构建</p>
<h1 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://blog.csdn.net/shineflowers/article/details/45042485" target="_blank" rel="external">Android 使用Android Studio + Gradle 或 命令行 进行apk签名打包</a></p>
<p><a href="http://blog.csdn.net/ljchlx/article/details/43059467" target="_blank" rel="external">Android Studio系列教程六–Gradle多渠道打包</a></p>
<p><a href="http://my.oschina.net/aibenben/blog/370985" target="_blank" rel="external">Android studio 使用心得(四)—android studio 多渠道打包(二)</a></p>
<p><a href="http://www.cnblogs.com/0616--ataozhijia/p/4203997.html" target="_blank" rel="external">[Android Studio] Android studio 多渠道打包(超简洁版)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多渠道打包&quot;&gt;&lt;a href=&quot;#多渠道打包&quot; class=&quot;headerlink&quot; title=&quot;多渠道打包&quot;&gt;&lt;/a&gt;多渠道打包&lt;/h1&gt;&lt;h2 id=&quot;AndroidManifest-xml文件解析&quot;&gt;&lt;a href=&quot;#AndroidManifest-xm
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android" scheme="http://hammercui.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android最佳实践9：greenDao在android studio中的使用</title>
    <link href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B59%EF%BC%9AgreenDao%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://hammercui.github.io/post/android最佳实践9：greenDao的使用/</id>
    <published>2016-06-13T07:53:06.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>greenDao是一个将对象映射到 SQLite 数据库中的轻量且快速的 ORM 解决方案，性能很不错。</p>
</blockquote>
<p><img src="http://static.codeceo.com/images/2015/07/4cb11fd0257a668c15b9deda53cb65fb.png" alt=""></p>
<h1 id="greenDao的特点"><a href="#greenDao的特点" class="headerlink" title="greenDao的特点"></a>greenDao的特点</h1><ul>
<li>精简</li>
<li>性能最大化</li>
<li>不使用注解，使用code generate</li>
</ul>
<h1 id="android-studio中的使用"><a href="#android-studio中的使用" class="headerlink" title="android studio中的使用"></a>android studio中的使用</h1><h2 id="1-android工程配置-greendao-generator-模块"><a href="#1-android工程配置-greendao-generator-模块" class="headerlink" title="1 android工程配置[greendao generator]模块"></a>1 android工程配置[greendao generator]模块</h2><p>1 .src/main目录新建一个与java目录同层的<code>java-gen</code>目录，用于存放由greenDao生成的Bean,Dao,DaoMaster,DaoSession类</p>
<p>2 app的build.gradle添加sourceSets与dependencies</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildTypes&#123;</div><div class="line">...</div><div class="line"></div><div class="line">&#125;</div><div class="line"> sourceSets &#123;</div><div class="line">        main&#123;</div><div class="line">            java.srcDirs = [&apos;src/main/java&apos;,src/main/java-gen]</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">...</div><div class="line"> compile &apos;org.greenrobot:greendao:2.2.1&apos;</div><div class="line">    compile &apos;org.greenrobot:greendao-generator:2.2.0&apos;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-新建greenDao-generator模块，纯java工程"><a href="#2-新建greenDao-generator模块，纯java工程" class="headerlink" title="2 新建greenDao generator模块，纯java工程"></a>2 新建greenDao generator模块，纯java工程</h2><p>1 file-&gt;new-&gt;new module-&gt;java Library-&gt;填写包名类名-&gt;finish</p>
<p>然后在新工程的build.gradle中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies&#123;</div><div class="line">...</div><div class="line">compile &apos;org.greenrobot:greendao-generator:2.2.0&apos;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2 编写【ExampleDaoGenerator】类，注意： 我们的 Java 工程只有一个类，它的内容决定了「GreenDao Generator」的输出，你可以在这个类中通过对象、关系等创建数据库结构，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class ExampleDaoGenerator &#123;</div><div class="line">    public static void main(String args[])&#123;</div><div class="line">        // 正如你所见的，你创建了一个用于添加实体（Entity）的模式（Schema）对象。</div><div class="line">        // 两个参数分别代表：数据库版本号与自动生成代码的包路径。</div><div class="line">        Schema schema = new Schema(1, &quot;com.hammer.example&quot;);</div><div class="line">        //当然，如果你愿意，你也可以分别指定生成的 Bean 与 DAO 类所在的目录，只要如下所示：</div><div class="line">        // 一旦你拥有了一个 Schema 对象后，你便可以使用它添加实体（Entities）了。</div><div class="line">        addNote(schema);</div><div class="line">        // 最后我们将使用 DAOGenerator 类的 generateAll() 方法自动生成代码，此处你需要根据自己的情况更改输出目录（既之前创建的 java-gen)。</div><div class="line">        // 其实，输出目录的路径可以在 build.gradle 中设置，有兴趣的朋友可以自行搜索，这里就不再详解。</div><div class="line">        try &#123;</div><div class="line">            new DaoGenerator().generateAll(schema, &quot;E:/androidSpace/android-lesson/BaseLesson/src/main/java-gen&quot;);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param schema</div><div class="line">     */</div><div class="line">    private static void addNote(Schema schema) &#123;</div><div class="line">        // 一个实体（类）就关联到数据库中的一张表，此处表名为「Note」（既类名）</div><div class="line">        Entity note = schema.addEntity(&quot;Note&quot;);</div><div class="line">        // 你也可以重新给表命名</div><div class="line">        // note.setTableName(&quot;NODE&quot;);</div><div class="line">        // greenDAO 会自动根据实体类的属性值来创建表字段，并赋予默认值</div><div class="line">        // 接下来你便可以设置表中的字段：</div><div class="line">        note.addIdProperty();</div><div class="line">        note.addStringProperty(&quot;text&quot;).notNull();</div><div class="line">        // 与在 Java 中使用驼峰命名法不同，默认数据库中的命名是使用大写和下划线来分割单词的。</div><div class="line">        // For example, a property called “creationDate” will become a database column “CREATION_DATE”.</div><div class="line">        note.addStringProperty(&quot;comment&quot;);</div><div class="line">        note.addDateProperty(&quot;date&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3 执行run main函数，生成如图4个文件<br><img src="http://7xrf0l.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160614113731.png" alt=""></p>
<h1 id="在android工程进行数据库操作"><a href="#在android工程进行数据库操作" class="headerlink" title="在android工程进行数据库操作"></a>在android工程进行数据库操作</h1><h2 id="1-考虑到application的生命周期，把DaoMaster跟DaoSession的实例放到application中，避免重复创建"><a href="#1-考虑到application的生命周期，把DaoMaster跟DaoSession的实例放到application中，避免重复创建" class="headerlink" title="1 考虑到application的生命周期，把DaoMaster跟DaoSession的实例放到application中，避免重复创建"></a>1 考虑到application的生命周期，把DaoMaster跟DaoSession的实例放到application中，避免重复创建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public  DaoMaster getDaoMaster(Context context)&#123;</div><div class="line">        if (daoMaster == null)&#123;</div><div class="line">            daoMaster = new DaoMaster(getSQLDB(context));</div><div class="line">        &#125;</div><div class="line">        return daoMaster;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public SQLiteDatabase getSQLDB(Context context)&#123;</div><div class="line">        if (sqlDB == null)&#123;</div><div class="line">            DaoMaster.OpenHelper helper = new DaoMaster.DevOpenHelper(context, &quot;zlot-db&quot;, null);</div><div class="line">            sqlDB = helper.getWritableDatabase();</div><div class="line">        &#125;</div><div class="line">        return  sqlDB;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public DaoSession getDaoSession(Context context)&#123;</div><div class="line">        if (daoSession == null)</div><div class="line">        &#123;</div><div class="line">            if (daoMaster == null)</div><div class="line">            &#123;</div><div class="line">                daoMaster = getDaoMaster(context);</div><div class="line">            &#125;</div><div class="line">            daoSession = daoMaster.newSession();</div><div class="line">        &#125;</div><div class="line">        return daoSession;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="2-考虑到松耦合性，新增一个Dao的中间层，用来切换不同的Dao实现"><a href="#2-考虑到松耦合性，新增一个Dao的中间层，用来切换不同的Dao实现" class="headerlink" title="2 考虑到松耦合性，新增一个Dao的中间层，用来切换不同的Dao实现"></a>2 考虑到松耦合性，新增一个Dao的中间层，用来切换不同的Dao实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">public class NoteDaoMiddle &#123;</div><div class="line">    private NoteDao noteDao;</div><div class="line">    private ILessonSixActvity lessonSixActvity;</div><div class="line">    public  ArrayList&lt;Note&gt; notes = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    public NoteDaoMiddle(ILessonSixActvity lessonSixActvity, DaoSession daoSession)&#123;</div><div class="line">        this.lessonSixActvity = lessonSixActvity;</div><div class="line">        this.noteDao = daoSession.getNoteDao();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public void add(Note note)&#123;</div><div class="line">        Observable.create(subscriber-&gt;&#123;</div><div class="line">            noteDao.insert(note);</div><div class="line">            notes.add(note);</div><div class="line">            subscriber.onCompleted();</div><div class="line">        &#125;).subscribeOn(Schedulers.io()) //指定 subscribe() 发生在 IO 线程</div><div class="line">                .observeOn(AndroidSchedulers.mainThread()) //指定 Subscriber 的回调发生在主线程</div><div class="line">                .subscribe(getUpdateSubScriber());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void search(String title)&#123;</div><div class="line">        Observable.create(subscriber-&gt;&#123;</div><div class="line">            //为空</div><div class="line">            if (TextUtils.isEmpty(title))&#123;</div><div class="line">                // Query 类代表了一个可以被重复执行的查询</div><div class="line">                Query&lt;Note&gt; query = noteDao.queryBuilder()</div><div class="line">                        .orderAsc(NoteDao.Properties.Date)</div><div class="line">                        .build();</div><div class="line">                //      查询结果以 List 返回</div><div class="line">                notes = (ArrayList&lt;Note&gt;) query.list();</div><div class="line">            &#125;</div><div class="line">            else&#123;</div><div class="line">                Query query = noteDao.queryBuilder()</div><div class="line">                        .where(NoteDao.Properties.Text.eq(title))</div><div class="line">                        .orderAsc(NoteDao.Properties.Date)</div><div class="line">                        .build();</div><div class="line">                notes = (ArrayList&lt;Note&gt;) query.list();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 在 QueryBuilder 类中内置两个 Flag 用于方便输出执行的 SQL 语句与传递参数的值</div><div class="line">            QueryBuilder.LOG_SQL = true;</div><div class="line">            QueryBuilder.LOG_VALUES = true;</div><div class="line">            subscriber.onCompleted();</div><div class="line">        &#125;)</div><div class="line">                .subscribeOn(Schedulers.io()) //指定 subscribe() 发生在 IO 线程</div><div class="line">                .observeOn(AndroidSchedulers.mainThread()) //指定 Subscriber 的回调发生在主线程</div><div class="line">                .subscribe(getUpdateSubScriber());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private Subscriber&lt;Object&gt; getUpdateSubScriber()&#123;</div><div class="line"></div><div class="line">        return  new Subscriber&lt;Object&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void onCompleted() &#123;</div><div class="line">                lessonSixActvity.onUpdateList(notes);</div><div class="line">                LogUtil.Debug(&quot;onCompleted&quot;);</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void onError(Throwable e) &#123;</div><div class="line">                LogUtil.Debug(&quot;onError:&quot;+e.toString());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onNext(Object o) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-响应view层的增删查改操作"><a href="#3-响应view层的增删查改操作" class="headerlink" title="3 响应view层的增删查改操作"></a>3 响应view层的增删查改操作</h2><p>新建NoteDaoMiddle实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</div><div class="line">       super.onCreate(savedInstanceState);</div><div class="line">       ...</div><div class="line">       daoSession = MyApplication.getIns().getDaoSession(this);</div><div class="line">       noteDaoMiddle = new NoteDaoMiddle(this,daoSession);</div><div class="line"></div><div class="line">       &apos;&apos;&apos;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>响应add search按钮<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">private void addNote()&#123;</div><div class="line">       //如果新增为空，弹出</div><div class="line">       if (TextUtils.isEmpty(editText.getText()))&#123;</div><div class="line">           Toast.makeText(this,&quot;add不能为空&quot;,Toast.LENGTH_SHORT);</div><div class="line">           return;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">    	&apos;&apos;&apos;</div><div class="line">       // 插入操作，简单到只要你创建一个 Java 对象</div><div class="line">       Note note = new Note(null, noteText, comment, new Date());</div><div class="line">       noteDaoMiddle.add(note);</div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">private void search(String title) &#123;</div><div class="line">       noteDaoMiddle.search(title);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>通过回调或者接口响应查询结果,并通知listview刷新视图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public void onUpdateList(ArrayList&lt;Note&gt; notes) &#123;</div><div class="line">        sixAdapter.setData(notes);</div><div class="line">        sixAdapter.notifyDataSetChanged();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.codeceo.com/article/android-orm-greendao-usage.html" target="_blank" rel="external">Android ORM 框架 greenDAO 使用经验总结</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;greenDao是一个将对象映射到 SQLite 数据库中的轻量且快速的 ORM 解决方案，性能很不错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://static.codeceo.com/images/2015/07
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android最佳实践" scheme="http://hammercui.github.io/tags/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>android基础：工具类</title>
    <link href="http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://hammercui.github.io/post/android基础：工具类/</id>
    <published>2016-06-12T14:25:20.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要总结下android常用的工具类</p>
</blockquote>
<h1 id="TextUtils类，处理字符串"><a href="#TextUtils类，处理字符串" class="headerlink" title="TextUtils类，处理字符串"></a>TextUtils类，处理字符串</h1><p><code>android.text.TextUtils</code>这个类有以下功能</p>
<ul>
<li><code>public static boolean isEmpty(@Nullable CharSequence str)</code>这个方法判断字符串非null且非空，在对字符串进行判断时可以不必if(str !=null &amp;&amp; str.length() &gt; 0)这样判断。</li>
<li><code>public static CharSequence concat(CharSequence... text)</code> 字符串连接。有很多字符串，你还在用＋拼接或自己new 一个StringBuffer\StringBuilder么？其实这个方法已经帮我们做好了，用StringBuilder实现，进行字符串拼接时可以考虑使用这个方法。而且支持SpannableString。</li>
<li><code>public static boolean isDigitsOnly(CharSequence str)</code> 判断所给的字符串是否只有数字</li>
<li><code>public static boolean equals(CharSequence a, CharSequence b)</code> 判断两个字符串对象的内容是否相等，内部进行了非null判断</li>
<li><code>public static String htmlEncode(String s)</code>将html代码中的特殊字符进行转码处理</li>
</ul>
<h1 id="android-text-format-DateUtils-日期格式化工具"><a href="#android-text-format-DateUtils-日期格式化工具" class="headerlink" title="android.text.format.DateUtils 日期格式化工具"></a>android.text.format.DateUtils 日期格式化工具</h1><h1 id="android-webkit-URLUtil-URI判断工具类"><a href="#android-webkit-URLUtil-URI判断工具类" class="headerlink" title="android.webkit.URLUtil URI判断工具类"></a>android.webkit.URLUtil URI判断工具类</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[Android快速开发系列 10个常用工具类]（<a href="http://blog.csdn.net/lmj623565791/article/details/38965311）" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/38965311）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要总结下android常用的工具类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;TextUtils类，处理字符串&quot;&gt;&lt;a href=&quot;#TextUtils类，处理字符串&quot; class=&quot;headerlink&quot; title=&quot;TextU
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android" scheme="http://hammercui.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>直播的相关技术</title>
    <link href="http://hammercui.github.io/post/%E7%9B%B4%E6%92%AD%E7%9A%84%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    <id>http://hammercui.github.io/post/直播的相关技术/</id>
    <published>2016-06-10T12:59:26.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>重要从四点来说直播的相关技术</p>
</blockquote>
<ul>
<li>服务器，云存储</li>
<li>手机端推流，主播</li>
<li>手机端拉流，观众</li>
<li>互动sdk，比如打赏，弹幕</li>
</ul>
<h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><p>流媒体服务器就是p2p服务器</p>
<blockquote>
<p>一般自建流媒体服务器平比较复杂，维护也麻烦，都选择现成的云存储解决方案<br>技术关键字<code>rtmp</code>推流，<code>hls</code>拉流</p>
</blockquote>
<p>上行，就是数据上传，一般有<br>RTMP，HLS推流</p>
<p>下行，播放，一般有<br>RTMP、HLS和HTTP（FLV）协议</p>
<h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>RTMP,RTSP,HLS都是流媒体协议，如果要开发一套准实时的手机音视频直播系统，需要支持iphone，android，windows phone等多款手机，最好使用hls协议，这个时候客户端播放的是切割的ts文件，它的延迟取决于切片的大小。</p>
<ul>
<li>rtmp和hls并存：rtmp一般用于pc-flash播放直播，而hls用于移动端播放</li>
<li>RTMP本质上是流协议，实时性高，RTMP的实时性在3秒之内</li>
<li>hls是apple搞出来的协议，实时性在3s左右， Apple 为了提高流播效率开发的技术，特点是将流媒体切分为若干 TS 片段（比如每10秒一段），然后通过一个扩展的 m3u 列表文件将这些 TS 片段集中起来供客户端播放器接收。比mp4适合做直播技术。</li>
</ul>
<p><a href="https://github.com/ossrs/srs/wiki/v1_CN_RTMP.PK.HTTP" target="_blank" rel="external">参考文章</a></p>
<h2 id="腾讯云视频解决方案，全方向"><a href="#腾讯云视频解决方案，全方向" class="headerlink" title="腾讯云视频解决方案，全方向"></a><a href="https://www.qcloud.com/solution/video.html" target="_blank" rel="external">腾讯云视频解决方案，全方向</a></h2><blockquote>
<p>最全的解决方案，包括服务器，客户端的sdk</p>
</blockquote>
<p>代表商</p>
<ul>
<li>龙珠直播</li>
</ul>
<p>提供游戏直播，美女主播解决方案，比如：</p>
<ul>
<li>直播提供HLS拉流/RTMP推流接入能力，快速接入游戏主播摄像头、游戏桌面、专业视频源等，并行进快速下发；通过500+CDN节点快速触及玩家；低至2秒延迟；</li>
<li>互动直播通过双向SDK，提供400ms超低延迟的实时互动能力，提供游戏直播场景中的互动能力；下行也可通过标准HLS下发进行单向直播，无需安装SDK；</li>
<li>提供推流端口，播放端的sdk<br>架构如图<br><img src="https://qzonestyle.gtimg.cn/aoi/sola/20151228190527_8KQCd9MwEL.png" alt=""></li>
</ul>
<h2 id="网易视频云，全方向"><a href="#网易视频云，全方向" class="headerlink" title="网易视频云，全方向"></a><a href="http://vcloud.163.com/live.html" target="_blank" rel="external">网易视频云，全方向</a></h2><blockquote>
<p>解决方案也很全，包括服务器，客户端的sdk，贵</p>
</blockquote>
<p>代表商<br>BoBo美女主播</p>
<ul>
<li>提供推流Android SDK， iOS SDK，Windows SDK</li>
<li>提供播放器Android SDK， iOS SDK</li>
</ul>
<h2 id="乐视云方案，手机方向"><a href="#乐视云方案，手机方向" class="headerlink" title="乐视云方案，手机方向"></a><a href="http://www.lecloud.com/mobile.html" target="_blank" rel="external">乐视云方案，手机方向</a></h2><p>产品架构图</p>
<p><img src="http://i3.letvimg.com/lc05_lecloud/201604/19/20/12/process.png" alt=""></p>
<h2 id="阿里云直播-pc方向"><a href="#阿里云直播-pc方向" class="headerlink" title="阿里云直播,pc方向"></a><a href="https://www.aliyun.com/solution/media/live?spm=5176.8009263.277601.3.j9Hr2d" target="_blank" rel="external">阿里云直播,pc方向</a></h2><p>产品架构图<br><img src="https://img.alicdn.com/tps/i4/TB1yKnMIpXXXXb5XVXXyEWcOpXX-612-454.jpg" alt=""></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>手机端推流，主要就是链接服务器，上传ts文件碎片</p>
<p>手机端拉流，主要就是下载ts文件碎片，播放的问题</p>
<p>互动sdk,参考聊天，弹幕类，主要是udp技术。</p>
<p>付费扣费sdk,主要是http技术</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;重要从四点来说直播的相关技术&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;服务器，云存储&lt;/li&gt;
&lt;li&gt;手机端推流，主播&lt;/li&gt;
&lt;li&gt;手机端拉流，观众&lt;/li&gt;
&lt;li&gt;互动sdk，比如打赏，弹幕&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 
    
    </summary>
    
      <category term="技术杂谈" scheme="http://hammercui.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="技术杂谈" scheme="http://hammercui.github.io/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>android基础：Activity Window View ViewGroup</title>
    <link href="http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9AActivity-Window-View-ViewGroup/"/>
    <id>http://hammercui.github.io/post/android基础：Activity-Window-View-ViewGroup/</id>
    <published>2016-05-30T02:22:08.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="View与ViewGroup的关系"><a href="#View与ViewGroup的关系" class="headerlink" title="View与ViewGroup的关系"></a>View与ViewGroup的关系</h1><p>Android系统中的所有UI类都是建立在View和ViewGroup这两个类的基础上的。</p>
<ul>
<li>所有View的子类成为”Widget”</li>
<li>所有ViewGroup的子类成为”Layout”</li>
<li>ViewGroup是一种特殊的View</li>
</ul>
<p>View和ViewGroup之间采用了组合设计模式，可以使得“部分-整体”同等对待。ViewGroup作为布局容器类的最上层，布局容器里面又可以有View和ViewGroup</p>
<p>如下图<br><img src="http://hi.csdn.net/attachment/201108/21/0_1313928575W9Q0.gif" alt=""></p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul>
<li>如果viewgroup有一个子view是invisible状态，viewgroup就是invisible状态</li>
</ul>
<p><img src="http://img.blog.csdn.net/20140919111037400?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFua2V0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p><img src="http://img.blog.csdn.net/20140919110917937?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFua2V0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br><img src="http://img.blog.csdn.net/20140919111133997?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFua2V0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p><img src="http://img.blog.csdn.net/20140919111154012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFua2V0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h1 id="Activity与window"><a href="#Activity与window" class="headerlink" title="Activity与window"></a>Activity与window</h1><h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><p>在Activity中使用LayoutInflater。<br>LayoutInflater是一个用来实例化XML布局文件为View对象的类<br>LayoutInflater.infalte(R.layout.test,null)用来从指定的XML资源中填充一个新的View</p>
<ul>
<li>Activity的作用相当于人机交互界面，负责管理跟维护View与手机的操作。比如提供用户处理事件的API，如onKeyEvent, onTouchEvent等。</li>
</ul>
<h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><ul>
<li>window是一个抽象类</li>
<li>当我们调用Acitivity的 setContentView方法的时候实际上是调用的Window对象的setContentView方法，Activity中关于界 面的绘制实际上全是交给Window对象来做的</li>
</ul>
<h2 id="Activity与Window关系"><a href="#Activity与Window关系" class="headerlink" title="Activity与Window关系"></a>Activity与Window关系</h2><p>一个Activity包含了一个Window，Window才是真正代表一个窗口，也就是说Activity可以没有Window，那就相当于是Service了。在ActivityThread中也有控制Service的相关函数或许正好印证了这一点。<br> Activity和Window的第一次邂逅是在ActivityThread调用Activity的attach()函数时。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//[window]:通过PolicyManager创建window,实现callback函数,所以,当window接收到</div><div class="line">//外界状态改变时,会调用activity的方法,</div><div class="line"></div><div class="line">final void attach(Context context, ActivityThread aThread,</div><div class="line">        Instrumentation instr, IBinder token, int ident,</div><div class="line">        Application application, Intent intent, ActivityInfo info,</div><div class="line">        CharSequence title, Activity parent, String id,</div><div class="line">        NonConfigurationInstances lastNonConfigurationInstances,</div><div class="line">        Configuration config, String referrer, IVoiceInteractor voiceInteractor) &#123;</div><div class="line">    ....</div><div class="line">    mWindow = PolicyManager.makeNewWindow(this);</div><div class="line">    //当window接收系统发送给它的IO输入事件时,例如键盘和触摸屏事件,就可以转发给相应的Activity</div><div class="line">    mWindow.setCallback(this);</div><div class="line">    .....</div><div class="line">    //设置本地窗口管理器</div><div class="line">    mWindow.setWindowManager(</div><div class="line">            (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),</div><div class="line">            mToken, mComponent.flattenToString(),</div><div class="line">            (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0);</div><div class="line">    .....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 在attach()中，新建一个Window实例作为自己的成员变量，它的类型为PhoneWindow,这是抽象类Window的一个子类。然后设置mWindow的WindowManager。</p>
<h2 id="Window-Activity和DecorView"><a href="#Window-Activity和DecorView" class="headerlink" title="Window,Activity和DecorView"></a>Window,Activity和DecorView</h2><p>DecorView是FrameLayout的子类，它可以被认为是Android视图树的根节点视图。DecorView作为顶级View，一般情况下它内部包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分（具体情况和Android版本及主体有关），上面的是标题栏，下面的是内容栏。在Activity中通过setContentView所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是content，在代码中可以通过ViewGroup content = （ViewGroup)findViewById(R.android.id.content)来得到content对应的layout。<br> Window中有几个视图相关的比较重要的成员变量如下所示:</p>
<ul>
<li>mDecor:DecorView的实例，标示Window内部的顶级视图</li>
<li>mContentParent:setContetView所设置的布局文件就加到这个视图中</li>
<li>mContentRoot:是DecorView的唯一子视图，内部包含mContentParent,标题栏和状态栏。<br> <br>Activity中不仅持有一个Window实例，还有一个类型为View的mDecor实例。这个实例和Window中的mDecor实例有什么关系呢？它又是什么时候被创建的呢？<br> 二者其实指向同一个对象，这个对象是在Activity调用setContentView时创建的。我们都知道Activity的setContentView实际上是调用了Window的setContentView方法。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void setContentView(int layoutResID) &#123;</div><div class="line">    if (mContentParent == null) &#123; //[window]如何没有DecorView,那么就新建一个</div><div class="line">        installDecor(); //[window]</div><div class="line">    &#125; else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</div><div class="line">        mContentParent.removeAllViews();</div><div class="line">    &#125;</div><div class="line">    ....</div><div class="line">    //[window]第二步,将layout添加到mContentParent</div><div class="line">    mLayoutInflater.inflate(layoutResID, mContentParent);</div><div class="line">    .....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://blog.csdn.net/u012422440/article/details/51173387" target="_blank" rel="external">Android视图架构详解</a></p>
<p><a href="http://blog.csdn.net/luoshengyang/article/details/8245546" target="_blank" rel="external">Android应用程序窗口（Activity）的视图对象（View）的创建过程分析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;View与ViewGroup的关系&quot;&gt;&lt;a href=&quot;#View与ViewGroup的关系&quot; class=&quot;headerlink&quot; title=&quot;View与ViewGroup的关系&quot;&gt;&lt;/a&gt;View与ViewGroup的关系&lt;/h1&gt;&lt;p&gt;Android系统中
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android" scheme="http://hammercui.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android基础：adapter详解</title>
    <link href="http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9Aadapter%E8%AF%A6%E8%A7%A3/"/>
    <id>http://hammercui.github.io/post/android基础：adapter详解/</id>
    <published>2016-05-23T06:15:22.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是adapter"><a href="#什么是adapter" class="headerlink" title="什么是adapter"></a>什么是adapter</h1><p>adapter就是适配器，适配器模式把一个类的接口转换成客户端所期待的另一种接口，从而使原本两个接口不匹配而无法在一起工作的类，能够在一起工作</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>举个栗子<br>用电源接口做例子，笔记本电脑的电源一般都是接受5V的电压，但是我们生活中的电线电压一般都是220V的输出。这个时候就出现了不匹配的状况，在软件开发中我们称之为接口不兼容，此时就需要适配器来进行一个接口转换。在软件开发中有一句话正好体现了这点：任何问题都可以加一个中间层来解决。这个层我们可以理解为这里的Adapter层，通过这层来进行一个接口转换就达到了兼容的目的。 </p>
<h1 id="ListView中的Adapter模式"><a href="#ListView中的Adapter模式" class="headerlink" title="ListView中的Adapter模式"></a>ListView中的Adapter模式</h1><p>为什么listview要用adapter呢？我们知道，作为重要的视图元素，listview展示的view千变万化，ListView需要能够显示各式各样的视图，每个人需要的显示效果各不相同，显示的数据类型，数量也不尽相同，那么如何隔离这种变化尤为重要。</p>
<p>Android的做法是增加一个Adapter层来应对变化，将ListView需要的接口抽象到Adapter对象中，这样只要用户实现了Adapter的接口，ListView就可以按照用户设定的显示效果、数量、数据来显示特定的Item View。 </p>
<p>通过代理数据集来告知ListView数据的个数( <code>getCount()</code>函数 )以及每个数据的类型( <code>getItem()</code>函数 )，最重要的是要解决Item View的输出。Item View千变万化，但终究它都是View类型，Adapter统一将Item View输出为View ( <code>getView()</code>函数 )，这样就很好的应对了Item View的可变性。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://blog.csdn.net/bboyfeiyu/article/details/43950185" target="_blank" rel="external">Android源码之ListView的适配器模式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是adapter&quot;&gt;&lt;a href=&quot;#什么是adapter&quot; class=&quot;headerlink&quot; title=&quot;什么是adapter&quot;&gt;&lt;/a&gt;什么是adapter&lt;/h1&gt;&lt;p&gt;adapter就是适配器，适配器模式把一个类的接口转换成客户端所期待的另一种
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android" scheme="http://hammercui.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android基础：浅析mvc与mvp</title>
    <link href="http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9A%E6%B5%85%E6%9E%90mvc%E4%B8%8Emvp/"/>
    <id>http://hammercui.github.io/post/android基础：浅析mvc与mvp/</id>
    <published>2016-05-20T01:41:08.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要使用框架"><a href="#为什么要使用框架" class="headerlink" title="为什么要使用框架"></a>为什么要使用框架</h1><p>设计框架的目的：</p>
<ul>
<li>提高开发效率，尤其是协同工作</li>
<li>业务逻辑的切分，渐进式开发，提高业务的重用性，灵活性</li>
<li>测试以及问题的定位</li>
<li>日常的更新与维护</li>
</ul>
<h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p>经典的框架，view层，model层，Controller层.<br>用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。</p>
<p>在android中的实践呢？</p>
<ul>
<li>M层：适合的业务逻辑。数据库存取，网络操作，复杂算法，耗时操作</li>
<li>V层：显示数据</li>
<li>Contro层：在很多情况下activity会掺和很多Controller的事情，activity负责人机交互界面。</li>
</ul>
<p>举例：<br>Activity读取V视图层的数据（eg.读取当前EditText控件的数据），控制用户输入（eg.EditText控件数据的输入），并向Model发送数据请求（eg.发起网络请求等）。</p>
<h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><p>(1)耦合性低。所谓耦合性就是模块代码之间的关联程度。利用MVC框架使得View（视图）层和Model（模型）层可以很好的分离，这样就达到了解耦的目的，所以耦合性低，减少模块代码之间的相互影响。便于进行单元开发，单元测试<br>(2)可扩展性好。由于耦合性低，添加需求，扩展代码就可以减少修改之前的代码，降低bug的出现率。<br>(3)模块职责划分明确。主要划分层M,V,C三个模块，利于代码的维护。</p>
<h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><p>Activity中有很多关于视图UI的显示代码，因此View视图和Activity控制器并不是完全分离的，当activity类业务过多的时候，会变得难以管理和维护。<br>尤其是当ui的状态数据，跟持久化的数据混杂在一起，变得极为混乱。</p>
<h1 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h1><p>为了解决view层代码过多，引入了这套设计框架。<br>MVP从更早的MVC框架演变过来，与MVC有一定的相似性：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。<br>如下图<br><img src="http://assets.tianmaying.com/md-image/ea995e88af236afbd8fdc4906a67e829" alt=""></p>
<p>MVP框架由3部分组成：View负责显示，Presenter负责逻辑处理，Model提供数据。在MVP模式里通常包含3个要素（加上View interface是4个）：</p>
<ul>
<li>View：负责呈现ui，与用户进行交互，如activity fragment</li>
<li>Model: 负责存储，检索，操作数据</li>
<li>Presenter：作为view跟model的桥梁，处理交互与数据逻辑。</li>
<li>View Interface:Presenter中持有的view层接口，负责给view返回消息。降低耦合，方便单元测试</li>
</ul>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>1 模型与视图完全分离，我们可以修改视图而不影响模型；<br>2 可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部；<br>3 我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁；<br>4 如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）。</p>
<h1 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h1><p><img src="http://pic001.cnblogs.com/images/2012/1/2012040113391482.jpg" alt=""></p>
<p>（最主要区别）View与Model并不直接交互，而是通过与Presenter交互来与Model间接交互。而在MVC中View可以与Model直接交互<br>通常View与Presenter是一对一的，但复杂的View可能绑定多个Presenter来处理逻辑。而Controller是基于行为的，并且可以被多个View共享，Controller可以负责决定显示哪个View<br>Presenter与View的交互是通过接口来进行的，更有利于添加单元测试。</p>
<h1 id="附赠MVVM知识"><a href="#附赠MVVM知识" class="headerlink" title="附赠MVVM知识"></a>附赠MVVM知识</h1><p>MVVM可以算是MVP的升级版，其中的VM是ViewModel的缩写，ViewModel可以理解成是View的数据模型和Presenter的合体，ViewModel和View之间的交互通过Data Binding完成，而Data Binding可以实现双向的交互，这就使得视图和控制层之间的耦合程度进一步降低，关注点分离更为彻底，同时减轻了Activity的压力。</p>
<p>MVC -&gt; MVP -&gt; MVVM 这几个软件设计模式是一步步演化发展的，MVVM 是从 MVP 的进一步发展与规范，MVP 隔离了MVC中的 M 与 V 的直接联系后，靠 Presenter 来中转，所以使用 MVP 时 P 是直接调用 View 的接口来实现对视图的操作的，这个 View 接口的东西一般来说是 showData、showLoading等等。M 与 V已经隔离了，方便测试了，但代码还不够优雅简洁，所以 MVVM 就弥补了这些缺陷。在 MVVM 中就出现的 Data Binding 这个概念，意思就是 View 接口的 showData 这些实现方法可以不写了，通过 Binding 来实现。</p>
<p>google官方已经推出了Data Binding库来写声明的layouts文件，并且用最少的代码来绑定你的app逻辑和layouts文件<br>Data Binding库不仅灵活而且广泛兼容- 它是一个support库，因此你可以在所有的Android平台最低能到Android 2.1（API等级7+）上使用它。</p>
<h2 id="三者的异同"><a href="#三者的异同" class="headerlink" title="三者的异同"></a>三者的异同</h2><p><img src="http://assets.tianmaying.com/md-image/bb8f3106230c33063ab53393dfe1876a.jpg" alt=""></p>
<p>异<br>三者的差异在于如何粘合View和Model，实现用户的交互操作以及变更通知</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://www.tianmaying.com/tutorial/AndroidMVC" target="_blank" rel="external">Android App的设计架构：MVC,MVP,MVVM与架构经验谈</a></p>
<p><a href="https://segmentfault.com/a/1190000002876984" target="_blank" rel="external">Data Binding 用户指南（Android）</a></p>
<p><a href="http://blog.csdn.net/asce1885/article/details/47080085" target="_blank" rel="external">Android DataBinding：再见Presenter，你好ViewModel！</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么要使用框架&quot;&gt;&lt;a href=&quot;#为什么要使用框架&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用框架&quot;&gt;&lt;/a&gt;为什么要使用框架&lt;/h1&gt;&lt;p&gt;设计框架的目的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提高开发效率，尤其是协同工作&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>android最佳实践10：开源库汇总</title>
    <link href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B510%EF%BC%9A%E5%BC%80%E6%BA%90%E5%BA%93%E6%B1%87%E6%80%BB/"/>
    <id>http://hammercui.github.io/post/android最佳实践10：开源库汇总/</id>
    <published>2016-05-16T01:57:48.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一部分：工具库"><a href="#第一部分：工具库" class="headerlink" title="第一部分：工具库"></a>第一部分：工具库</h1><h2 id="依赖注入库"><a href="#依赖注入库" class="headerlink" title="依赖注入库"></a>依赖注入库</h2><h3 id="dagger：Square公司的明星项目，已被google官方采用"><a href="#dagger：Square公司的明星项目，已被google官方采用" class="headerlink" title="dagger：Square公司的明星项目，已被google官方采用"></a><a href="https://github.com/square/dagger" target="_blank" rel="external">dagger</a>：Square公司的明星项目，已被google官方采用</h3><ul>
<li>依赖注入，适用于 Android 和 Java</li>
<li>在android平台，特别适合mvp架构</li>
<li><a href="http://square.github.io/dagger/" target="_blank" rel="external">官网</a></li>
<li><a href="http://a.codekk.com/detail/Android/%E6%89%94%E7%89%A9%E7%BA%BF/Dagger%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">Dagger 源码解析</a></li>
<li><a href="http://www.jianshu.com/p/c2feb21064bb" target="_blank" rel="external">Dagger2使用</a></li>
<li><a href="http://blog.csdn.net/tiankong1206/article/details/46486401" target="_blank" rel="external">MVP+Dagger2+Retrofit实现更清晰的架构</a></li>
</ul>
<h3 id="AndroidAnnotations-Code-Diet"><a href="#AndroidAnnotations-Code-Diet" class="headerlink" title="AndroidAnnotations(Code Diet)"></a><a href="https://github.com/excilys/androidannotations" target="_blank" rel="external">AndroidAnnotations(Code Diet)</a></h3><ul>
<li>目前我正在使用的项目，不是很方便，每次要编译时生成Activity的子类_Activity</li>
<li>特点：(1) 依赖注入：包括 view，extras，系统服务，资源等等<br>(2) 简单的线程模型，通过 annotation 表示方法运行在 ui 线程还是后台线程<br>(3) 事件绑定：通过 annotation 表示 view 的响应事件，不用在写内部类<br>(4) REST 客户端：定义客户端接口，自动生成 REST 请求的实现<br>(5) 没有你想象的复杂：AndroidAnnotations 只是在在编译时生成相应子类<br>(6) 不影响应用性能：仅 50kb，在编译时完成，不会对运行时有性能影响。<br>其他：与 roboguice 的比较：roboguice 通过运行时读取 annotations 进行反射，所以可能影响应用性能，而 AndroidAnnotations 在编译时生成子类，所以对性能没有影响</li>
</ul>
<h2 id="图片缓存库"><a href="#图片缓存库" class="headerlink" title="图片缓存库"></a>图片缓存库</h2><ul>
<li>picasso</li>
<li>fresco</li>
<li>Glide</li>
</ul>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><ul>
<li>fresco facebook的明星项目，5.0以下特别流畅，但是包大。亮点是渐进式显示图片</li>
<li>picasso Square的明星项目，跟okhttp结合最好用，包最小</li>
<li>Glide是google出品的图片缓存框架</li>
</ul>
<p>总结，我选择使用Picasso，因为简单易上手。</p>
<h2 id="gradle-retrolambda-java7兼容lambda库"><a href="#gradle-retrolambda-java7兼容lambda库" class="headerlink" title="gradle-retrolambda:java7兼容lambda库"></a><a href="https://github.com/evant/gradle-retrolambda" target="_blank" rel="external">gradle-retrolambda</a>:java7兼容lambda库</h2><p><a href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B51%EF%BC%9Aretrolambda%E6%A1%86%E6%9E%B6/">使用教程</a></p>
<h2 id="rx-android-感受响应式编程魅力"><a href="#rx-android-感受响应式编程魅力" class="headerlink" title="rx-android:感受响应式编程魅力"></a><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">rx-android</a>:感受响应式编程魅力</h2><p><a href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B52%EF%BC%9Arxjava%E6%A1%86%E6%9E%B6/">使用教程</a></p>
<h2 id="Retrofit2-0-最热门的restfull规范网络请求框架"><a href="#Retrofit2-0-最热门的restfull规范网络请求框架" class="headerlink" title="Retrofit2.0:最热门的restfull规范网络请求框架"></a><a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit2.0</a>:最热门的restfull规范网络请求框架</h2><p><a href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B53%EF%BC%9Aretrofit%E6%A1%86%E6%9E%B6/">使用教程</a></p>
<h2 id="EventBus：发布-订阅的事件总线"><a href="#EventBus：发布-订阅的事件总线" class="headerlink" title="EventBus：发布 / 订阅的事件总线"></a><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a>：发布 / 订阅的事件总线</h2><p><a href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B55%EF%BC%9AEventBus/">使用教程</a></p>
<h2 id="高版本向低版本兼容库"><a href="#高版本向低版本兼容库" class="headerlink" title="高版本向低版本兼容库"></a>高版本向低版本兼容库</h2><h3 id="nineoldandroids-JakeWharton大神的项目"><a href="#nineoldandroids-JakeWharton大神的项目" class="headerlink" title="nineoldandroids:JakeWharton大神的项目"></a><a href="https://github.com/JakeWharton/NineOldAndroids" target="_blank" rel="external">nineoldandroids</a>:JakeWharton大神的项目</h3><ul>
<li><a href="http://a.codekk.com/detail/Android/Mr.Simple/NineOldAnimations%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">NineOldAnimations 源码解析</a></li>
<li><a href="http://nineoldandroids.com/" target="_blank" rel="external">文档介绍</a></li>
</ul>
<h1 id="第二部分-ui库"><a href="#第二部分-ui库" class="headerlink" title="第二部分 ui库"></a>第二部分 ui库</h1><h2 id="刷新ui"><a href="#刷新ui" class="headerlink" title="刷新ui"></a>刷新ui</h2><h3 id="BGARefreshLayout-Android-多种下拉刷新效果、上拉加载更多、可配置自定义头部广告位"><a href="#BGARefreshLayout-Android-多种下拉刷新效果、上拉加载更多、可配置自定义头部广告位" class="headerlink" title="BGARefreshLayout-Android:多种下拉刷新效果、上拉加载更多、可配置自定义头部广告位"></a><a href="https://github.com/bingoogolapple/BGARefreshLayout-Android" target="_blank" rel="external">BGARefreshLayout-Android</a>:多种下拉刷新效果、上拉加载更多、可配置自定义头部广告位</h3><p><img src="https://camo.githubusercontent.com/7539fed2c320aecc0d47320586e8c2ee22a2d762/687474703a2f2f37786b39646a2e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f726566726573686c61796f75742f73637265656e73686f74732f6267615f726566726573686c61796f7574322e676966" alt=""></p>
<ul>
<li>目前我正在使用的下拉刷新，上拉加载</li>
</ul>
<h3 id="Android-PullToRefresh"><a href="#Android-PullToRefresh" class="headerlink" title="Android-PullToRefresh"></a><a href="https://github.com/chrisbanes/Android-PullToRefresh" target="_blank" rel="external">Android-PullToRefresh</a></h3><p><img src="https://raw.githubusercontent.com/chrisbanes/Android-PullToRefresh/master/header_graphic.png" alt=""></p>
<ul>
<li>目前使用最广泛的强大的拉动刷新开源项目，强烈推荐使用</li>
<li>支持各种控件下拉刷新，ListView、ViewPager、WebView、ExpandableListView、GridView、ScrollView、Horizontal ScrollView、Fragment 上下左右拉动刷新</li>
<li>APP 示例：新浪微博各个页面</li>
</ul>
<h3 id="android-Ultra-Pull-To-Refresh"><a href="#android-Ultra-Pull-To-Refresh" class="headerlink" title="android-Ultra-Pull-To-Refresh"></a><a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">android-Ultra-Pull-To-Refresh</a></h3><ul>
<li>star数目4991的项目，跟上一个刷新控件媲美</li>
<li>这个继承于 ViewGroup 可以包含任何 View。功能甚至比 SwipeRefreshLayout 强大。使用起来非常简单。良好的设计，如果你想定制自己的 UI 样式，非常简单，就像给 ListView 加一个 Header View 那么简单。支持 API LEVEL &gt;= 8</li>
<li><a href="http://a.codekk.com/detail/Android/Grumoon/android-Ultra-Pull-To-Refresh%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">android-Ultra-Pull-To-Refresh 源码解析</a></li>
</ul>
<h2 id="Material-Design-UI"><a href="#Material-Design-UI" class="headerlink" title="Material Design UI"></a>Material Design UI</h2><h3 id="material-dialogs"><a href="#material-dialogs" class="headerlink" title="material-dialogs"></a><a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="external">material-dialogs</a></h3><ul>
<li>各种material风格的dialog。 漂亮的的、易于使用的和可定制的Dialog API，你能够使用Material designed风格的Dialog到API 8</li>
<li>目前正在使用，文档很全面。</li>
<li><img src="https://raw.githubusercontent.com/afollestad/material-dialogs/master/art/mddemoshowcase.png" alt=""></li>
</ul>
<h2 id="仿ios的ui"><a href="#仿ios的ui" class="headerlink" title="仿ios的ui"></a>仿ios的ui</h2><h3 id="Android-PickerView-仿ios的pickview库"><a href="#Android-PickerView-仿ios的pickview库" class="headerlink" title="Android-PickerView:仿ios的pickview库"></a><a href="https://github.com/saiwu-bigkoo/Android-PickerView" target="_blank" rel="external">Android-PickerView</a>:仿ios的pickview库</h3><p>仿iOS的PickerView控件，有时间选择和选项选择并支持一二三级联动效果<br><img src="https://github.com/saiwu-bigkoo/Android-PickerView/raw/master/preview/pickerdemo.gif" alt=""></p>
<h2 id="ViewPager-、Gallery轮播图-旋转木马效果"><a href="#ViewPager-、Gallery轮播图-旋转木马效果" class="headerlink" title="ViewPager 、Gallery轮播图 旋转木马效果"></a>ViewPager 、Gallery轮播图 旋转木马效果</h2><h3 id="Android-ConvenientBanner-banner轮播图"><a href="#Android-ConvenientBanner-banner轮播图" class="headerlink" title="Android-ConvenientBanner:banner轮播图"></a><a href="https://github.com/saiwu-bigkoo/Android-ConvenientBanner" target="_blank" rel="external">Android-ConvenientBanner</a>:banner轮播图</h3><p><img src="https://github.com/saiwu-bigkoo/Android-ConvenientBanner/raw/master/preview/convenientbannerdemo.gif" alt=""></p>
<ul>
<li>目前我正在使用的控件，没有解决每次imageview重新加载的问题，导致大的图片会先出现空白。</li>
</ul>
<h3 id="LoopRotarySwitch：旋转木马"><a href="#LoopRotarySwitch：旋转木马" class="headerlink" title="LoopRotarySwitch：旋转木马"></a><a href="https://github.com/dalong982242260/LoopRotarySwitch" target="_blank" rel="external">LoopRotarySwitch</a>：旋转木马</h3><p><img src="https://github.com/dalong982242260/LoopRotarySwitch/raw/master/img/dalong.gif" alt=""></p>
<ul>
<li>目前正在使用，适用于3-4个图片，支持无线滚动。<br><strong>优点</strong></li>
<li>适用于Activity和Fragment</li>
<li>可定制大小，可监听事件，可调整旋转滚动半径</li>
</ul>
<h3 id="CarouselViewProject：画廊效果"><a href="#CarouselViewProject：画廊效果" class="headerlink" title="CarouselViewProject：画廊效果"></a><a href="https://github.com/clkasd/CarouselViewProject" target="_blank" rel="external">CarouselViewProject</a>：画廊效果</h3><p><img src="https://camo.githubusercontent.com/fc4718502ecb25f906deb73a34c2e7b465323ea0/687474703a2f2f646576656c6f70776561722e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031342f30352f6361726f7573656c312e706e67" alt=""></p>
<ul>
<li>不是很灵活，不支持无限滚动</li>
</ul>
<h3 id="3d旋转木马效果"><a href="#3d旋转木马效果" class="headerlink" title="3d旋转木马效果"></a>3d旋转木马效果</h3><p>以下三个3d旋转木马效果，都来自于这篇文章<a href="http://www.codeproject.com/Articles/146145/Android-D-Carousel" target="_blank" rel="external">Android 3D Carousel</a>,分别是不同的实现</p>
<h4 id="carousel-android-star31"><a href="#carousel-android-star31" class="headerlink" title="carousel-android:star31"></a><a href="https://github.com/ludovicroland/carousel-android" target="_blank" rel="external">carousel-android</a>:star31</h4><p><img src="https://camo.githubusercontent.com/ad7578f22aeef2180975a57c2ce291d8d22d7ec3/68747470733a2f2f7261772e6769746875622e636f6d2f6c75646f766963726f6c616e642f6361726f7573656c2d616e64726f69642f6d61737465722f73637265656e73686f74312e706e67" alt=""></p>
<p><strong>缺点</strong></p>
<ul>
<li>在Fragment中使用会出现问题。</li>
</ul>
<h4 id="Android-3D-Carousel-star4"><a href="#Android-3D-Carousel-star4" class="headerlink" title="Android-3D-Carousel:star4"></a><a href="https://github.com/panhuachao/Android-3D-Carousel#android-3d-carousel" target="_blank" rel="external">Android-3D-Carousel</a>:star4</h4><p><img src="https://github.com/panhuachao/Android-3D-Carousel/raw/master/round.gif" alt=""><br><strong>优点</strong></p>
<ul>
<li>增加了垂直滚动模式，尚未测试</li>
</ul>
<h4 id="CarrouselView-star22-中文版"><a href="#CarrouselView-star22-中文版" class="headerlink" title="CarrouselView:star22 中文版"></a><a href="https://github.com/dalong982242260/CarrouselView" target="_blank" rel="external">CarrouselView</a>:star22 中文版</h4><p><img src="https://github.com/dalong982242260/CarrouselView/raw/master/screenshot/carouselview.gif" alt=""></p>
<p><strong>优点</strong></p>
<ul>
<li>中文版，效果最佳</li>
<li>布局可以随意自定义，不受只是图片的限制。 </li>
<li>2、增加点击切换到中间位置。 </li>
<li>3、手势滑动切换。 </li>
<li>4、切换中间回调。 </li>
<li>5、自定义适配器更加方便用户设置自己需要的布局。</li>
</ul>
<h3 id="GlFancyCoverFlow-电影海报轮播图"><a href="#GlFancyCoverFlow-电影海报轮播图" class="headerlink" title="GlFancyCoverFlow:电影海报轮播图"></a><a href="https://github.com/LittleLiByte/GlFancyCoverFlow" target="_blank" rel="external">GlFancyCoverFlow</a>:电影海报轮播图</h3><p><img src="https://github.com/LittleLiByte/GlFancyCoverFlow/raw/master/GlFancyCoverFlow/res/raw/ScreenShots/device-2014-10-15-141029.png" alt=""></p>
<ul>
<li>借鉴自<a href="https://github.com/davidschreiber/FancyCoverFlow" target="_blank" rel="external">FancyCoverFlow</a></li>
<li>增加了无限滚动，更适合海报等效果</li>
<li>但是继承自GalleryView，这个类已经被google放弃了，有内存溢出的风险</li>
</ul>
<h2 id="特殊ui"><a href="#特殊ui" class="headerlink" title="特殊ui"></a>特殊ui</h2><h3 id="ExpandableLayout-控件收缩"><a href="#ExpandableLayout-控件收缩" class="headerlink" title="ExpandableLayout:控件收缩"></a><a href="https://github.com/traex/ExpandableLayout" target="_blank" rel="external">ExpandableLayout</a>:控件收缩</h3><p><img src="https://github.com/traex/ExpandableLayout/raw/master/demo.gif" alt=""></p>
<ul>
<li>目前正在使用，可以自己修改源码。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一部分：工具库&quot;&gt;&lt;a href=&quot;#第一部分：工具库&quot; class=&quot;headerlink&quot; title=&quot;第一部分：工具库&quot;&gt;&lt;/a&gt;第一部分：工具库&lt;/h1&gt;&lt;h2 id=&quot;依赖注入库&quot;&gt;&lt;a href=&quot;#依赖注入库&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android最佳实践" scheme="http://hammercui.github.io/tags/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>android基础：构建神器gradle</title>
    <link href="http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9A%E6%9E%84%E5%BB%BA%E7%A5%9E%E5%99%A8gradle/"/>
    <id>http://hammercui.github.io/post/android基础：构建神器gradle/</id>
    <published>2016-05-03T06:43:19.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是gradle"><a href="#什么是gradle" class="headerlink" title="什么是gradle"></a>什么是gradle</h1><p>项目自动化构建工具，用以取代xml的繁琐配置，目前大量用于android开发。<br>作用提现在以下两点</p>
<ul>
<li>首先Gradle需要找到你工程需要的东西，这些东西就是所谓的“依赖”。</li>
<li>另外Gradle需要构建和上传你工程的产出，这就是所谓的发行。</li>
</ul>
<h1 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h1><ul>
<li>了解Groovy基本语法</li>
</ul>
<p>Gradle基于Groovy语言，Groovy语法的学习，推荐官方文章Differences with Java和IBM developerWorks的<a href="http://www.ibm.com/developerworks/cn/education/java/j-groovy/j-groovy.html" target="_blank" rel="external">精通Groovy</a></p>
<ul>
<li>粗读Gradle User Guide和Gradle Plugin User Guide</li>
</ul>
<h1 id="gradle概念"><a href="#gradle概念" class="headerlink" title="gradle概念"></a>gradle概念</h1><h1 id="gradle构建android工程"><a href="#gradle构建android工程" class="headerlink" title="gradle构建android工程"></a>gradle构建android工程</h1><h1 id="如何解决重复依赖"><a href="#如何解决重复依赖" class="headerlink" title="如何解决重复依赖"></a>如何解决重复依赖</h1><h2 id="如何发现"><a href="#如何发现" class="headerlink" title="如何发现"></a>如何发现</h2><ul>
<li>方法1</li>
</ul>
<p><code>windows</code>环境下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">命令行执行</div><div class="line">gradlew -q dependencies module名称:dependencies --configuration compile</div></pre></td></tr></table></figure></p>
<p><code>mac os</code>环境下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">命令行执行</div><div class="line">gradle -q dependencies yourProject:dependencies --configuration compile</div></pre></td></tr></table></figure></p>
<ul>
<li>方法2</li>
</ul>
<p>下载gradle view插件</p>
<h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>在重复引用的依赖里，去除对引入的其他依赖</p>
<p>eg:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">compile(&apos;org.hibernate:hibernate:3.1&apos;) &#123;</div><div class="line">//excluding a particular transitive dependency:</div><div class="line">exclude module: &apos;cglib&apos; //by artifact name</div><div class="line">exclude group: &apos;org.jmock&apos; //by group</div><div class="line">exclude group: &apos;org.unwanted&apos;, module: &apos;iAmBuggy&apos; //by both name and group </div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是，当我们依赖本地module时，<br>eg:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line"> 	compile fileTree(dir: &apos;libs&apos;, include: &apos;*.jar&apos;)</div><div class="line">    compile &apos;com.android.support:support-v4:23.3.0&apos;</div><div class="line">	···</div><div class="line">		</div><div class="line"></div><div class="line">	···</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://www.csdn.net/article/2015-08-10/2825420" target="_blank" rel="external">Android项目中如何用好构建神器Gradle？</a></p>
<p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/Android_Studio/2015/0129/2375.html" target="_blank" rel="external">Gradle之依赖管理</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是gradle&quot;&gt;&lt;a href=&quot;#什么是gradle&quot; class=&quot;headerlink&quot; title=&quot;什么是gradle&quot;&gt;&lt;/a&gt;什么是gradle&lt;/h1&gt;&lt;p&gt;项目自动化构建工具，用以取代xml的繁琐配置，目前大量用于android开发。&lt;br
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android" scheme="http://hammercui.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>nodejs学习：2 redis的安装与使用</title>
    <link href="http://hammercui.github.io/post/nodejs%E5%AD%A6%E4%B9%A0%EF%BC%9A2-redis%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://hammercui.github.io/post/nodejs学习：2-redis的安装与使用/</id>
    <published>2016-04-09T08:57:23.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="nodejs" scheme="http://hammercui.github.io/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://hammercui.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>nodejs学习：1 express的安装与使用</title>
    <link href="http://hammercui.github.io/post/nodejs%E5%AD%A6%E4%B9%A0%EF%BC%9A1-express%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://hammercui.github.io/post/nodejs学习：1-express的安装与使用/</id>
    <published>2016-04-09T07:07:11.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nodejs简介"><a href="#nodejs简介" class="headerlink" title="nodejs简介"></a>nodejs简介</h1><ul>
<li><p>nodejs能提供静态文件服务</p>
<ul>
<li>网页</li>
<li>纯文本</li>
<li>图片</li>
<li>前端JavaScript代码</li>
<li>css样式表文件</li>
<li>媒体文件</li>
<li>字体文件</li>
</ul>
</li>
<li><p>nodejs能提供http服务</p>
<ul>
<li>api接口</li>
<li>中间件</li>
</ul>
</li>
<li><p>nodejs能提供tcp(socket)服务</p>
</li>
</ul>
<h1 id="安装及启动"><a href="#安装及启动" class="headerlink" title="安装及启动"></a>安装及启动</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1 安装node软件<br>2 安装express生成模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g express-generator</div></pre></td></tr></table></figure></p>
<p>3 安装express<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g express</div></pre></td></tr></table></figure></p>
<p>4 安装nodemon调试模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g nodemon</div></pre></td></tr></table></figure></p>
<p>5 使用模板创建nodejs工程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">express [工程名]</div></pre></td></tr></table></figure></p>
<p>然后执行<code>npm install</code>安装第三方模块。</p>
<p>创建工程后出现如下目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+bin</div><div class="line"> -www  //执行脚本</div><div class="line">+public </div><div class="line">+routes </div><div class="line">+view     //静态页面</div><div class="line">-app.js   //创建express实例</div><div class="line">-package.json</div></pre></td></tr></table></figure></p>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure>
<h1 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h1><h2 id="使用express的静态文件服务"><a href="#使用express的静态文件服务" class="headerlink" title="使用express的静态文件服务"></a>使用express的静态文件服务</h2><p>使用express的静态服务的中间件，直接使用<br>use方法使用中间件<br>public目录当做我们的静态文件目录<br>/直接使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</div></pre></td></tr></table></figure>
<h2 id="使用express的路由"><a href="#使用express的路由" class="headerlink" title="使用express的路由"></a>使用express的路由</h2><ul>
<li>将不同的请求。分配给响应的函数</li>
<li>区分：路径，请求方法</li>
</ul>
<p>三种方法：</p>
<ul>
<li>path方式 直接get</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.get(&apos;/login&apos;,function()&#123;</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>Router方式</li>
</ul>
<p>比如一组路由，都是post下面的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var Router = express.Router();</div><div class="line">Router.get(&apos;/add&apos;,function(req,res)&#123;</div><div class="line">&#125;)</div><div class="line">Router.get(&apos;/list&apos;,function(req,res)&#123;</div><div class="line">&#125;)</div><div class="line">app.user(&apos;post&apos;,Router);</div></pre></td></tr></table></figure>
<ul>
<li>route方式</li>
</ul>
<p>针对一个路由，编写不同方法的不同处理。<br>不如针对以上路由的get请求方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.route(&apos;article&apos;).get(function(req,response)</div><div class="line">&#123;</div><div class="line">&#125;).post(function(req,response))</div></pre></td></tr></table></figure>
<h3 id="带参数路由"><a href="#带参数路由" class="headerlink" title="带参数路由"></a>带参数路由</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app.param(&apos;newsId&apos;,function(req,res,next,newsId)&#123;</div><div class="line">req.nresId = newsId;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(&apos;/news/:newsId,function(req,response)&#123;</div><div class="line">req.end(&apos;newsId:&apos;+req.newsId)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nodejs简介&quot;&gt;&lt;a href=&quot;#nodejs简介&quot; class=&quot;headerlink&quot; title=&quot;nodejs简介&quot;&gt;&lt;/a&gt;nodejs简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;nodejs能提供静态文件服务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网页&lt;/li&gt;

    
    </summary>
    
      <category term="nodejs" scheme="http://hammercui.github.io/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="http://hammercui.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>android基础：常见问题集锦</title>
    <link href="http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/"/>
    <id>http://hammercui.github.io/post/android基础：常见问题集锦/</id>
    <published>2016-04-05T10:20:01.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="v-21-ripple配合selector，state-enabled不起作用"><a href="#v-21-ripple配合selector，state-enabled不起作用" class="headerlink" title="v-21 ripple配合selector，state_enabled不起作用"></a>v-21 ripple配合selector，state_enabled不起作用</h1><p>ripple是android L之后新增的水波纹特效，当我们的按钮增加了特效后，state_enabled=false，让按钮置为灰色，不起作用了下面贴出代码</p>
<p>drawable <code>btn_green.xml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;</div><div class="line">    &lt;item android:state_pressed=&quot;true&quot; android:drawable=&quot;@color/pressed&quot;&gt;&lt;/item&gt;</div><div class="line">    &lt;item android:state_enabled=&quot;false&quot; android:drawable=&quot;@color/dark_gray&quot;&gt;&lt;/item&gt;</div><div class="line">    &lt;item  android:drawable=&quot;@color/green&quot;/&gt;</div><div class="line">&lt;/selector&gt;</div></pre></td></tr></table></figure></p>
<p>drawable-21 <code>btn_green.xml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;ripple xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:color=&quot;@color/pressed&quot;&gt;</div><div class="line">    &lt;item&gt;</div><div class="line">        &lt;selector &gt;</div><div class="line">            &lt;item android:state_enabled=&quot;true&quot; android:drawable=&quot;@color/green&quot;&gt;&lt;/item&gt;</div><div class="line">            &lt;item android:state_enabled=&quot;false&quot; android:drawable=&quot;@color/dark_gray&quot;&gt;&lt;/item&gt;</div><div class="line">        &lt;/selector&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line">&lt;/ripple&gt;</div></pre></td></tr></table></figure></p>
<p>也就是说在新版的selector里面，没有默认状态，我们必须手动填写<code>android:state_enabled=&quot;true&quot;</code></p>
<h1 id="Activity-has-leaked-window-that-was-originally-added"><a href="#Activity-has-leaked-window-that-was-originally-added" class="headerlink" title="Activity has leaked window that was originally added"></a>Activity has leaked window that was originally added</h1><p>报错但并不crash</p>
<p>原因：</p>
<p>因为使用了Dialog，但是未在activity销毁时，调用dismiss（）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;v-21-ripple配合selector，state-enabled不起作用&quot;&gt;&lt;a href=&quot;#v-21-ripple配合selector，state-enabled不起作用&quot; class=&quot;headerlink&quot; title=&quot;v-21 ripple配合s
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android" scheme="http://hammercui.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>react基础：react0.14.7+webpack开发生产环境的区别</title>
    <link href="http://hammercui.github.io/post/react%E5%9F%BA%E7%A1%80%EF%BC%9Areact-webpack%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA2%EF%BC%9A%E5%BC%80%E5%8F%91%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://hammercui.github.io/post/react基础：react-webpack快速搭建2：开发生产环境的搭建/</id>
    <published>2016-04-04T10:31:54.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为在开发环境使用了webpack的动态加载，所以在正式部署的生产环境，配置文件要做相应的调整。</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><blockquote>
<p>首先贴出我的文件目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">+ 工程名</div><div class="line">  + app        //开发文件目录</div><div class="line">     - mian.js //js入口</div><div class="line">  + build      //生产环境打包地址</div><div class="line">     - build.js //打包之后的文件</div><div class="line">     - index.html</div><div class="line">  + dev         //开发环境打包地址</div><div class="line">     - dev.js  //打包之后的文件</div><div class="line">     - index.html </div><div class="line">  + webpack.config.js   //开发配置文件</div><div class="line">  + webpack.config.prod.js  //生产配置文件</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="packkage-json文件"><a href="#packkage-json文件" class="headerlink" title="packkage.json文件"></a>packkage.json文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;7pluszhifu&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;7+的付费工程&quot;,</div><div class="line">  &quot;main&quot;: &quot;./index.js&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;build&quot;: &quot;webpack --config webpack.config.prod.js -p --content-base build&quot;,</div><div class="line">    &quot;dev&quot;: &quot;webpack-dev-server --devtool eval --progress --colors --hot --content-base dev&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;author&quot;: &quot;hammercui&quot;,</div><div class="line">  &quot;license&quot;: &quot;ISC&quot;,</div><div class="line"></div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;babel-runtime&quot;: &quot;^6.5.0&quot;,</div><div class="line">    &quot;react&quot;: &quot;^0.14.7&quot;,</div><div class="line">    &quot;react-dom&quot;: &quot;^0.14.7&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;amazeui-react&quot;: &quot;^1.0.1&quot;,</div><div class="line">    &quot;babel-core&quot;: &quot;^6.7.4&quot;,</div><div class="line">    &quot;babel-loader&quot;: &quot;^6.2.4&quot;,</div><div class="line">    &quot;babel-preset-es2015&quot;: &quot;^6.6.0&quot;,</div><div class="line">    &quot;babel-preset-react&quot;: &quot;^6.5.0&quot;,</div><div class="line">    &quot;css-loader&quot;: &quot;^0.23.1&quot;,</div><div class="line">    &quot;material-ui&quot;: &quot;^0.15.0-alpha.2&quot;,</div><div class="line">    &quot;react&quot;: &quot;^0.14.7&quot;,</div><div class="line">    &quot;react-dom&quot;: &quot;^0.14.7&quot;,</div><div class="line">    &quot;react-hot-loader&quot;: &quot;^1.3.0&quot;,</div><div class="line">    &quot;react-tap-event-plugin&quot;: &quot;^0.2.2&quot;,</div><div class="line">    &quot;style-loader&quot;: &quot;^0.13.1&quot;,</div><div class="line">    &quot;url-loader&quot;: &quot;^0.5.7&quot;,</div><div class="line">    &quot;webpack&quot;: &quot;^1.12.14&quot;,</div><div class="line">    &quot;webpack-dev-server&quot;: &quot;^1.14.1&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="开发环境配置文件webpack-config-js"><a href="#开发环境配置文件webpack-config-js" class="headerlink" title="开发环境配置文件webpack.config.js"></a>开发环境配置文件webpack.config.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by hammer on 2016/3/26.</div><div class="line"> * 配置的打包文件</div><div class="line"> */</div><div class="line">var webpack = require(&apos;webpack&apos;);</div><div class="line">var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&apos;common&apos;,&apos;common.js&apos;);</div><div class="line">var path = require(&apos;path&apos;);</div><div class="line"></div><div class="line">var node_modules = path.resolve(__dirname, &apos;node_modules&apos;);</div><div class="line">var pathToReact = path.resolve(node_modules, &apos;react/dist/react.min.js&apos;);</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">    //插件项</div><div class="line">    plugins: [</div><div class="line">        //commonsPlugin,</div><div class="line">        new webpack.NoErrorsPlugin()</div><div class="line">    ],</div><div class="line">    //页面入口文件配置</div><div class="line">    //entry: &#123;mian : &apos;./app/main.js&apos;&#125;,</div><div class="line">    entry:[</div><div class="line">        &apos;webpack/hot/dev-server&apos;,</div><div class="line">        path.resolve(__dirname,&apos;app/main.js&apos;)</div><div class="line">    ],</div><div class="line"></div><div class="line">    //入口文件输出配置</div><div class="line">    //output: &#123;path: __dirname+&apos;_build_&apos;, filename: &apos;[name].js&apos;&#125;</div><div class="line">    output:&#123;</div><div class="line">        path: path.resolve(__dirname,&apos;dev&apos;),</div><div class="line">        filename: &apos;dev.js&apos;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    devServer: &#123;</div><div class="line">        inline: true,</div><div class="line">        port: 7777</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    module: &#123;</div><div class="line">        //加载器配置</div><div class="line">        loaders: [</div><div class="line">            //LESS文件先通过less-load处理成css，然后再通过css-loader加载成css模块，最后由style-loader加载器对其做最后的处理，</div><div class="line">            // 从而运行时可以通过style标签将其应用到最终的浏览器环境</div><div class="line">            &#123;test: /\.less/, loader: &apos;style-loader!css-loader!less-loader&apos;&#125;,</div><div class="line">            //.css 文件使用 style-loader 和 css-loader 来处理</div><div class="line">            &#123; test: /\.css$/, loader: &apos;style-loader!css-loader&apos; &#125;,</div><div class="line">            //.js 文件使用 jsx-loader 来编译处理 jsx-loader可以添加?harmony参数使其支持ES6语法</div><div class="line">            &#123; test: /\.js$/,</div><div class="line">                exclude: /node_modules/,</div><div class="line">                loader: &apos;babel&apos;,</div><div class="line">                query:&#123;</div><div class="line">                    presets:[&apos;es2015&apos;,&apos;react&apos;]</div><div class="line">                &#125; //备注：es2015用于支持ES6语法，react用于解决render()报错的问题</div><div class="line">            &#125;,</div><div class="line">            //.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理</div><div class="line">            &#123; test: /\.scss$/, loader: &apos;style!css!sass?sourceMap&apos;&#125;,</div><div class="line">            //图片文件使用 url-loader 来处理，小于8kb的直接转为base64</div><div class="line">            &#123; test: /\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos;&#125;</div><div class="line">        ],</div><div class="line">        noParse: [pathToReact]</div><div class="line">    &#125;,</div><div class="line">    //其它解决方案配置</div><div class="line">    resolve: &#123;</div><div class="line">        //查找module的话从这里开始查找</div><div class="line">        //root: &apos;E:/github/flux-example/app&apos;, //绝对路径</div><div class="line">        //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</div><div class="line">        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.json&apos;, &apos;.scss&apos;],</div><div class="line">        //模块别名定义，方便后续直接引用别名，无须多写长长的地址</div><div class="line">        alias: &#123;</div><div class="line">            AppStore : &apos;js/stores/AppStores.js&apos;,</div><div class="line">            ActionType : &apos;js/actions/ActionType.js&apos;,</div><div class="line">            AppAction : &apos;js/actions/AppAction.js&apos;,</div><div class="line">            //&apos;react&apos;: pathToReact,</div><div class="line">           // &apos;react-dom&apos;:pathToReactDom,</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="生产环境配置文件webpack-config-prod-js"><a href="#生产环境配置文件webpack-config-prod-js" class="headerlink" title="生产环境配置文件webpack.config.prod.js"></a>生产环境配置文件webpack.config.prod.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by hammer on 2016/4/4.</div><div class="line"> * 生产环境配置文件</div><div class="line"> */</div><div class="line">var webpack = require(&apos;webpack&apos;);</div><div class="line">var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&apos;common&apos;,&apos;common.js&apos;);</div><div class="line">var path = require(&apos;path&apos;);</div><div class="line"></div><div class="line">var node_modules = path.resolve(__dirname, &apos;node_modules&apos;);</div><div class="line">var pathToReact = path.resolve(node_modules, &apos;react/dist/react.min.js&apos;);</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">    //插件项</div><div class="line">    plugins: [</div><div class="line">        //commonsPlugin,</div><div class="line">        new webpack.NoErrorsPlugin()</div><div class="line">    ],</div><div class="line">    //页面入口文件配置</div><div class="line">    //entry: &#123;mian : &apos;./app/main.js&apos;&#125;,</div><div class="line">    entry:[</div><div class="line">        path.resolve(__dirname,&apos;app/main.js&apos;)</div><div class="line">    ],</div><div class="line"></div><div class="line">    //入口文件输出配置</div><div class="line">    //output: &#123;path: __dirname+&apos;_build_&apos;, filename: &apos;[name].js&apos;&#125;</div><div class="line">    output:&#123;</div><div class="line">        path: path.resolve(__dirname,&apos;build&apos;),</div><div class="line">        filename: &apos;build.js&apos;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    module: &#123;</div><div class="line">        //加载器配置</div><div class="line">        loaders: [</div><div class="line">            //LESS文件先通过less-load处理成css，然后再通过css-loader加载成css模块，最后由style-loader加载器对其做最后的处理，</div><div class="line">            // 从而运行时可以通过style标签将其应用到最终的浏览器环境</div><div class="line">            &#123;test: /\.less/, loader: &apos;style-loader!css-loader!less-loader&apos;&#125;,</div><div class="line">            //.css 文件使用 style-loader 和 css-loader 来处理</div><div class="line">            &#123; test: /\.css$/, loader: &apos;style-loader!css-loader&apos; &#125;,</div><div class="line">            //.js 文件使用 jsx-loader 来编译处理 jsx-loader可以添加?harmony参数使其支持ES6语法</div><div class="line">            &#123; test: /\.js$/,</div><div class="line">                exclude: /node_modules/,</div><div class="line">                loader: &apos;babel&apos;,</div><div class="line">                query:&#123;</div><div class="line">                    presets:[&apos;es2015&apos;,&apos;react&apos;]</div><div class="line">                &#125; //备注：es2015用于支持ES6语法，react用于解决render()报错的问题</div><div class="line">            &#125;,</div><div class="line">            //.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理</div><div class="line">            &#123; test: /\.scss$/, loader: &apos;style!css!sass?sourceMap&apos;&#125;,</div><div class="line">            //图片文件使用 url-loader 来处理，小于8kb的直接转为base64</div><div class="line">            &#123; test: /\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos;&#125;</div><div class="line">        ],</div><div class="line">        noParse: [pathToReact]</div><div class="line">    &#125;,</div><div class="line">    //其它解决方案配置</div><div class="line">    resolve: &#123;</div><div class="line">        //查找module的话从这里开始查找</div><div class="line">        //root: &apos;E:/github/flux-example/app&apos;, //绝对路径</div><div class="line">        //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</div><div class="line">        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.json&apos;, &apos;.scss&apos;],</div><div class="line">        //模块别名定义，方便后续直接引用别名，无须多写长长的地址</div><div class="line">        alias: &#123;</div><div class="line">            AppStore : &apos;js/stores/AppStores.js&apos;,</div><div class="line">            ActionType : &apos;js/actions/ActionType.js&apos;,</div><div class="line">            AppAction : &apos;js/actions/AppAction.js&apos;,</div><div class="line">            //&apos;react&apos;: pathToReact,</div><div class="line">            // &apos;react-dom&apos;:pathToReactDom,</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="打包生成js文件"><a href="#打包生成js文件" class="headerlink" title="打包生成js文件"></a>打包生成js文件</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>执行<code>npm run dev</code><br>然后浏览器输入<code>http：//localhost：7777/</code></p>
<h2 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h2><p>执行<code>npm run build</code>，会在build目录生成<code>build.js</code>文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因为在开发环境使用了webpack的动态加载，所以在正式部署的生产环境，配置文件要做相应的调整。&lt;/p&gt;
&lt;h1 id=&quot;目录&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="react" scheme="http://hammercui.github.io/categories/react/"/>
    
    
      <category term="react" scheme="http://hammercui.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>android最佳实践6：android studio使用</title>
    <link href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B56%EF%BC%9Aandroid-studio%E4%BD%BF%E7%94%A8/"/>
    <id>http://hammercui.github.io/post/android最佳实践6：android-studio使用/</id>
    <published>2016-04-01T06:21:45.000Z</published>
    <updated>2016-11-18T08:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>android studio版本号：2.1.5 preview<br>jdk 1.8<br>sdk: 6.0</p>
</blockquote>
<h1 id="开启-instant-run支持"><a href="#开启-instant-run支持" class="headerlink" title="开启 instant run支持"></a>开启 instant run支持</h1><p>这个类似于swift的热加载，大大改善开发效率<br>setting-&gt;Build,Execution,Deployment -&gt;Instant Run<br><img src="http://7xrf0l.com1.z0.glb.clouddn.com/16-4-1/12490656.jpg" alt=""></p>
<h1 id="开启java8的支持"><a href="#开启java8的支持" class="headerlink" title="开启java8的支持"></a>开启java8的支持</h1><p>android studio从2.1开启改善了对java8的支持，好开森，可以放弃gradle-retrolambda了<br>re<br>参考地址在 <a href="http://luckymin.com/2016/03/16/2016031610_%E5%9C%A8AndroidStudio%E4%B8%AD%E6%94%AF%E6%8C%81Java8/" target="_blank" rel="external">Android Studio 中支持 Java 8</a></p>
<p>app.gradle文件增加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">android&#123;</div><div class="line">···</div><div class="line">	defaultConfig &#123;</div><div class="line">    ...</div><div class="line">	//要想使用java8，必须使用jack编译</div><div class="line">    jackOptions &#123;</div><div class="line">      enabled true</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    compileOptions &#123;</div><div class="line">        sourceCompatibility JavaVersion.VERSION_1_8</div><div class="line">        targetCompatibility JavaVersion.VERSION_1_8</div><div class="line">    &#125;</div><div class="line"></div><div class="line">···</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外别忘了下载并修改buildTollersion 24.0.rc2</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>现阶段<br> <code>com.android.tools.build:gradle:2.1.0-alpha</code><br> <code>buildToolsVersion &quot;24rc2&quot;</code><br>build gradle时还是比较卡的，不推荐尝鲜，我尝试了一下又换回<br>gradle-retrolambda了</p>
<h1 id="支持instant和不支持instant的地方"><a href="#支持instant和不支持instant的地方" class="headerlink" title="支持instant和不支持instant的地方"></a>支持instant和不支持instant的地方</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;android studio版本号：2.1.5 preview&lt;br&gt;jdk 1.8&lt;br&gt;sdk: 6.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;开启-instant-run支持&quot;&gt;&lt;a href=&quot;#开启-instant-run支
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android最佳实践" scheme="http://hammercui.github.io/tags/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
</feed>
