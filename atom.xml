<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hammer崔的程序世界</title>
  <subtitle>我的生涯一片无悔，我想起那个午夜在灯泡下的抠代码，那是我逝去的青春！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hammercui.github.io/"/>
  <updated>2016-09-14T06:53:44.000Z</updated>
  <id>http://hammercui.github.io/</id>
  
  <author>
    <name>hammercui</name>
    <email>hammercui@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python学习笔记：6 tornado</title>
    <link href="http://hammercui.github.io/post/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A6-tornado/"/>
    <id>http://hammercui.github.io/post/python学习笔记：6-tornado/</id>
    <published>2016-09-13T08:21:54.000Z</published>
    <updated>2016-09-14T06:53:44.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;tornad是Facebook开源的非阻塞式web框架，类似于nodejs，主要是为了解决frendfeed的实时更新。因此相应速度非常高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;win10环境：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install tornado&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;mongodb数据库：&lt;a href=&quot;https://www.mongodb.com/download-center?jmp=nav#community&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网下载地址&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;数据库请求&quot;&gt;&lt;a href=&quot;#数据库请求&quot; class=&quot;headerlink&quot; title=&quot;数据库请求&quot;&gt;&lt;/a&gt;数据库请求&lt;/h1&gt;&lt;h2 id=&quot;Mysql&quot;&gt;&lt;a href=&quot;#Mysql&quot; class=&quot;headerlink&quot; title=&quot;Mysql&quot;&gt;&lt;/a&gt;Mysql&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Tornado-MySQL&lt;/code&gt;，是对PyMySQL的异步化的一个库,测试用例,文档,都比较齐全，目前在使用的版本。&lt;/p&gt;
&lt;h1 id=&quot;异步web请求&quot;&gt;&lt;a href=&quot;#异步web请求&quot; class=&quot;headerlink&quot; title=&quot;异步web请求&quot;&gt;&lt;/a&gt;异步web请求&lt;/h1&gt;&lt;p&gt;使用异步装饰器，实现异步功能&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class TestAsynchr2(tornado.web.RequestHandler):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @tornado.web.asynchronous&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @tornado.gen.engine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def get(self, *args, **kwargs):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        client = tornado.httpclient.AsyncHTTPClient();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        response = yield tornado.gen.Task(client.fetch,test_url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        body = json.loads(response.body)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print &amp;apos;异步请求2 %s&amp;apos; % body&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print body[&amp;apos;errNum&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.write(&amp;apos;异步请求2 %s&amp;apos; % response.body)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.finish()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;重点是yield，以及&lt;code&gt;self.finish()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;asyncmongo&lt;/code&gt;,来异步的调用mongoDB服务器。它是专门给Tornado开发者开发提供异步数据库访问的&lt;/p&gt;
&lt;h1 id=&quot;使用tornado进行长轮询&quot;&gt;&lt;a href=&quot;#使用tornado进行长轮询&quot; class=&quot;headerlink&quot; title=&quot;使用tornado进行长轮询&quot;&gt;&lt;/a&gt;使用tornado进行长轮询&lt;/h1&gt;&lt;p&gt;传统的方案是浏览器js进行定时http轮训，但是对服务器压力太大了。&lt;br&gt;新的技术是让浏览器发起连接来模拟服务器推送更新。这种方式的HTTP连接被称为长轮询或Comet请求。意味着浏览器只需启动一个http请求，其连接的服务器会有意保持开启，浏览器只需要等待更新可用时服务器”推送”响应。当服务器发送响应并关闭连接后，（或者浏览器端客户请求超时），客户端只需打开一个新的连接并等待下一个更新。&lt;/p&gt;
&lt;p&gt;好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少web服务器负载&lt;/li&gt;
&lt;li&gt;浏览器兼容性，只要支持ajax即可&lt;/li&gt;
&lt;li&gt;比如状态更新，消息通知，聊天消息，Twitter显示通知，Facebook的聊天&lt;/li&gt;
&lt;li&gt;跟websockets的实现方式不同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;常见问题&quot;&gt;&lt;a href=&quot;#常见问题&quot; class=&quot;headerlink&quot; title=&quot;常见问题&quot;&gt;&lt;/a&gt;常见问题&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;修改mysql默认字符集&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最简单的方法：修改mysql的&lt;code&gt;my.ini&lt;/code&gt;配置文件.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;default-character-set = utf8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;character_set_server = utf8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;python2.7查询mysql的中文乱码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解决方法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;reload(sys)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys.setdefaultencoding(&amp;apos;utf-8&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; conn = yield tornado_mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.connect(host=&amp;apos;127.0.0.1&amp;apos;, port=3306, user=&amp;apos;root&amp;apos;, passwd=&amp;apos;&amp;apos;, db=&amp;apos;test&amp;apos;,charset=&amp;apos;utf8&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然后&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print value.decode(&amp;apos;utf-8&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果是插入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;则是value = unicode(&amp;apos;你好&amp;apos;，’utf-8&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;tornad是Facebook开源的非阻塞式web框架，类似于nodejs，主要是为了解决frendfeed的实时更新。因此相应速度非常高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;he
    
    </summary>
    
      <category term="python" scheme="http://hammercui.github.io/categories/python/"/>
    
    
      <category term="python基础" scheme="http://hammercui.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>数据库进阶：1 win10环境mongoDB部署</title>
    <link href="http://hammercui.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E9%98%B6%EF%BC%9AmongoDB/"/>
    <id>http://hammercui.github.io/post/数据库进阶：mongoDB/</id>
    <published>2016-09-13T03:55:08.000Z</published>
    <updated>2016-09-13T10:02:36.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;win10环境部署&quot;&gt;&lt;a href=&quot;#win10环境部署&quot; class=&quot;headerlink&quot; title=&quot;win10环境部署&quot;&gt;&lt;/a&gt;win10环境部署&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;下载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下载地址&lt;a href=&quot;https://www.mongodb.com/download-center#community&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;&lt;br&gt;选择如图：&lt;br&gt;&lt;img src=&quot;http://7xrf0l.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160913115644.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;安装过程，选择&amp;gt;&amp;gt;&lt;strong&gt;custom&lt;/strong&gt;，这个是免费版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境变量&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把安装之后的&lt;code&gt;F:\App\mongoDb3.2.9\bin&lt;/code&gt;添加到环境变量&lt;code&gt;Path&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;f盘根目录新建&lt;code&gt;mongodb\data&lt;/code&gt;目录，’mongodb\logs\db.log`文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;命令行启动数据库&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;管理员启动cmd，输入&lt;code&gt;mongod.exe --dbpath=f:\mongodb\data&lt;/code&gt;&lt;br&gt;显示&lt;img src=&quot;http://pic002.cnblogs.com/images/2012/335686/2012081615385166.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;说明启动成功&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器输入&lt;a href=&quot;http://localhost:27017/，会出现&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:27017/，会出现&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;It looks like you are trying to access MongoDB over HTTP on the native driver port.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;lunix环境将mongodb作为windows服务随机启动&lt;br&gt;cmd命令输入&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mongod.exe --dbpath f:\mongodb\db --logpath 、f:\mongodb\logs\db.log --install --serviceName mongodb --logappend --directoryperdb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动mongodb服务&lt;br&gt;cmd命令输入&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;net start mongodb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;配置文件形式启动数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;f:\mongodb\&lt;/code&gt;目录新建配置文件&lt;code&gt;mongodb.init&lt;/code&gt;,内容如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dbpath=F:\mongodb\data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;directoryperdb = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#日志&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logpath=F:\mongodb\logs\mongod.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#错误日志采用追加模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logappend=true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#启用日志模式，默认启用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;journal=true &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#这个选项可以过滤掉一些无用的日志信息，若需要调试使用，请设置为false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;quiet=true &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#cpu=true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#verbose = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 认证&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#autho =false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 管理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#reset = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 主节点配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;master = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 子节点配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#slave = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#source = 192.168.3.56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#only = xxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#端口号 默认27017&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;port=27017&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;f:\mongodb\&lt;/code&gt;目录新建启动文件&lt;code&gt;install.bat&lt;/code&gt;,启动服务的命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mongod -f f:\mongodb\config.ini --install --serviceName &amp;quot;mongodb&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对应的，新建&lt;code&gt;uninstall.bat&lt;/code&gt;,关闭服务的命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mongod --remove&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后执行&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;net start mongodb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h3&gt;&lt;p&gt;如果您的MongoDB服务总是无法启动，或启动后一直在反复重启，那么请检查data目录下是否存在一个名为“mongod.lock”的文件，如果存在就删除它，然后重启服务即可。这种情况通常是由于MongoDB服务没有正常关闭造成的，比如意外断电。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点&lt;/strong&gt;&lt;br&gt;通过实践，发现在&lt;code&gt;windows&lt;/code&gt;环境下表，使用&lt;code&gt;net start mongodb&lt;/code&gt;&lt;br&gt;启动非常不稳定，因此建议使用如下脚本命令，新建&lt;code&gt;start.bat&lt;/code&gt;文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;del f:\mongodb\data\mongod.lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mongod.exe --dbpath=f:\mongodb\data --logpath=f:\mongodb\logs\db.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后再启动一个dos,输入&lt;code&gt;mongo&lt;/code&gt;，进入操作界面&lt;/p&gt;
&lt;h1 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h1&gt;&lt;p&gt;创建数据库，不存在，创建，存在则切换&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user &amp;apos;dbname`&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看所有数据库&lt;br&gt;show dbs&lt;/p&gt;
&lt;p&gt;往student数据库插入一条数据，json形式&lt;br&gt;db.student.insert({“name”:”hammercui”})&lt;/p&gt;
&lt;p&gt;删除数据库，之前先切换到当前数据库&lt;br&gt;db.dropDatabase()&lt;/p&gt;
&lt;p&gt;集合删除&lt;br&gt;db.collection.drop()&lt;/p&gt;
&lt;p&gt;student数据库的socre集合插入一个数据/文档&lt;br&gt;db.score.insert({yuwen:100,shuxue:100,lishi:100})&lt;/p&gt;
&lt;p&gt;查询文档/数据&lt;br&gt;db.score.find()&lt;/p&gt;
&lt;p&gt;更新文档/数据&lt;br&gt;db.score.update({条件}，{新值})&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;win10环境部署&quot;&gt;&lt;a href=&quot;#win10环境部署&quot; class=&quot;headerlink&quot; title=&quot;win10环境部署&quot;&gt;&lt;/a&gt;win10环境部署&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;下载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下载地址&lt;a href=&quot;ht
    
    </summary>
    
      <category term="数据库" scheme="http://hammercui.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库 mongoDB" scheme="http://hammercui.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93-mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记：5 web开发</title>
    <link href="http://hammercui.github.io/post/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A5-web%E5%BC%80%E5%8F%91/"/>
    <id>http://hammercui.github.io/post/python学习笔记：5-web开发/</id>
    <published>2016-09-12T03:43:36.000Z</published>
    <updated>2016-09-12T07:03:46.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;wsgi&quot;&gt;&lt;a href=&quot;#wsgi&quot; class=&quot;headerlink&quot; title=&quot;wsgi&quot;&gt;&lt;/a&gt;wsgi&lt;/h2&gt;&lt;p&gt;wsgi是最基础的接口实现方式，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def application(environ, start_response):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start_response(&amp;apos;200 OK&amp;apos;, [(&amp;apos;Content-Type&amp;apos;, &amp;apos;text/html&amp;apos;)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;apos;&amp;lt;h1&amp;gt;Hello, web!&amp;lt;/h1&amp;gt;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的application()函数就是符合WSGI标准的一个HTTP处理函数，它接收两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;environ：一个包含所有HTTP请求信息的dict对象；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;start_response：一个发送HTTP响应的函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行wsgi服务器,&lt;code&gt;server.py&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# server.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 从wsgiref模块导入:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from wsgiref.simple_server import make_server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 导入我们自己编写的application函数:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from hello import application&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 创建一个服务器，IP地址为空，端口是8000，处理函数是application:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;httpd = make_server(&amp;apos;&amp;apos;, 8000, application)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print &amp;quot;Serving HTTP on port 8000...&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 开始监听HTTP请求:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;httpd.serve_forever()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是维护起来太蛋疼了，我们需要引入web服务框架&lt;/p&gt;
&lt;p&gt;有了Web框架，我们在编写Web应用时，注意力就从WSGI处理函数转移到URL+对应的处理函数，这样，编写Web App就更加简单了。&lt;/p&gt;
&lt;p&gt;Flask:精简型web框架&lt;/p&gt;
&lt;p&gt;Django：全能型Web框架；&lt;/p&gt;
&lt;p&gt;web.py：一个小巧的Web框架；&lt;/p&gt;
&lt;p&gt;Bottle：和Flask类似的Web框架；&lt;/p&gt;
&lt;p&gt;Tornado：Facebook的开源异步Web框架。&lt;/p&gt;
&lt;h2 id=&quot;模板&quot;&gt;&lt;a href=&quot;#模板&quot; class=&quot;headerlink&quot; title=&quot;模板&quot;&gt;&lt;/a&gt;模板&lt;/h2&gt;&lt;h2 id=&quot;协程&quot;&gt;&lt;a href=&quot;#协程&quot; class=&quot;headerlink&quot; title=&quot;协程&quot;&gt;&lt;/a&gt;协程&lt;/h2&gt;&lt;p&gt;跟c#的协程一样，一种子程序可以中断的机制。&lt;br&gt;协程的优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;协程跟多线程比，没有线程切换的开销，协程只有一个线程。&lt;/li&gt;
&lt;li&gt;其次，协程最大的优势是不需要多线程的锁机制。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以在多核CPU的逻辑是，多进程+协程。&lt;br&gt;Python对协程的支持还非常有限，用在generator中的yield可以一定程度上实现协程。虽然支持不完全，但已经可以发挥相当大的威力了。&lt;/p&gt;
&lt;p&gt;还记得我们学习生成器时（generator），使用的&lt;code&gt;yield&lt;/code&gt;关键字吗,&lt;strong&gt;如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下举例，利用协程实现，无锁状态下的生产者，消费者&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def consumer():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    r = &amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while True:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n = yield r&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if not n:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;apos;[CONSUMER] Consuming %s...&amp;apos; % n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time.sleep(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        r = &amp;apos;200 OK&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def produce(c):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c.next()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while n &amp;lt; 5:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n = n + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;apos;[PRODUCER] Producing %s...&amp;apos; % n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        r = c.send(n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&amp;apos;[PRODUCER] Consumer return: %s&amp;apos; % r)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if __name__==&amp;apos;__main__&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    c = consumer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    produce(c)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; gevent&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python通过yield提供了对协程的基本支持，但是不完全。而第三方的gevent为Python提供了比较完善的协程支持。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;wsgi&quot;&gt;&lt;a href=&quot;#wsgi&quot; class=&quot;headerlink&quot; title=&quot;wsgi&quot;&gt;&lt;/a&gt;wsgi&lt;/h2&gt;&lt;p&gt;wsgi是最基础的接口实现方式，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
    
    </summary>
    
      <category term="python" scheme="http://hammercui.github.io/categories/python/"/>
    
    
      <category term="python基础" scheme="http://hammercui.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记：4 常用模块</title>
    <link href="http://hammercui.github.io/post/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A4-%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    <id>http://hammercui.github.io/post/python学习笔记：4-常用模块/</id>
    <published>2016-09-09T07:06:36.000Z</published>
    <updated>2016-09-09T09:03:14.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;常用内建模块&quot;&gt;&lt;a href=&quot;#常用内建模块&quot; class=&quot;headerlink&quot; title=&quot;常用内建模块&quot;&gt;&lt;/a&gt;常用内建模块&lt;/h2&gt;&lt;h3 id=&quot;collections&quot;&gt;&lt;a href=&quot;#collections&quot; class=&quot;headerlink&quot; title=&quot;collections&quot;&gt;&lt;/a&gt;collections&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;namedtuple&lt;/strong&gt;&lt;br&gt;用来自定义tuple。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from collections import nametuple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Point = nametuple(&amp;apos;Point&amp;apos;,[&amp;apos;x&amp;apos;,&amp;apos;y&amp;apos;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = Point(1,2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pring p.x,p.y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;deque&lt;/strong&gt;&lt;br&gt;deque是为了高效实现插入和删除操作的双向列表，适合用于队列和栈&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from collections import deque&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;q = deque([&amp;apos;a&amp;apos;,&amp;apos;b&amp;apos;,&amp;apos;c&amp;apos;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.append(&amp;apos;xx)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;defaultdict&lt;/strong&gt;&lt;br&gt;使用dict时，如果引用的Key不存在，就会抛出KeyError。如果希望key不存在时，返回一个默认值，就可以用defaultdict&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OrderedDict&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果要保持Key的顺序，可以用OrderedDict：&lt;br&gt;注意，OrderedDict的Key会按照插入的顺序排列，不是Key本身排序：&lt;/p&gt;
&lt;h4 id=&quot;base64&quot;&gt;&lt;a href=&quot;#base64&quot; class=&quot;headerlink&quot; title=&quot;base64&quot;&gt;&lt;/a&gt;base64&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import base64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; base64.b64encode(&amp;apos;binary\x00string&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;YmluYXJ5AHN0cmluZw==&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; base64.b64decode(&amp;apos;YmluYXJ5AHN0cmluZw==&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;binary\x00string&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;hashlib&quot;&gt;&lt;a href=&quot;#hashlib&quot; class=&quot;headerlink&quot; title=&quot;hashlib&quot;&gt;&lt;/a&gt;hashlib&lt;/h4&gt;&lt;p&gt;Python的hashlib提供了常见的摘要算法，如MD5，SHA1等等。&lt;/p&gt;
&lt;p&gt;什么是摘要算法呢？摘要算法又称哈希算法、散列算法。它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用16进制的字符串表示）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;md5使用&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import hashlib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;md5 = hashlib.md5()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;md5.update(&amp;apos;how to use md5 in python hashlib?&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print md5.hexdigest()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sha1使用&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import hashlib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sha1 = hashlib.sha1()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sha1.update(&amp;apos;how to use sha1 in &amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sha1.update(&amp;apos;python hashlib?&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print sha1.hexdigest()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;常用第三方模块&quot;&gt;&lt;a href=&quot;#常用第三方模块&quot; class=&quot;headerlink&quot; title=&quot;常用第三方模块&quot;&gt;&lt;/a&gt;常用第三方模块&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用内建模块&quot;&gt;&lt;a href=&quot;#常用内建模块&quot; class=&quot;headerlink&quot; title=&quot;常用内建模块&quot;&gt;&lt;/a&gt;常用内建模块&lt;/h2&gt;&lt;h3 id=&quot;collections&quot;&gt;&lt;a href=&quot;#collections&quot; class=&quot;header
    
    </summary>
    
      <category term="python" scheme="http://hammercui.github.io/categories/python/"/>
    
    
      <category term="python基础" scheme="http://hammercui.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://hammercui.github.io/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://hammercui.github.io/post/正则表达式/</id>
    <published>2016-09-09T06:26:38.000Z</published>
    <updated>2016-09-09T06:57:42.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;正则表达式广泛用于前端，移动端，以及服务端，用来做字符串的规则校验，校验是否合法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;\d可以匹配一个数字，\w可以匹配一个字母或数字&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;00\d&amp;apos;可以匹配&amp;apos;007&amp;apos;，但无法匹配&amp;apos;00A&amp;apos;；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;\d\d\d&amp;apos;可以匹配&amp;apos;010&amp;apos;；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;匹配任意字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;表示任意个字符，包括0个，&lt;code&gt;+&lt;/code&gt;表示至少一个字符，&lt;code&gt;?&lt;/code&gt;表示0个或1个字符，&lt;code&gt;{n}&lt;/code&gt;表示n个字符，&lt;code&gt;{n-m}&lt;/code&gt;表示n-m个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt;表示范围&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[0-9a-zA-Z\_]可以匹配一个数字,字母或者下划线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如&amp;apos;a100&amp;apos;，&amp;apos;0_Z&amp;apos;，&amp;apos;Py3000&amp;apos;等等&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``` &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* `A|B`可以匹配A或B，所以`(P|p)ython`可以匹配`&amp;apos;Python&amp;apos;`或者`&amp;apos;python&amp;apos;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* ^表示行的开头，^\d表示必须以数字开头。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* $表示行的结束，\d$表示必须以数字结束。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## python中的使用&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;import re&lt;br&gt;if re.match(r’^\d{3}-\d{3,8}$’,’010-55’):&lt;br&gt;    print ‘ok’&lt;br&gt;else:&lt;br&gt;    print ‘not match’&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;无法识别连续的空格，用正则表达式试试：&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;re.split(r’\s+’, ‘a b   c’)&lt;br&gt;[‘a’, ‘b’, ‘c’]&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;无论多少个空格都可以正常分割。加入,试试&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;re.split(r’[\s\,]+’, ‘a,b, c  d’)&lt;br&gt;[‘a’, ‘b’, ‘c’, ‘d’]&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;再加入;试试：&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;re.split(r’[\s\,\;]+’, ‘a,b;; c  d’)&lt;br&gt;[‘a’, ‘b’, ‘c’, ‘d’]&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;**分组功能**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;加上（）用来做分组的拆分&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;m = re.match(r’^(\d{3})-(\d{3,8})$’, ‘010-12345’)&lt;br&gt;m.group(1)&lt;br&gt;‘010’&lt;br&gt;m.group(2)&lt;br&gt;‘12345’&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;**预编译**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;import re&lt;/p&gt;
&lt;h1 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; title=&quot;编译:&quot;&gt;&lt;/a&gt;编译:&lt;/h1&gt;&lt;p&gt; re_telephone = re.compile(r’^(\d{3})-(\d{3,8})$’)&lt;/p&gt;
&lt;h1 id=&quot;使用：&quot;&gt;&lt;a href=&quot;#使用：&quot; class=&quot;headerlink&quot; title=&quot;使用：&quot;&gt;&lt;/a&gt;使用：&lt;/h1&gt;&lt;p&gt;re_telephone.match(‘010-12345’).groups()&lt;br&gt;执行结果：&lt;br&gt;(‘010’, ‘12345’)&lt;br&gt;```&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;正则表达式广泛用于前端，移动端，以及服务端，用来做字符串的规则校验，校验是否合法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;\d可以匹配一个数字，\w可以匹配一个字母或数字&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highl
    
    </summary>
    
      <category term="基础" scheme="http://hammercui.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="android,web,python,java" scheme="http://hammercui.github.io/tags/android-web-python-java/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记：3 io操作</title>
    <link href="http://hammercui.github.io/post/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A3-io%E6%93%8D%E4%BD%9C/"/>
    <id>http://hammercui.github.io/post/python学习笔记：3-io操作/</id>
    <published>2016-09-07T07:12:56.000Z</published>
    <updated>2016-09-09T05:47:56.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;文件读写&quot;&gt;&lt;a href=&quot;#文件读写&quot; class=&quot;headerlink&quot; title=&quot;文件读写&quot;&gt;&lt;/a&gt;文件读写&lt;/h2&gt;&lt;p&gt;可以使用open来操作文件，但是每次都要close&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f = open(&amp;apos;iotest.txt&amp;apos;, &amp;apos;rb&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print f.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;finally:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;所以推荐使用with ，能自动完成close&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;with open(&amp;apos;iotest.txt&amp;apos;, &amp;apos;rb&amp;apos;) as f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print f.read().decode(&amp;apos;gbk&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;练习：遍历目录下所有文件，查找文件名包含&lt;code&gt;test&lt;/code&gt;的文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;absolute_path = sys.path[0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#print absolute_path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def search(path,name):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for x in os.listdir(path):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fullname = os.path.join(path,x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if os.path.isfile(fullname):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #print &amp;apos;文件：%s&amp;apos; % fullname&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if name in x:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                print &amp;apos;选中：%s&amp;apos; % fullname&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            search(fullname,name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;search(absolute_path,&amp;apos;test&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;序列化&quot;&gt;&lt;a href=&quot;#序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化&quot;&gt;&lt;/a&gt;序列化&lt;/h2&gt;&lt;p&gt;我们把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling，在其他语言中也被称之为serialization，marshalling，flattening等等，都是一个意思&lt;/p&gt;
&lt;p&gt;序列化文件：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f = open(&amp;apos;dump.txt&amp;apos;, &amp;apos;wb&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pickle.dump(dic, f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;反序列化文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f = open(&amp;apos;dump.txt&amp;apos;, &amp;apos;rb&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d = pickle.load(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;字典序列化为json&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;str_json = json.dumps(dic)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print str_json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print json.loads(str_json)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对象序列化为json&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Student(object):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __init__(self,name,age,score):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.age = age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.score = score&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def student2dict(self,object):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &amp;#123;&amp;apos;name&amp;apos;:self.name,&amp;apos;age&amp;apos;:self.age,&amp;apos;score&amp;apos;:self.score&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hammer = Student(&amp;apos;hammer&amp;apos;,27,100)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print json.dumps(hammer,default=hammer.student2dict)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;多进程&quot;&gt;&lt;a href=&quot;#多进程&quot; class=&quot;headerlink&quot; title=&quot;多进程&quot;&gt;&lt;/a&gt;多进程&lt;/h2&gt;&lt;p&gt;unix/lunix使用&lt;code&gt;fork()&lt;/code&gt;,会复制当前进程出一个子进程&lt;/p&gt;
&lt;p&gt;子进程永远返回0，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用getppid()就可以拿到父进程的ID。&lt;/p&gt;
&lt;p&gt;Python的os模块封装了常见的系统调用，其中就包括fork，可以在Python程序中轻松创建子进程：&lt;br&gt;&lt;strong&gt;Progress&lt;/strong&gt;&lt;br&gt;使用Progress来写快平台多进程&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 1 使用Process来创建进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def run_proc(name):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print &amp;apos;Run child process %s (%s)...&amp;apos; % (name, os.getpid())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if __name__==&amp;apos;__main__&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print &amp;apos;Parent process %s.&amp;apos; % os.getpid()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = Process(target=run_proc, args=(&amp;apos;test&amp;apos;,))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print &amp;apos;Process will start.&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.join()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print &amp;apos;Process end.&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;####################&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Pool&lt;/strong&gt;&lt;br&gt;使用Pool进程池，来批量创造进程&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#2 学习使用Pool,进程池&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def long_time_task(name):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print &amp;apos;执行 tast %s(%s)...&amp;apos; % (name,os.getpid())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start = time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time.sleep(random.random() * 3 )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end = time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print &amp;apos;Task %s run %0.2f seconds.&amp;apos; % (name,end - start)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if __name__ ==&amp;apos;__main__&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print &amp;apos;父进程id %s .&amp;apos; % os.getpid()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p = Pool()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for i in range(5):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        p.apply_async(long_time_task,args=(i,))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print &amp;apos;等待所有子进程执行完毕.&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.close() #close之后Pool不能新增子进程了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.join() # join方法会等待所有子进程执行完毕&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print &amp;apos;All done .&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#########################&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程间通信&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 3 学习使用Queue,实现进程间通信&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 写数据进程执行的代码:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def write(q):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for value in [&amp;apos;A&amp;apos;, &amp;apos;B&amp;apos;, &amp;apos;C&amp;apos;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print &amp;apos;Put %s to queue...&amp;apos; % value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        q.put(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time.sleep(random.random())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 读数据进程执行的代码:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def read(q):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while True:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value = q.get(True)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print &amp;apos;Get %s from queue.&amp;apos; % value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if __name__==&amp;apos;__main__&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 父进程创建Queue，并传给各个子进程：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    q = Queue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pw = Process(target=write, args=(q,))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pr = Process(target=read, args=(q,))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 启动子进程pw，写入:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pw.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 启动子进程pr，读取:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pr.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 等待pw结束:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pw.join()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # pr进程里是死循环，无法等待其结束，只能强行终止:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pr.terminate()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h2&gt;&lt;p&gt;Python是真正的多线程。&lt;br&gt;Python的标准库提供了两个模块：&lt;code&gt;thread&lt;/code&gt;和&lt;code&gt;threading&lt;/code&gt;，&lt;code&gt;thread&lt;/code&gt;是低级模块，&lt;code&gt;threading&lt;/code&gt;是高级模块，对&lt;code&gt;thread&lt;/code&gt;进行了封装。绝大多数情况下，我们只需要使用&lt;code&gt;threading&lt;/code&gt;这个高级模块。&lt;/p&gt;
&lt;p&gt;Python解释器由于设计时有GIL全局锁，导致了多线程无法利用多核。多线程的并发在Python中就是一个美丽的梦。&lt;br&gt;意思是Python虽然是实际设计的多线程，但是由于全局所的存在，无法使用CPU的多核性能&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 学习使用多线程，主要是threading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import time,threading&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def loop():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print &amp;apos;thread %s is running ...&amp;apos; % threading.current_thread().name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while n &amp;lt; 5:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n = n+1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print &amp;apos;thread %s &amp;gt;&amp;gt;&amp;gt; %s&amp;apos; % (threading.current_thread().name,n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time.sleep(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print &amp;apos;thread %s ended.&amp;apos; % threading.current_thread().name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print &amp;apos;thread %s is running...&amp;apos; % threading.current_thread().name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t = threading.Thread(target=loop,name = &amp;apos;ChildThread&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t.join()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print &amp;apos;thread %s ended.&amp;apos; % threading.current_thread().name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;选择进程还是线程&quot;&gt;&lt;a href=&quot;#选择进程还是线程&quot; class=&quot;headerlink&quot; title=&quot;选择进程还是线程&quot;&gt;&lt;/a&gt;选择进程还是线程&lt;/h3&gt;&lt;p&gt;如果用多进程实现Master-Worker，主进程就是Master，其他进程就是Worker。&lt;/p&gt;
&lt;p&gt;如果用多线程实现Master-Worker，主线程就是Master，其他线程就是Worker。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cpu密集型：典型的是计算圆周率，视频解码&lt;/li&gt;
&lt;li&gt;io密集型：典型的是web服务器&lt;blockquote&gt;
&lt;p&gt;如果充分利用操作系统提供的异步IO支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为&lt;strong&gt;事件驱动模型&lt;/strong&gt;，Nginx就是支持异步IO的Web服务器。它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同）。&lt;br&gt;python单进程的异步编程模型称为&lt;strong&gt;协程&lt;/strong&gt;，有了协程的支持，就可以&lt;strong&gt;基于事件驱动&lt;/strong&gt;编写高效的多任务程序.&lt;br&gt;类似于nodejs服务器，也是采用的基于事件驱动的单进程单线程来执行多任务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;分布式进程&quot;&gt;&lt;a href=&quot;#分布式进程&quot; class=&quot;headerlink&quot; title=&quot;分布式进程&quot;&gt;&lt;/a&gt;分布式进程&lt;/h3&gt;&lt;p&gt;为什么选用Process，而不是Thread呢，因为进程可以部署到不同的机器上，形成分布式进程。&lt;br&gt;比如：&lt;br&gt;机器1》 创建Queue，把Queue注册到网络上暴露，供其他进程访问&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件读写&quot;&gt;&lt;a href=&quot;#文件读写&quot; class=&quot;headerlink&quot; title=&quot;文件读写&quot;&gt;&lt;/a&gt;文件读写&lt;/h2&gt;&lt;p&gt;可以使用open来操作文件，但是每次都要close&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
    
    </summary>
    
      <category term="python" scheme="http://hammercui.github.io/categories/python/"/>
    
    
      <category term="python基础" scheme="http://hammercui.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记：2.面向对象</title>
    <link href="http://hammercui.github.io/post/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A2-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://hammercui.github.io/post/python学习笔记：2-面向对象/</id>
    <published>2016-09-05T02:36:00.000Z</published>
    <updated>2016-09-07T07:03:00.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;p&gt;一个py文件，就是一个模块（module），相同函数和变量名可以存在不同的模块中。一个py模块就是一个类，可以这么理解&lt;/p&gt;
&lt;p&gt;为了避免类的冲突，引入包的概念。注意每一个包下面，都会有一个&lt;strong&gt;init&lt;/strong&gt;.py的文件，他的模块名就是包名    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作用域&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;正常的函数和变量名是公开的（public），可以被直接引用，比如：abc，x123，PI等；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类似_xxx和&lt;strong&gt;xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，&lt;/strong&gt;abc等；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令行运行&lt;/strong&gt;&lt;br&gt;在命令行运行py文件时，Python解释器把一个特殊变量&lt;strong&gt;name&lt;/strong&gt;置为&lt;strong&gt;main&lt;/strong&gt;&lt;br&gt;因此以下代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if __name__==&amp;apos;__main__&amp;apos;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;$ python hello.py&lt;/code&gt;运行时，会执行&lt;code&gt;test()&lt;/code&gt;，但是import时不会执行&lt;/p&gt;
&lt;h3 id=&quot;安装第三方模块&quot;&gt;&lt;a href=&quot;#安装第三方模块&quot; class=&quot;headerlink&quot; title=&quot;安装第三方模块&quot;&gt;&lt;/a&gt;安装第三方模块&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;安装pip&lt;/strong&gt;&lt;br&gt;使用pip安装，可在命令行检查输入pip，检查是否安装。&lt;br&gt;如果安装不成功，可以直接去&lt;a href=&quot;https://pypi.python.org/pypi/pip#downloads ：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网地址&lt;/a&gt;下载&lt;br&gt;&lt;img src=&quot;http://img1.tuicool.com/qau2yqQ.png!web&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下载完成之后，解压到一个文件夹，用CMD控制台进入解压目录，输入：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python setup.py install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后输入pip命令，检测是否安装成功&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装PIL&lt;/strong&gt;&lt;br&gt;PIL是一个图片处理库，而且是跨平台的。&lt;br&gt;当我们执行以下失败时&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install PIL&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;换成&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install pillow&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后引入时&lt;code&gt;fom PIL import Image&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在python2中使用python3&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from __future__ import unicode_literals&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from __future__ import division&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.x里的字符串用’xxx’表示str，Unicode字符串用u’xxx’表示unicode&lt;br&gt;在3.x中，所有字符串都被视为unicode，写u’xxx’和’xxx’是完全一致的，但是str就必须写成b’xxx’，来表示“二进制字符串”&lt;/p&gt;
&lt;h2 id=&quot;面向对象编程&quot;&gt;&lt;a href=&quot;#面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;面向对象编程&quot;&gt;&lt;/a&gt;面向对象编程&lt;/h2&gt;&lt;p&gt;给对象发消息实际上就是调用对象对应的关联函数，我们称之为对象的方法（Method）。这里指明了方法跟函数概念上的区别&lt;/p&gt;
&lt;p&gt;数据封装、继承和多态是面向对象的三大特点。&lt;/p&gt;
&lt;p&gt;如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线&lt;strong&gt;，在Python中，实例的变量名如果以&lt;/strong&gt;开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;继承和多态&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#父类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Animal(object):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def run(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print &amp;quot;Animal is running&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Dog(Animal):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Cat(Animal):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dog = Dog()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dog.run()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat = Cat()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat.run()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;type()&lt;/code&gt;,来判断对象类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过内置的一系列函数，我们可以对任意一个Python对象进行剖析，拿到其内部的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dir()&lt;/code&gt;,来获得一个对象的所有属性跟方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;高级特性：多重继承，定制类，元类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动态绑定&lt;/strong&gt;&lt;br&gt;动态绑定允许我们在程序运行的过程中动态给class加上功能，这在静态语言中很难实现&lt;/p&gt;
&lt;p&gt;以下给一个实例绑定方法，其他实例没有这个方法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 给dog对象动态新增方法set_age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def set_age(self,age): #定义一个函数作为实例方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.age = age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dog.set_age = MethodType(set_age,dog,Dog)# 给实例绑定一个方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dog.set_age(25)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print &amp;apos;dog的age:%s&amp;apos; % dog.age&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以下是给对象绑定方法，它的所有实例都会有这个方法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def set_price(self,price): #定义一个函数作为实例方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.price = price&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Animal.set_price = MethodType(set_price,None,Animal)# 给类绑定一个方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dog.set_price(&amp;apos;200$&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat.set_price(&amp;apos;300$&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print dog.price&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print cat.price&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@property&lt;/strong&gt;&lt;br&gt;类似java的get set，避免把属性直接暴露&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Student(object):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @property&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def birth(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return self._birth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @birth.setter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def birth(self, value):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self._birth = value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多重继承&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;区别于java的单继承&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Dog(Mammal, RunnableMixin, CarnivorousMixin):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这样Dog类就继承了Mammal类，RunnableMixin类，CarnivorousMixin类&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定制类&lt;/strong&gt;&lt;br&gt;&lt;code&gt;__str__&lt;/code&gt;&lt;br&gt;&lt;code&gt;__repr__&lt;/code&gt;&lt;br&gt;用法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Student(object):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __init__(self, name):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __str__(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &amp;apos;Student object (name=%s)&amp;apos; % self.name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __repr__ = __str__&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__iter__&lt;/code&gt;用法：&lt;br&gt;如果一个类想被用于for … in循环，类似list或tuple那样，就必须实现一个&lt;strong&gt;iter&lt;/strong&gt;()方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的next()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__getattr__&lt;/code&gt;&lt;br&gt;利用完全动态的&lt;strong&gt;getattr&lt;/strong&gt;写一个链式调用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Chain(object):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # class实例化调用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __init__(self,path = &amp;apos;&amp;apos;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self._pathh = path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # 调用Chain不存在的属性时&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __getattr__(self, path):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return Chain(&amp;apos;%s/%s&amp;apos; % (self._pathh,path))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __str__(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return self._pathh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print Chain().statu.v2.member.center&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/statu/v2/member/center&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;__call()__&lt;/code&gt;可以使对象被当成函数进行调用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用元类&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type() 动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的&lt;/li&gt;
&lt;li&gt;&lt;p&gt;type()函数既可以返回一个对象的类型，又可以创建出新的类型&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def fn(self, name=&amp;apos;world&amp;apos;): # 先定义函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       print(&amp;apos;Hello, %s.&amp;apos; % name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello = type(&amp;apos;Hello&amp;apos;, (object,), dict(hello=fn)) # 创建Hello class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h = Hello()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h.hello()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;metaclass&lt;/code&gt;&lt;br&gt;控制类的创建行为，还可使使用这个，元类&lt;br&gt;先定义metaclass，就可以创建类，最后创建实例。所以，metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的“实例”。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;调试&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;try catach&lt;/li&gt;
&lt;li&gt;assert 断言，类似于print，输出内容&lt;/li&gt;
&lt;li&gt;logging.info(),可以指定输出的级别&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import logging&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logging.basicConfig(level=logging.INFO)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;单元测试&lt;/strong&gt;&lt;br&gt;被测试文件&lt;code&gt;mydict.py&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# -*- coding:utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 单元测试&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Dict(dict):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __init__(self, **kw):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(Dict, self).__init__(**kw)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __getattr__(self, key):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return self[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        except KeyError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            raise AttributeError(r&amp;quot;&amp;apos;Dict&amp;apos; object has no attribute &amp;apos;%s&amp;apos;&amp;quot; % key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __setattr__(self, key, value):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self[key] = value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们需要写的测试代码&lt;code&gt;mydict_test.py&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# -*- coding:utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 进行单元测试&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import unittest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;from mydict import Dict&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class TestDict(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def test_init(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d = Dict(a=1, b=&amp;apos;test&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertEquals(d.a, 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertEquals(d.b, &amp;apos;test&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertTrue(isinstance(d, dict))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def test_key(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d = Dict()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d[&amp;apos;key&amp;apos;] = &amp;apos;value&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertEquals(d.key, &amp;apos;value&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def test_attr(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d = Dict()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d.key = &amp;apos;value&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertTrue(&amp;apos;key&amp;apos; in d)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.assertEquals(d[&amp;apos;key&amp;apos;], &amp;apos;value&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def test_keyerror(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d = Dict()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        with self.assertRaises(KeyError):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            value = d[&amp;apos;empty&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def test_attrerror(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        d = Dict()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        with self.assertRaises(AttributeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            value = d.empty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def setUp(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print &amp;apos;setUp...开始测试&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def tearDown(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print &amp;apos;tearDown...测试结束&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;p&gt;一个py文件，就是一个模块（module），相同函数和变量名可以存在不同的模块中。一个py模块就是一个类，可以这么理解&lt;/p&gt;
&lt;p&gt;为了避
    
    </summary>
    
      <category term="python" scheme="http://hammercui.github.io/categories/python/"/>
    
    
      <category term="python基础" scheme="http://hammercui.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记：1.基础</title>
    <link href="http://hammercui.github.io/post/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A1-%E5%9F%BA%E7%A1%80/"/>
    <id>http://hammercui.github.io/post/python学习笔记：1-基础/</id>
    <published>2016-08-31T08:48:58.000Z</published>
    <updated>2016-09-05T02:33:04.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;对于大多数程序员来说，有了一定功底，就会觉得语言大同小异，再学习动态语言，也不会觉得是难事。因此，我只做一些简单的记录，记录会跟静态语言混淆的地方。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;数据类型，变量&quot;&gt;&lt;a href=&quot;#数据类型，变量&quot; class=&quot;headerlink&quot; title=&quot;数据类型，变量&quot;&gt;&lt;/a&gt;数据类型，变量&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;python中同一个变量，可以反复赋值，而且可以是不同类型的变量。这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错，笔记java.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a = 123 # a是整数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &amp;apos;ABC&amp;apos; # a变为字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通常用全部大写，表示常量。Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;list&quot;&gt;&lt;a href=&quot;#list&quot; class=&quot;headerlink&quot; title=&quot;list&quot;&gt;&lt;/a&gt;list&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素&lt;br&gt;用索引来访问list中每一个位置的元素，记得索引是从0开始的,这点跟lua有区别&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nameList = [&amp;apos;xiaoming&amp;apos;,&amp;apos;xiaoli&amp;apos;,&amp;apos;xiaozhang&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print nameList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print len(nameList)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素,以此类推，可以获取倒数第2个、倒数第3个：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nameList[-1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nameList[-2]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要删除list末尾的元素，用pop()方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;要删除指定位置的元素，用pop(i)方法，其中i是索引位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tuple&quot;&gt;&lt;a href=&quot;#tuple&quot; class=&quot;headerlink&quot; title=&quot;tuple&quot;&gt;&lt;/a&gt;tuple&lt;/h2&gt;&lt;p&gt;元组，跟list的区别是，元组是不能修改的，不能赋值成其他的元素，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nameList = （&amp;apos;xiaoming&amp;apos;,&amp;apos;xiaoli&amp;apos;,&amp;apos;xiaozhang&amp;apos;）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;dic&quot;&gt;&lt;a href=&quot;#dic&quot; class=&quot;headerlink&quot; title=&quot;dic&quot;&gt;&lt;/a&gt;dic&lt;/h2&gt;&lt;p&gt;字典，普遍用法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;判断key是否存在&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;key&amp;apos; in dict&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict.get(&amp;apos;key&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除key:pop(key)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;set&quot;&gt;&lt;a href=&quot;#set&quot; class=&quot;headerlink&quot; title=&quot;set&quot;&gt;&lt;/a&gt;set&lt;/h2&gt;&lt;p&gt;set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。&lt;br&gt;s = set([1, 2, 3])&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;重复元素在set中自动被过滤：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; s = set([1, 1, 2, 2, 3, 3])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set([1, 2, 3])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过remove(key)方法可以删除元素：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; s1 = set([1, 2, 3])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; s2 = set([2, 3, 4])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; s1 &amp;amp; s2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set([2, 3])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; s1 | s2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set([1, 2, 3, 4])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;字符编码&quot;&gt;&lt;a href=&quot;#字符编码&quot; class=&quot;headerlink&quot; title=&quot;字符编码&quot;&gt;&lt;/a&gt;字符编码&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;支持中文，需要在开头添加&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a = &amp;apos;Hi ,%s,you have 钱数:%d&amp;apos; % (&amp;apos;Hammercui&amp;apos;,10000)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;常见的占位符有：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%d	整数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%f	浮点数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%s	字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%x	十六进制整数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;abs()绝对值函数&lt;/li&gt;
&lt;li&gt;cmp(x,y)比较函数&lt;/li&gt;
&lt;li&gt;int() 转int函数&lt;/li&gt;
&lt;li&gt;声明函数：&lt;code&gt;def&lt;/code&gt;,依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def my_abs(x):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if x&amp;gt;0:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return -x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print my_abs(-2000)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;默认参数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def power(x, n=2):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while n &amp;gt; 0:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n = n - 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s = s * x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;power(5)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;fact(n)阶乘函数。递归不做优化的话，会导致栈溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;slice切片操作符&quot;&gt;&lt;a href=&quot;#slice切片操作符&quot; class=&quot;headerlink&quot; title=&quot;slice切片操作符&quot;&gt;&lt;/a&gt;slice切片操作符&lt;/h2&gt;&lt;p&gt;L[0:3]表示从list L中取出索引0到3，不包括3的元素，返回list&lt;br&gt;前10个数，每两个取一个：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; L[:10:2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0, 2, 4, 6, 8]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串’xxx’或Unicode字符串u’xxx’也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &amp;apos;ABCDEFG&amp;apos;[:3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;ABC&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &amp;apos;ABCDEFG&amp;apos;[::2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;ACEG&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;迭代&quot;&gt;&lt;a href=&quot;#迭代&quot; class=&quot;headerlink&quot; title=&quot;迭代&quot;&gt;&lt;/a&gt;迭代&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;判断是否能是迭代&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from collections import Iterable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(&amp;apos;abc&amp;apos;, Iterable) # str是否可迭代&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; isinstance([1,2,3], Iterable) # list是否可迭代&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; isinstance(123, Iterable) # 整数是否可迭代&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;False&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果要对list实现类似Java那样的下标循环怎么办？Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 模仿java写法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for i,value in enumerate([&amp;apos;a&amp;apos;,&amp;apos;b&amp;apos;,&amp;apos;c&amp;apos;]):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print i,value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;列表生成式&quot;&gt;&lt;a href=&quot;#列表生成式&quot; class=&quot;headerlink&quot; title=&quot;列表生成式&quot;&gt;&lt;/a&gt;列表生成式&lt;/h2&gt;&lt;p&gt;但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？方法一是循环，方法二如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; [x * x for x in range(1, 11)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以增加条件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; [x * x for x in range(1, 11) if x % 2 == 0]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[4, 16, 36, 64, 100]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还可以双层循环&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; [m + n for m in &amp;apos;ABC&amp;apos; for n in &amp;apos;XYZ&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;apos;AX&amp;apos;, &amp;apos;AY&amp;apos;, &amp;apos;AZ&amp;apos;, &amp;apos;BX&amp;apos;, &amp;apos;BY&amp;apos;, &amp;apos;BZ&amp;apos;, &amp;apos;CX&amp;apos;, &amp;apos;CY&amp;apos;, &amp;apos;CZ&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;生成器generator&quot;&gt;&lt;a href=&quot;#生成器generator&quot; class=&quot;headerlink&quot; title=&quot;生成器generator&quot;&gt;&lt;/a&gt;生成器generator&lt;/h2&gt;&lt;p&gt;所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器（Generator）&lt;/p&gt;
&lt;p&gt;定义generator的另一种方法。如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator&lt;/p&gt;
&lt;p&gt;而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。这样就保证了，每次next都是从上次的结果之后执行的。&lt;/p&gt;
&lt;h2 id=&quot;高阶函数&quot;&gt;&lt;a href=&quot;#高阶函数&quot; class=&quot;headerlink&quot; title=&quot;高阶函数&quot;&gt;&lt;/a&gt;高阶函数&lt;/h2&gt;&lt;p&gt;指函数名也是变量，可以把函数作为参数传递。&lt;br&gt;把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式&lt;/p&gt;
&lt;h2 id=&quot;map函数&quot;&gt;&lt;a href=&quot;#map函数&quot; class=&quot;headerlink&quot; title=&quot;map函数&quot;&gt;&lt;/a&gt;map函数&lt;/h2&gt;&lt;p&gt;接收两个参数，第一个函数，第二个序列（可以是list,tuple），返回结果list&lt;br&gt;比如，把一个int类型的list转成string类型的list&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;map(str,[1,2,3,4])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;结果：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;apos;1&amp;apos;,&amp;apos;2&amp;apos;,&amp;apos;3&amp;apos;,&amp;apos;4&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;reduce函数&quot;&gt;&lt;a href=&quot;#reduce函数&quot; class=&quot;headerlink&quot; title=&quot;reduce函数&quot;&gt;&lt;/a&gt;reduce函数&lt;/h2&gt;&lt;p&gt;接收两个参数，第一函数，但这个函数必须&lt;strong&gt;接收2个参数&lt;/strong&gt;，第二个序列，返回list。&lt;br&gt;reduce与map的区别是&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;相当于每次传入2个参数，把结果作为新的参数，跟下一个参数再传入&lt;/p&gt;
&lt;h2 id=&quot;filter函数&quot;&gt;&lt;a href=&quot;#filter函数&quot; class=&quot;headerlink&quot; title=&quot;filter函数&quot;&gt;&lt;/a&gt;filter函数&lt;/h2&gt;&lt;p&gt;传入两个参数，和map()不同的时，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。&lt;/p&gt;
&lt;p&gt;例如，在一个list中，删掉偶数，只保留奇数，可以这么写：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def is_odd(n):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return n % 2 == 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 结果: [1, 5, 9, 15]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;sorted函数&quot;&gt;&lt;a href=&quot;#sorted函数&quot; class=&quot;headerlink&quot; title=&quot;sorted函数&quot;&gt;&lt;/a&gt;sorted函数&lt;/h2&gt;&lt;p&gt;与其他相反，序列在前，函数在后&lt;/p&gt;
&lt;h2 id=&quot;匿名函数&quot;&gt;&lt;a href=&quot;#匿名函数&quot; class=&quot;headerlink&quot; title=&quot;匿名函数&quot;&gt;&lt;/a&gt;匿名函数&lt;/h2&gt;&lt;p&gt;比如函数&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def f(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return x*x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以写作&lt;br&gt;&lt;code&gt;lambda x:x*x&lt;/code&gt;&lt;br&gt;用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数&lt;/p&gt;
&lt;h2 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;装饰器&lt;/h2&gt;&lt;p&gt;假设我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改now()函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。&lt;/p&gt;
&lt;h2 id=&quot;偏函数&quot;&gt;&lt;a href=&quot;#偏函数&quot; class=&quot;headerlink&quot; title=&quot;偏函数&quot;&gt;&lt;/a&gt;偏函数&lt;/h2&gt;&lt;p&gt;当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。&lt;/p&gt;
&lt;p&gt;比如二进制转换成int&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def int2(x, base=2):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return int(x, base)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int2(&amp;apos;1000000&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用偏函数写法就是&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import functools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int2 = functools.partical(int,base=2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int2(&amp;apos;1000000&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;对于大多数程序员来说，有了一定功底，就会觉得语言大同小异，再学习动态语言，也不会觉得是难事。因此，我只做一些简单的记录，记录会跟静态语言混淆的地方。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;数据类型，变量&quot;&gt;&lt;a href=&quot;#数据类型
    
    </summary>
    
      <category term="python" scheme="http://hammercui.github.io/categories/python/"/>
    
    
      <category term="python基础" scheme="http://hammercui.github.io/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>android最佳实践9-2：greenDao的数据库升级</title>
    <link href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B59-2%EF%BC%9AgreenDao%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%87%E7%BA%A7/"/>
    <id>http://hammercui.github.io/post/android最佳实践9-2：greenDao的数据库升级/</id>
    <published>2016-08-01T03:13:49.000Z</published>
    <updated>2016-08-01T05:35:54.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;app开发期间的数据库升级&quot;&gt;&lt;a href=&quot;#app开发期间的数据库升级&quot; class=&quot;headerlink&quot; title=&quot;app开发期间的数据库升级&quot;&gt;&lt;/a&gt;app开发期间的数据库升级&lt;/h1&gt;&lt;p&gt;我们使用DevOpenHelper打开数据库&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; DaoMaster.DevOpenHelper helper = &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;new DevOpenHelper(application,&amp;quot;xue_old.db&amp;quot;,null);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;DevOpenHelper内容&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static class DevOpenHelper extends OpenHelper &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      public DevOpenHelper(Context context, String name, CursorFactory factory) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          super(context, name, factory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          Log.i(&amp;quot;greenDAO&amp;quot;, &amp;quot;Upgrading schema from version &amp;quot; + oldVersion + &amp;quot; to &amp;quot; + newVersion + &amp;quot; by dropping all tables&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          dropAllTables(db, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          onCreate(db);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//删除当前所有表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dropAllTables(db, true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//新建当前所有表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;onCreate(db);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种方式意味着每次都重新创建，所以数据不会报错&lt;/p&gt;
&lt;h1 id=&quot;app-上线后的数据库升级，Migration（合并）方式&quot;&gt;&lt;a href=&quot;#app-上线后的数据库升级，Migration（合并）方式&quot; class=&quot;headerlink&quot; title=&quot;app 上线后的数据库升级，Migration（合并）方式&quot;&gt;&lt;/a&gt;app 上线后的数据库升级，Migration（合并）方式&lt;/h1&gt;&lt;p&gt;我们自己新建一个HMROpenHelper,继承自OpenHelper&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class HMROpenHelper extends DaoMaster.OpenHelper &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public HMROpenHelper(Context context, String name, SQLiteDatabase.CursorFactory factory) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(context, name, factory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 数据库升级&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param oldVersion&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param newVersion&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //操作数据库的更新&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MigrationHelper.migrate(db,NoteDao.class,LessonDao.class,ZhangDao.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;数据库的合并如下&lt;br&gt;MigrationHelper.java&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class MigrationHelper &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 调用升级方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param daoClasses 一系列dao.class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void migrate(SQLiteDatabase db, Class&amp;lt;? extends AbstractDao&amp;lt;?, ?&amp;gt;&amp;gt;... daoClasses) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //1 新建临时表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        generateTempTables(db, daoClasses);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //2 创建新表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        createAllTables(db, false, daoClasses);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //3 临时表数据写入新表，删除临时表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        restoreData(db, daoClasses);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 生成临时表，存储旧的表数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param daoClasses&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static void generateTempTables(SQLiteDatabase db, Class&amp;lt;? extends AbstractDao&amp;lt;?, ?&amp;gt;&amp;gt;... daoClasses) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //方法2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i=0;i&amp;lt;daoClasses.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            DaoConfig daoConfig = new DaoConfig(db,daoClasses[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String tableName = daoConfig.tablename;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (!checkTable(db,tableName))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String tempTableName = daoConfig.tablename.concat(&amp;quot;_TEMP&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            StringBuilder insertTableStringBuilder = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            insertTableStringBuilder.append(&amp;quot;alter table &amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .append(tableName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .append(&amp;quot; rename to &amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .append(tempTableName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    .append(&amp;quot;;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            db.execSQL(insertTableStringBuilder.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 检测table是否存在&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param tableName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static Boolean checkTable(SQLiteDatabase db,String  tableName)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        StringBuilder query = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        query.append(&amp;quot;SELECT count(*) FROM sqlite_master WHERE type=&amp;apos;table&amp;apos; AND name=&amp;apos;&amp;quot;).append(tableName).append(&amp;quot;&amp;apos;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Cursor c = db.rawQuery(query.toString(), null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (c.moveToNext())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int count = c.getInt(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if(count&amp;gt;0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 删除所有旧表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param ifExists&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param daoClasses&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static void dropAllTables(SQLiteDatabase db, boolean ifExists, @NonNull Class&amp;lt;? extends AbstractDao&amp;lt;?, ?&amp;gt;&amp;gt;... daoClasses) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        reflectMethod(db, &amp;quot;dropTable&amp;quot;, ifExists, daoClasses);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 创建新的表结构&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param ifNotExists&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param daoClasses&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static void createAllTables(SQLiteDatabase db, boolean ifNotExists, @NonNull Class&amp;lt;? extends AbstractDao&amp;lt;?, ?&amp;gt;&amp;gt;... daoClasses) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        reflectMethod(db, &amp;quot;createTable&amp;quot;, ifNotExists, daoClasses);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 创建根删除都在NoteDao声明了，可以直接拿过来用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * dao class already define the sql exec method, so just invoke it&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static void reflectMethod(SQLiteDatabase db, String methodName, boolean isExists, @NonNull Class&amp;lt;? extends AbstractDao&amp;lt;?, ?&amp;gt;&amp;gt;... daoClasses) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (daoClasses.length &amp;lt; 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for (Class cls : daoClasses) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //根据方法名，找到声明的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Method method = cls.getDeclaredMethod(methodName, SQLiteDatabase.class, boolean.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                method.invoke(null, db, isExists);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (NoSuchMethodException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (InvocationTargetException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (IllegalAccessException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 临时表的数据写入新表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param daoClasses&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static void restoreData(SQLiteDatabase db, Class&amp;lt;? extends AbstractDao&amp;lt;?, ?&amp;gt;&amp;gt;... daoClasses) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i = 0; i &amp;lt; daoClasses.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            DaoConfig daoConfig = new DaoConfig(db, daoClasses[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String tableName = daoConfig.tablename;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String tempTableName = daoConfig.tablename.concat(&amp;quot;_TEMP&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (!checkTable(db,tempTableName))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // get all columns from tempTable, take careful to use the columns list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            List&amp;lt;String&amp;gt; columns = getColumns(db, tempTableName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //新表，临时表都包含的字段&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ArrayList&amp;lt;String&amp;gt; properties = new ArrayList&amp;lt;&amp;gt;(columns.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for (int j = 0; j &amp;lt; daoConfig.properties.length; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                String columnName = daoConfig.properties[j].columnName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (columns.contains(columnName)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    properties.add(columnName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (properties.size() &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                final String columnSQL = TextUtils.join(&amp;quot;,&amp;quot;, properties);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                StringBuilder insertTableStringBuilder = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                insertTableStringBuilder.append(&amp;quot;INSERT INTO &amp;quot;).append(tableName).append(&amp;quot; (&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                insertTableStringBuilder.append(columnSQL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                insertTableStringBuilder.append(&amp;quot;) SELECT &amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                insertTableStringBuilder.append(columnSQL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                insertTableStringBuilder.append(&amp;quot; FROM &amp;quot;).append(tempTableName).append(&amp;quot;;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                db.execSQL(insertTableStringBuilder.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            StringBuilder dropTableStringBuilder = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dropTableStringBuilder.append(&amp;quot;DROP TABLE &amp;quot;).append(tempTableName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            db.execSQL(dropTableStringBuilder.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static List&amp;lt;String&amp;gt; getColumns(SQLiteDatabase db, String tableName) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;String&amp;gt; columns = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Cursor cursor = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cursor = db.rawQuery(&amp;quot;SELECT * FROM &amp;quot; + tableName + &amp;quot; limit 0&amp;quot;, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (null != cursor &amp;amp;&amp;amp; cursor.getColumnCount() &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                columns = Arrays.asList(cursor.getColumnNames());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (cursor != null)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                cursor.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (null == columns)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                columns = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return columns;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其核心思路是&lt;br&gt;1 把旧表改为临时表&lt;br&gt;2 建立新表&lt;br&gt;3 临时表数据写入新表，删除临时表&lt;/p&gt;
&lt;p&gt;这样我们就可以直接打开数据库进行更新操作了&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HMROpenHelper helper = new HMROpenHelper(application, &amp;quot;xue_old.db&amp;quot;, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       SQLiteDatabase sqlDB = helper.getWritableDatabase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       return  sqlDB;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;重点&quot;&gt;&lt;a href=&quot;#重点&quot; class=&quot;headerlink&quot; title=&quot;重点&quot;&gt;&lt;/a&gt;重点&lt;/h1&gt;&lt;p&gt;别忘了更新时&lt;code&gt;SCHEMA_VERSION&lt;/code&gt;自动加1,不然不会执行更新&lt;br&gt;位于&lt;code&gt;DaoMaster.java&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;app开发期间的数据库升级&quot;&gt;&lt;a href=&quot;#app开发期间的数据库升级&quot; class=&quot;headerlink&quot; title=&quot;app开发期间的数据库升级&quot;&gt;&lt;/a&gt;app开发期间的数据库升级&lt;/h1&gt;&lt;p&gt;我们使用DevOpenHelper打开数据库&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android最佳实践" scheme="http://hammercui.github.io/tags/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>android最佳实践11：butterknife框架使用</title>
    <link href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B511%EF%BC%9Abutterknife%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://hammercui.github.io/post/android最佳实践11：butterknife框架使用/</id>
    <published>2016-07-28T02:23:42.000Z</published>
    <updated>2016-08-01T03:14:02.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;butterknife也是一个依赖注入框架，借助annonation实现view的快速初始化，解除findViewById的烦恼&lt;/p&gt;
&lt;h1 id=&quot;工程引入&quot;&gt;&lt;a href=&quot;#工程引入&quot; class=&quot;headerlink&quot; title=&quot;工程引入&quot;&gt;&lt;/a&gt;工程引入&lt;/h1&gt;&lt;p&gt;配置project的&lt;code&gt;build.gradle&lt;/code&gt;，来引入&lt;code&gt;android-apt&lt;/code&gt;插件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mavenCentral()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    classpath &amp;apos;com.neenbedankt.gradle.plugins:android-apt:1.8&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置module的&lt;code&gt;build.gradle&lt;/code&gt;,apply the &lt;code&gt;android-apt&lt;/code&gt; plugin,and add the &lt;code&gt;Butter Knife&lt;/code&gt; dependencies.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;android-apt`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; compile &amp;apos;com.jakewharton:butterknife:8.2.1&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; apt &amp;apos;com.jakewharton:butterknife-compiler:8.2.1&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;注意&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;butter knife尽量不要在library中使用，如果要用，还得转R2,太麻烦了&lt;/p&gt;
&lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;h2 id=&quot;使用-BindView注解view&quot;&gt;&lt;a href=&quot;#使用-BindView注解view&quot; class=&quot;headerlink&quot; title=&quot;使用@BindView注解view&quot;&gt;&lt;/a&gt;使用@BindView注解view&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class ExampleActivity extends Activity &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @BindView(R.id.title) TextView title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @BindView(R.id.subtitle) TextView subtitle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @BindView(R.id.footer) TextView footer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @Override public void onCreate(Bundle savedInstanceState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setContentView(R.layout.simple_activity);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ButterKnife.bind(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // TODO Use fields...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Resource的注解&quot;&gt;&lt;a href=&quot;#Resource的注解&quot; class=&quot;headerlink&quot; title=&quot;Resource的注解&quot;&gt;&lt;/a&gt;Resource的注解&lt;/h2&gt;&lt;p&gt;@BindBool, @BindColor, @BindDimen, @BindDrawable, @BindInt, @BindString&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class ExampleActivity extends Activity &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @BindString(R.string.title) String title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @BindDrawable(R.drawable.graphic) Drawable graphic;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @BindColor(R.color.red) int red; // int or ColorStateList field&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;non-activity的注解&quot;&gt;&lt;a href=&quot;#non-activity的注解&quot; class=&quot;headerlink&quot; title=&quot;non-activity的注解&quot;&gt;&lt;/a&gt;non-activity的注解&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class FancyFragment extends Fragment &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @BindView(R.id.button1) Button button1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @BindView(R.id.button2) Button button2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    View view = inflater.inflate(R.layout.fancy_fragment, container, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ButterKnife.bind(this, view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // TODO Use fields...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以在ViewHolder中使用&lt;/p&gt;
&lt;h2 id=&quot;View-List&quot;&gt;&lt;a href=&quot;#View-List&quot; class=&quot;headerlink&quot; title=&quot;View List&quot;&gt;&lt;/a&gt;View List&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@BindViews(&amp;#123; R.id.first_name, R.id.middle_name, R.id.last_name &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;EditText&amp;gt; nameViews;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用&lt;code&gt;apply&lt;/code&gt;方法，能一次操作整个View的List&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ButterKnife.apply(nameViews, DISABLE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ButterKnife.apply(nameViews, ENABLED, false);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;包括设置属性&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ButterKnife.apply(nameViews, View.ALPHA, 0.0f);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Listener的绑定&quot;&gt;&lt;a href=&quot;#Listener的绑定&quot; class=&quot;headerlink&quot; title=&quot;Listener的绑定&quot;&gt;&lt;/a&gt;Listener的绑定&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@OnClick(R.id.submit)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void submit(View view) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // TODO submit data to server...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;绑定的释放&quot;&gt;&lt;a href=&quot;#绑定的释放&quot; class=&quot;headerlink&quot; title=&quot;绑定的释放&quot;&gt;&lt;/a&gt;绑定的释放&lt;/h2&gt;&lt;p&gt;由于Fragment的生命周期区别于activity，当我们在Fragment的onCreatView做绑定的时候，要在onDestoryView中设置views为null。Butter Knife 返回一个Unbider实例来解决这个问题，&lt;br&gt;eg:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class FancyFragment extends Fragment &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @BindView(R.id.button1) Button button1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @BindView(R.id.button2) Button button2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  private Unbinder unbinder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    View view = inflater.inflate(R.layout.fancy_fragment, container, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unbinder = ButterKnife.bind(this, view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // TODO Use fields...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @Override public void onDestroyView() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super.onDestroyView();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unbinder.unbind();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;更懒的方式&quot;&gt;&lt;a href=&quot;#更懒的方式&quot; class=&quot;headerlink&quot; title=&quot;更懒的方式&quot;&gt;&lt;/a&gt;更懒的方式&lt;/h1&gt;&lt;p&gt;使用Zelezny插件，一键生成view&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1833901-f6092a8aeda8a37e.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如何找到插件&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1833901-2bc52b5e7e37e664.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/JakeWharton/butterknife&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github地址&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://jakewharton.github.io/butterknife/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档介绍·英文&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;butterknife也是一个依赖注入框架，借助annonation实现view的快速初始化，解除findViewById的烦恼&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android最佳实践" scheme="http://hammercui.github.io/tags/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>android最佳实践7:androidannotations框架</title>
    <link href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B57%EF%BC%9Aandroidannotations%E6%A1%86%E6%9E%B6/"/>
    <id>http://hammercui.github.io/post/android最佳实践7：androidannotations框架/</id>
    <published>2016-06-17T06:54:03.000Z</published>
    <updated>2016-06-17T07:08:48.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;AndroidAnnotations&quot;&gt;&lt;a href=&quot;#AndroidAnnotations&quot; class=&quot;headerlink&quot; title=&quot;AndroidAnnotations&quot;&gt;&lt;/a&gt;AndroidAnnotations&lt;/h1&gt;&lt;p&gt;android依赖注入框架，主要作用于view层。&lt;/p&gt;
&lt;h1 id=&quot;工程引入&quot;&gt;&lt;a href=&quot;#工程引入&quot; class=&quot;headerlink&quot; title=&quot;工程引入&quot;&gt;&lt;/a&gt;工程引入&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;android studio环境&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;工程的build.gradle如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mavenCentral()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	 ···&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // replace with the current version of the android-apt plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &amp;apos;com.neenbedankt.gradle.plugins:android-apt:1.8&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mavenCentral()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mavenLocal()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;app/build.gradle如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;android-apt&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def AAVersion = &amp;apos;XXX&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    apt &amp;quot;org.androidannotations:androidannotations:$AAVersion&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;quot;org.androidannotations:androidannotations-api:$AAVersion&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    arguments &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        androidManifestFile variant.outputs[0]?.processResources?.manifestFile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // if you have multiple outputs (when using splits), you may want to have other index than 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // you should set your package name here if you are using different application IDs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // resourcePackageName &amp;quot;your.package.name&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // You can set optional annotation processing options here, like these commented options:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // logLevel &amp;apos;INFO&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // logFile &amp;apos;/var/log/aa.log&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;具体使用&quot;&gt;&lt;a href=&quot;#具体使用&quot; class=&quot;headerlink&quot; title=&quot;具体使用&quot;&gt;&lt;/a&gt;具体使用&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/zjbpku/article/details/18676149&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android开源框架(一)：AndroidAnnotations&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AndroidAnnotations&quot;&gt;&lt;a href=&quot;#AndroidAnnotations&quot; class=&quot;headerlink&quot; title=&quot;AndroidAnnotations&quot;&gt;&lt;/a&gt;AndroidAnnotations&lt;/h1&gt;&lt;p&gt;androi
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android最佳实践" scheme="http://hammercui.github.io/tags/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>android最佳实践8：dagger2框架</title>
    <link href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B58%EF%BC%9Adragger2%E6%A1%86%E6%9E%B6/"/>
    <id>http://hammercui.github.io/post/android最佳实践8：dragger2框架/</id>
    <published>2016-06-17T06:12:30.000Z</published>
    <updated>2016-06-22T10:01:20.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;dagger2&quot;&gt;&lt;a href=&quot;#dagger2&quot; class=&quot;headerlink&quot; title=&quot;dagger2&quot;&gt;&lt;/a&gt;dagger2&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://google.github.io/dagger/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dagger2&lt;/a&gt;是一种依赖注入框架，由square开发，现在google负责维护。dagger2一般配合mvp，在mvp已经解耦的基础上，让解耦变得更彻底，以便于测试及维护。&lt;/p&gt;
&lt;h2 id=&quot;dagger2与dagger的区别&quot;&gt;&lt;a href=&quot;#dagger2与dagger的区别&quot; class=&quot;headerlink&quot; title=&quot;dagger2与dagger的区别&quot;&gt;&lt;/a&gt;dagger2与dagger的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;再也没有使用反射：图的验证、配置和预先设置都在编译的时候执行。&lt;/li&gt;
&lt;li&gt;容易调试和可跟踪：完全具体地调用提供和创建的堆栈&lt;/li&gt;
&lt;li&gt;更好的性能：谷歌声称他们提高了13%的处理性能&lt;/li&gt;
&lt;li&gt;代码混淆：使用派遣方法，就如同自己写的代码一样&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然所有这些很棒的特点都需要付出一个代价，那就是缺乏灵活性，例如：Dagger2没用反射所以没有动态机制。&lt;/p&gt;
&lt;h2 id=&quot;注解含义&quot;&gt;&lt;a href=&quot;#注解含义&quot; class=&quot;headerlink&quot; title=&quot;注解含义&quot;&gt;&lt;/a&gt;注解含义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@Inject&lt;/code&gt;: 通常在需要依赖的地方使用这个注解，标识我们需要的实例。另外在&lt;code&gt;@Provide&lt;/code&gt;中，直接返回的实例，需要在类的构造函数添加&lt;code&gt;@Inject&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@Module&lt;/code&gt;: 我们定义一个类，用&lt;code&gt;@Module注&lt;/code&gt;解,&lt;code&gt;Modules&lt;/code&gt;类里面的方法专门提供依赖。这样&lt;code&gt;Dagger&lt;/code&gt;在构造类的实例的时候，就知道从哪里去找到需要的依赖。modules的一个重要特征是它们设计为分区并组合在一起（比如说，在我们的Component中可以有多个组成在一起的modules）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@Provide&lt;/code&gt;: 在&lt;code&gt;Modules&lt;/code&gt;类中，我们定义的方法是用这个注解。这些方法都是用来提供依赖，生成实例的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@Singlton&lt;/code&gt;：常用在&lt;code&gt;@Provide&lt;/code&gt;之前，表示提供的依赖是个单例，也就是每次都提供同一个实体。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@Component&lt;/code&gt;: 我们定义一个接口，用&lt;code&gt;Components&lt;/code&gt;注解，我们可以理解为Component就是一个注入器，是@Inject和@Module的桥梁。它的主要作用就是连接这两个部分。 Components可以提供所有定义了的类型的实例，比如：我们必须用@Component注解一个接口然后列出所有的@Modules组成该组件，如果缺失了任何一块都会在编译的时候报错。所有的组件都可以通过它的&lt;code&gt;Modules&lt;/code&gt;知道依赖的范围。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@Scope&lt;/code&gt;: Dagger2可以通过自定义注解限定注解作用域。后面会演示一个例子，这是一个非常强大的特点，因为就如前面说的一样，没 必要让每个对象都去了解如何管理他们的实例。在scope的例子中，我们用自定义的@PerActivity注解一个类，所以这个对象存活时间就和 activity的一样。简单来说就是我们可以定义所有范围的粒度(@PerFragment, @PerUser, 等等)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Qualifier&lt;/code&gt;: 当类的类型不足以鉴别一个依赖的时候，我们就可以使用这个注解标示。例如：在Android中，我们会需要不同类型的context，所以我们就可以定义 qualifier注解“@ForApplication”和“@ForActivity”，这样当注入一个context的时候，我们就可以告诉 Dagger我们想要哪种类型的context。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;引入工程&quot;&gt;&lt;a href=&quot;#引入工程&quot; class=&quot;headerlink&quot; title=&quot;引入工程&quot;&gt;&lt;/a&gt;引入工程&lt;/h1&gt;&lt;p&gt;在app/build.gradle添加依赖&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin:&amp;apos;android-apt&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//dragger2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //provided &amp;apos;org.glassfish:javax.annotation:10.0-b28&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    apt &amp;apos;com.google.dagger:dagger-compiler:2.0.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;com.google.dagger:dagger:2.0.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为Dragger2是基于注解的，它会预先生成一些类文件，所以需要在整个项目的/build.gradle文件中加上apt工具:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &amp;apos;com.neenbedankt.gradle.plugins:android-apt:1.8&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;allprojects &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task clean(type: Delete) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    delete rootProject.buildDir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;demo详解&quot;&gt;&lt;a href=&quot;#demo详解&quot; class=&quot;headerlink&quot; title=&quot;demo详解&quot;&gt;&lt;/a&gt;demo详解&lt;/h1&gt;&lt;p&gt;我们通过使用greenDao的示例来说明，引入dagger2的好处。greenDao是非常流行的管理sqldata的orm，我们希望他以单例的形式存在，生命周期等同于Application。&lt;/p&gt;
&lt;h2 id=&quot;首先，创建GreenDaoModule-java&quot;&gt;&lt;a href=&quot;#首先，创建GreenDaoModule-java&quot; class=&quot;headerlink&quot; title=&quot;首先，创建GreenDaoModule.java&quot;&gt;&lt;/a&gt;首先，创建GreenDaoModule.java&lt;/h2&gt;&lt;p&gt;GreenDaoModule.java&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Module&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class GreenDaoModule &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private final BaseApp application;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public GreenDaoModule(BaseApp application)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.application = application;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Provides&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Singleton&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public BaseApp provideApplication()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return application;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Provides&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Singleton&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SQLiteDatabase provideSQLiteDatabase(BaseApp baseApp)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DaoMaster.OpenHelper helper = new DaoMaster.DevOpenHelper(baseApp, &amp;quot;zlot-db&amp;quot;, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SQLiteDatabase sqlDB = helper.getWritableDatabase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return sqlDB;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Provides&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Singleton&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DaoMaster provideDaoMaster(SQLiteDatabase sqLiteDatabase)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DaoMaster daoMaster = new DaoMaster(sqLiteDatabase);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return daoMaster;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Provides&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Singleton&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DaoSession provideDaoSession(DaoMaster daoMaster)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DaoSession daoSession = daoMaster.newSession();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return daoSession;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上述代码中，我们提供了BaseApp，SQLiteDatabase，DaoMaster，DaoSession的依赖，均是单例模式。&lt;br&gt;在目标类注解的时候，会在GreenDaoModule寻找依赖并提供实例。&lt;/p&gt;
&lt;h2 id=&quot;创建AppComponent-java，提供注射器&quot;&gt;&lt;a href=&quot;#创建AppComponent-java，提供注射器&quot; class=&quot;headerlink&quot; title=&quot;创建AppComponent.java，提供注射器&quot;&gt;&lt;/a&gt;创建AppComponent.java，提供注射器&lt;/h2&gt;&lt;p&gt;我们新建一个interface，添加@Component注解，就提供了一个注射器，桥接@Inject跟@Module。&lt;/p&gt;
&lt;p&gt;AppComponent.java&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Singleton&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Component(modules = &amp;#123;GreenDaoModule.class&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public interface AppComponent &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BaseApp getApplication();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BasePresenter inject(BasePresenter basePresenter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中BasePresenter是注射目标，也就是说想要在哪个类里面使用依赖注解，必须在component中注射。&lt;/p&gt;
&lt;p&gt;比如我们想在BasePresenter这个类里，使用依赖注入DaoSession实例，必须在component里插入。&lt;/p&gt;
&lt;h2 id=&quot;在Application中交给dagger2来完成初始化&quot;&gt;&lt;a href=&quot;#在Application中交给dagger2来完成初始化&quot; class=&quot;headerlink&quot; title=&quot;在Application中交给dagger2来完成初始化&quot;&gt;&lt;/a&gt;在Application中交给dagger2来完成初始化&lt;/h2&gt;&lt;p&gt;Dagger会处理我们的注解，为components生成实现并重命名加上“Dagger”前缀。&lt;/p&gt;
&lt;p&gt;MyApplication.java&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 初始化依赖加载器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private void initInjector()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		appComponent = DaggerAppComponent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.builder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.apiModule(new ApiModule())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.greenDaoModule(new GreenDaoModule(this))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public AppComponent getAppComponent()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return  appComponent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们现在可以利用get方法获取创建的component，然后调用inject()方法将BasePresenter作为参数传进去，这样就完成了绑定BasePresenter依赖。&lt;/p&gt;
&lt;h2 id=&quot;创建BasePresenter&quot;&gt;&lt;a href=&quot;#创建BasePresenter&quot; class=&quot;headerlink&quot; title=&quot;创建BasePresenter&quot;&gt;&lt;/a&gt;创建BasePresenter&lt;/h2&gt;&lt;p&gt;BasePresenter的构造函数&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public BasePresenter(BaseApp baseApp)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    baseApp.getAppComponent().inject(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;BasePresenter中使用依赖&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class BasePresenter &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Inject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DaoSession daoSession;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 自定义http请求任务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Inject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public HttpTask httpTask;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public BasePresenter(BaseApp baseApp)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        baseApp.getAppComponent().inject(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样我们新建一个Presenter继承自BasePresenter，执行inject绑定，就直接可以使用Application提供的依赖来实例化对象了，而且这些实例都是singlton模式，生命周期等同于Application。&lt;br&gt;我们直接可以使用DaoSession来完成sql操作了。&lt;/p&gt;
&lt;h2 id=&quot;继承Presenter&quot;&gt;&lt;a href=&quot;#继承Presenter&quot; class=&quot;headerlink&quot; title=&quot;继承Presenter&quot;&gt;&lt;/a&gt;继承Presenter&lt;/h2&gt;&lt;p&gt;UserReguPresenter类继承自BasePresenter类，testLog（）方法来测试数据库的操作&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class UserReguPresenter  extends BasePresenter&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private UserReguActivity userReguActivity;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public UserReguPresenter(UserReguActivity userReguActivity) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super((BaseApp) userReguActivity.getApplication());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.userReguActivity = userReguActivity;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; public void testLog()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Logger.Debug(&amp;quot;调用了presenter的测试&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//new一个实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RegularHoldInfo regularHoldInfo = new RegularHoldInfo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        regularHoldInfo.setAmount(100.00);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        regularHoldInfo.setCcsId(110);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//执行sql inset操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        daoSession.getRegularHoldInfoDao().insert(regularHoldInfo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//执行sql query操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Query query = daoSession.getRegularHoldInfoDao()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .queryBuilder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .where(RegularHoldInfoDao.Properties.CcsId.eq(&amp;quot;110&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       List&amp;lt;RegularHoldInfo&amp;gt;  list = (List&amp;lt;RegularHoldInfo&amp;gt;)query.list();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (list.size()&amp;gt;0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Logger.Debug(&amp;quot;查询结果：&amp;quot;+list.get(0).getAmount());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;p&gt;泡在网上的日子 &lt;a href=&quot;http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0519/2892.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;详解Dagger2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/finddreams/article/details/50849385&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于Retrofit2.0+RxJava+Dragger2实现不一样的Android网络构架搭建&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/c2feb21064bb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger2使用&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;dagger2&quot;&gt;&lt;a href=&quot;#dagger2&quot; class=&quot;headerlink&quot; title=&quot;dagger2&quot;&gt;&lt;/a&gt;dagger2&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://google.github.io/dagger/&quot; target=&quot;
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android最佳实践" scheme="http://hammercui.github.io/tags/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>android基础：多渠道打包和代码混淆</title>
    <link href="http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85%E5%92%8C%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/"/>
    <id>http://hammercui.github.io/post/android基础：多渠道打包和代码混淆/</id>
    <published>2016-06-15T03:48:11.000Z</published>
    <updated>2016-06-16T07:58:04.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;多渠道打包&quot;&gt;&lt;a href=&quot;#多渠道打包&quot; class=&quot;headerlink&quot; title=&quot;多渠道打包&quot;&gt;&lt;/a&gt;多渠道打包&lt;/h1&gt;&lt;h2 id=&quot;AndroidManifest-xml文件解析&quot;&gt;&lt;a href=&quot;#AndroidManifest-xml文件解析&quot; class=&quot;headerlink&quot; title=&quot;AndroidManifest.xml文件解析&quot;&gt;&lt;/a&gt;AndroidManifest.xml文件解析&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;补充知识&lt;br&gt;AndroidManifest.xml 是每个android程序中必须的文件。它位于整个项目的根目录，描述了package中暴露的组件（activities, services, 等等），他们各自的实现类，各种能被处理的数据和启动位置。 除了能声明程序中的Activities, ContentProviders, Services, 和Intent Receivers,还能指定permissions和instrumentation（安全控制和测试）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-lt-meta-adata-gt&quot;&gt;&lt;a href=&quot;#1-lt-meta-adata-gt&quot; class=&quot;headerlink&quot; title=&quot;1 &amp;lt;meta-adata&amp;gt;&quot;&gt;&lt;/a&gt;1 &lt;code&gt;&amp;lt;meta-adata&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta-data android:name=&amp;quot;string&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           android:resource=&amp;quot;resource specification&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           android:value=&amp;quot;string&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;被包含于&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;activity&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;activity-alias&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;service&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;receiver&amp;gt;&lt;/code&gt;&lt;br&gt;四个元素中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;br&gt;这个元素用name-value对的格式给其父组件提供任意可选的数据。&lt;br&gt;一个组件元素能够包含任意多个&lt;code&gt;&amp;lt;meta-data&amp;gt;&lt;/code&gt;子元素，所有这些元素中定义的值会被收集到一个&lt;a href=&quot;http://blog.csdn.net/randyjiawenjie/article/details/6651437&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bundle&lt;/a&gt;对象中，并且提供给组件的&lt;code&gt;PackageItemInfo.metaData&lt;/code&gt;属性字段。&lt;br&gt;通常值是通过其value属性来指定的。但是，也可以使用resource属性来代替，把一个资源ID跟值进行关联。&lt;/p&gt;
&lt;p&gt;例如，下面的代码就是把存储在@string/kangaroo资源中的值跟”zoo”名称进行关联：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta-data android:name=&amp;quot;zoo&amp;quot; android:value=&amp;quot;@string/kangaroo&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另一个方面，使用resource属性会给zoo分配一个数字资源ID，而不是保存在资源中的值。例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta-data android:name=&amp;quot;zoo&amp;quot; android:resource=&amp;quot;@string/kangaroo&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;要避免使用多个独立的&lt;meta-data&gt;实体来提供相关的数据。相反如果有复杂的数据要跟组件关联，那么把数据作为资源来保存，并使用resource属性，把相关的资源ID通知给组件。&lt;/meta-data&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;属性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;android:name&lt;/code&gt;&lt;br&gt;针对项目的一个唯一名称。使用Java样式的命名规则，可以确保名称的唯一性，例如：&lt;code&gt;com.example.project.activity.fred&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;android:resource&lt;/code&gt;&lt;br&gt;这个属性定义了一个要引用的资源。资源的ID会跟这个项目进行关联。通过Bundle.getInt()方法能够从meta-data的Bundle对象中获取这个ID。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;android:value&lt;/code&gt;&lt;br&gt;这个属性会给这个项目分配一个值。下表列出了可能分配的数据的数据类型，以及获取这些数据的方法：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;多渠道打包-1&quot;&gt;&lt;a href=&quot;#多渠道打包-1&quot; class=&quot;headerlink&quot; title=&quot;多渠道打包&quot;&gt;&lt;/a&gt;多渠道打包&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;以友盟统计为例,在AndroidManifest.xml里面会有&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta-data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:name=&amp;quot;UMENG_CHANNEL&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:value=&amp;quot;Channel_ID&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Channel_ID就是渠道标示,我们的目标就是在编译的时候这个值能够自动变化。&lt;/p&gt;
&lt;h3 id=&quot;1-在AndroidManifest-xml里配置PlaceHolder&quot;&gt;&lt;a href=&quot;#1-在AndroidManifest-xml里配置PlaceHolder&quot; class=&quot;headerlink&quot; title=&quot;1 在AndroidManifest.xml里配置PlaceHolder&quot;&gt;&lt;/a&gt;1 在AndroidManifest.xml里配置PlaceHolder&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta-data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:name=&amp;quot;UMENG_CHANNEL&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:value=&amp;quot;$&amp;#123;UMENG_CHANNEL_VALUE&amp;#125;&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;${UMENG_CHANNEL_VALUE}这是个引用，具体值在gradle中配置&lt;/p&gt;
&lt;h3 id=&quot;2-在build-gradle设置productFlavors&quot;&gt;&lt;a href=&quot;#2-在build-gradle设置productFlavors&quot; class=&quot;headerlink&quot; title=&quot;2 在build.gradle设置productFlavors&quot;&gt;&lt;/a&gt;2 在build.gradle设置productFlavors&lt;/h3&gt;&lt;p&gt;首先配置UMENG_CHANNEL_VALUE的默认值&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defaultConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ···&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	manifestPlaceholders = [UMENG_CHANNEL_VALUE: &amp;quot;channel_name&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ···&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后配置不同的渠道id&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    productFlavors &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xiaomi &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &amp;quot;xiaomi&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _360 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &amp;quot;_360&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        baidu &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &amp;quot;baidu&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wandoujia &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &amp;quot;wandoujia&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更简洁的写法，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 友盟多渠道打包&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    productFlavors &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wandoujia &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c360 &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        baidu &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xiaomi &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tencent &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        taobao &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    productFlavors.all &amp;#123; flavor -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在签名配置完成后，就可以使用命令行打包了&lt;/p&gt;
&lt;h2 id=&quot;gradle命令行打包&quot;&gt;&lt;a href=&quot;#gradle命令行打包&quot; class=&quot;headerlink&quot; title=&quot;gradle命令行打包&quot;&gt;&lt;/a&gt;gradle命令行打包&lt;/h2&gt;&lt;h3 id=&quot;1-使用gradle命令配置签名&quot;&gt;&lt;a href=&quot;#1-使用gradle命令配置签名&quot; class=&quot;headerlink&quot; title=&quot;1 使用gradle命令配置签名&quot;&gt;&lt;/a&gt;1 使用gradle命令配置签名&lt;/h3&gt;&lt;p&gt;首先在app的build.gradle文件配置要签名的keystore文件&lt;/p&gt;
&lt;p&gt;为了不暴露密码，不直接在signingConfigs中配置密码，需要在控制台输出&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def releaseTime() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return new Date().format(&amp;quot;yyyy-MM-dd&amp;quot;, TimeZone.getTimeZone(&amp;quot;UTC&amp;quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lintOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        abortOnError false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	signingConfigs &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		debug &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // No debug config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//release版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		release&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           storeFile file(&amp;apos;../keystore文件名&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			keyAlias &amp;apos;asar&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			storePassword System.console().readLine(&amp;quot;\nKeystore password: &amp;quot;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			keyPassword System.console().readLine(&amp;quot;\nKey password: &amp;quot;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	buildTypes &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		debug &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 显示Log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            buildConfigField &amp;quot;boolean&amp;quot;, &amp;quot;LOG_DEBUG&amp;quot;, &amp;quot;true&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            versionNameSuffix &amp;quot;-debug&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minifyEnabled false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            zipAlignEnabled false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            shrinkResources false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            signingConfig signingConfigs.debug&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    release &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	         ...  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// 不显示Log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            buildConfigField &amp;quot;boolean&amp;quot;, &amp;quot;LOG_DEBUG&amp;quot;, &amp;quot;false&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			//混淆&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			minifyEnabled true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			//zipAlgn优化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			zipAlignEnabled true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			//移除无用的resource文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			shrinkResources true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			//加载默认的混淆配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			//签名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        signingConfig signingConfigs.release &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			//配置输出的apk文件名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 			applicationVariants.all &amp;#123; variant -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                variant.outputs.each &amp;#123; output -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    def outputFile = output.outputFile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    if (outputFile != null &amp;amp;&amp;amp; outputFile.name.endsWith(&amp;apos;.apk&amp;apos;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    	// 输出apk名称为zlot_v1.0_2015-01-15_wandoujia.apk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        def fileName = &amp;quot;zlot_v$&amp;#123;defaultConfig.versionName&amp;#125;_$&amp;#123;releaseTime()&amp;#125;_$&amp;#123;variant.productFlavors[0].name&amp;#125;.apk&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        output.outputFile = new File(outputFile.parent, fileName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	   &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-使用命令行打包&quot;&gt;&lt;a href=&quot;#2-使用命令行打包&quot; class=&quot;headerlink&quot; title=&quot;2 使用命令行打包&quot;&gt;&lt;/a&gt;2 使用命令行打包&lt;/h2&gt;&lt;p&gt;1 view-&amp;gt;ToolWindows-&amp;gt;Terminal打开命令行&lt;br&gt;2 在命令行输入&lt;code&gt;gradlew -v&lt;/code&gt; ，如果第一次会执行下载gradle，记得翻墙，不然会慢到崩溃&lt;br&gt;3 执行&lt;code&gt;gradlew clean&lt;/code&gt;,等待时间会比较长&lt;br&gt;4 执行&lt;code&gt;gradle build&lt;/code&gt;，开始编译，成功后&lt;code&gt;zlot\build\outputs\apk&lt;/code&gt;目录会有编译后的apk,&lt;br&gt;这时编译的apk包括debug版本，release版本，特别慢&lt;br&gt;补充&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gradlew assembleRelease&lt;/code&gt; ：只编译并打Release的包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gradlew assembleDebug&lt;/code&gt;   :只编译并打包debug版本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外 assemble 还能和 Product Flavor 结合创建新的任务，其实 assemble 是和 Build Variants 一起结合使用的，而Build Variants = Build Type + Product Flavor ， 举个例子大家就明白了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gradlew assembleWandoujiaRelease&lt;/code&gt;只打包wandoujia渠道的release包&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-比命令行更简单的打包方式&quot;&gt;&lt;a href=&quot;#3-比命令行更简单的打包方式&quot; class=&quot;headerlink&quot; title=&quot;3 比命令行更简单的打包方式&quot;&gt;&lt;/a&gt;3 比命令行更简单的打包方式&lt;/h3&gt;&lt;p&gt;打开androidStudiode gradle面板，会发现多了很多任务，&lt;br&gt;&lt;img src=&quot;http://xyzphoto.qiniudn.com/wordpress_20_QQ%E6%88%AA%E5%9B%BE20141117162914.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后直接双击任务生成apk&lt;/p&gt;
&lt;h2 id=&quot;错误处理&quot;&gt;&lt;a href=&quot;#错误处理&quot; class=&quot;headerlink&quot; title=&quot;错误处理&quot;&gt;&lt;/a&gt;错误处理&lt;/h2&gt;&lt;p&gt;当build faile时，找不到错误的原因，可以执行&lt;code&gt;gradlew check&lt;/code&gt;进行检测，一般会给出错误原因，&lt;br&gt;比如&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ndroid &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lintOptions &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        abortOnError false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Try:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;意义是让我们关闭lint检查，因为开启的话，有任何的错误或者警告提示，都会终止构建&lt;/p&gt;
&lt;h1 id=&quot;代码混淆&quot;&gt;&lt;a href=&quot;#代码混淆&quot; class=&quot;headerlink&quot; title=&quot;代码混淆&quot;&gt;&lt;/a&gt;代码混淆&lt;/h1&gt;&lt;h1 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/shineflowers/article/details/45042485&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 使用Android Studio + Gradle 或 命令行 进行apk签名打包&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/ljchlx/article/details/43059467&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Studio系列教程六–Gradle多渠道打包&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://my.oschina.net/aibenben/blog/370985&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android studio 使用心得(四)—android studio 多渠道打包(二)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/0616--ataozhijia/p/4203997.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[Android Studio] Android studio 多渠道打包(超简洁版)&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多渠道打包&quot;&gt;&lt;a href=&quot;#多渠道打包&quot; class=&quot;headerlink&quot; title=&quot;多渠道打包&quot;&gt;&lt;/a&gt;多渠道打包&lt;/h1&gt;&lt;h2 id=&quot;AndroidManifest-xml文件解析&quot;&gt;&lt;a href=&quot;#AndroidManifest-xm
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android" scheme="http://hammercui.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android最佳实践9：greenDao在android studio中的使用</title>
    <link href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B59%EF%BC%9AgreenDao%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://hammercui.github.io/post/android最佳实践9：greenDao的使用/</id>
    <published>2016-06-13T07:53:06.000Z</published>
    <updated>2016-06-17T07:00:32.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;greenDao是一个将对象映射到 SQLite 数据库中的轻量且快速的 ORM 解决方案，性能很不错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://static.codeceo.com/images/2015/07/4cb11fd0257a668c15b9deda53cb65fb.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;greenDao的特点&quot;&gt;&lt;a href=&quot;#greenDao的特点&quot; class=&quot;headerlink&quot; title=&quot;greenDao的特点&quot;&gt;&lt;/a&gt;greenDao的特点&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;精简&lt;/li&gt;
&lt;li&gt;性能最大化&lt;/li&gt;
&lt;li&gt;不使用注解，使用code generate&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;android-studio中的使用&quot;&gt;&lt;a href=&quot;#android-studio中的使用&quot; class=&quot;headerlink&quot; title=&quot;android studio中的使用&quot;&gt;&lt;/a&gt;android studio中的使用&lt;/h1&gt;&lt;h2 id=&quot;1-android工程配置-greendao-generator-模块&quot;&gt;&lt;a href=&quot;#1-android工程配置-greendao-generator-模块&quot; class=&quot;headerlink&quot; title=&quot;1 android工程配置[greendao generator]模块&quot;&gt;&lt;/a&gt;1 android工程配置[greendao generator]模块&lt;/h2&gt;&lt;p&gt;1 .src/main目录新建一个与java目录同层的&lt;code&gt;java-gen&lt;/code&gt;目录，用于存放由greenDao生成的Bean,Dao,DaoMaster,DaoSession类&lt;/p&gt;
&lt;p&gt;2 app的build.gradle添加sourceSets与dependencies&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;buildTypes&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; sourceSets &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        main&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            java.srcDirs = [&amp;apos;src/main/java&amp;apos;,src/main/java-gen]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; compile &amp;apos;org.greenrobot:greendao:2.2.1&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;org.greenrobot:greendao-generator:2.2.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-新建greenDao-generator模块，纯java工程&quot;&gt;&lt;a href=&quot;#2-新建greenDao-generator模块，纯java工程&quot; class=&quot;headerlink&quot; title=&quot;2 新建greenDao generator模块，纯java工程&quot;&gt;&lt;/a&gt;2 新建greenDao generator模块，纯java工程&lt;/h2&gt;&lt;p&gt;1 file-&amp;gt;new-&amp;gt;new module-&amp;gt;java Library-&amp;gt;填写包名类名-&amp;gt;finish&lt;/p&gt;
&lt;p&gt;然后在新工程的build.gradle中添加&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compile &amp;apos;org.greenrobot:greendao-generator:2.2.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2 编写【ExampleDaoGenerator】类，注意： 我们的 Java 工程只有一个类，它的内容决定了「GreenDao Generator」的输出，你可以在这个类中通过对象、关系等创建数据库结构，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class ExampleDaoGenerator &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String args[])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 正如你所见的，你创建了一个用于添加实体（Entity）的模式（Schema）对象。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 两个参数分别代表：数据库版本号与自动生成代码的包路径。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Schema schema = new Schema(1, &amp;quot;com.hammer.example&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //当然，如果你愿意，你也可以分别指定生成的 Bean 与 DAO 类所在的目录，只要如下所示：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 一旦你拥有了一个 Schema 对象后，你便可以使用它添加实体（Entities）了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addNote(schema);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 最后我们将使用 DAOGenerator 类的 generateAll() 方法自动生成代码，此处你需要根据自己的情况更改输出目录（既之前创建的 java-gen)。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 其实，输出目录的路径可以在 build.gradle 中设置，有兴趣的朋友可以自行搜索，这里就不再详解。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            new DaoGenerator().generateAll(schema, &amp;quot;E:/androidSpace/android-lesson/BaseLesson/src/main/java-gen&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param schema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private static void addNote(Schema schema) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 一个实体（类）就关联到数据库中的一张表，此处表名为「Note」（既类名）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Entity note = schema.addEntity(&amp;quot;Note&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 你也可以重新给表命名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // note.setTableName(&amp;quot;NODE&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // greenDAO 会自动根据实体类的属性值来创建表字段，并赋予默认值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 接下来你便可以设置表中的字段：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        note.addIdProperty();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        note.addStringProperty(&amp;quot;text&amp;quot;).notNull();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 与在 Java 中使用驼峰命名法不同，默认数据库中的命名是使用大写和下划线来分割单词的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // For example, a property called “creationDate” will become a database column “CREATION_DATE”.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        note.addStringProperty(&amp;quot;comment&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        note.addDateProperty(&amp;quot;date&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3 执行run main函数，生成如图4个文件&lt;br&gt;&lt;img src=&quot;http://7xrf0l.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160614113731.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;在android工程进行数据库操作&quot;&gt;&lt;a href=&quot;#在android工程进行数据库操作&quot; class=&quot;headerlink&quot; title=&quot;在android工程进行数据库操作&quot;&gt;&lt;/a&gt;在android工程进行数据库操作&lt;/h1&gt;&lt;h2 id=&quot;1-考虑到application的生命周期，把DaoMaster跟DaoSession的实例放到application中，避免重复创建&quot;&gt;&lt;a href=&quot;#1-考虑到application的生命周期，把DaoMaster跟DaoSession的实例放到application中，避免重复创建&quot; class=&quot;headerlink&quot; title=&quot;1 考虑到application的生命周期，把DaoMaster跟DaoSession的实例放到application中，避免重复创建&quot;&gt;&lt;/a&gt;1 考虑到application的生命周期，把DaoMaster跟DaoSession的实例放到application中，避免重复创建&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public  DaoMaster getDaoMaster(Context context)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (daoMaster == null)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            daoMaster = new DaoMaster(getSQLDB(context));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return daoMaster;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public SQLiteDatabase getSQLDB(Context context)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (sqlDB == null)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            DaoMaster.OpenHelper helper = new DaoMaster.DevOpenHelper(context, &amp;quot;zlot-db&amp;quot;, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sqlDB = helper.getWritableDatabase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return  sqlDB;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public DaoSession getDaoSession(Context context)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (daoSession == null)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (daoMaster == null)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                daoMaster = getDaoMaster(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            daoSession = daoMaster.newSession();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return daoSession;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-考虑到松耦合性，新增一个Dao的中间层，用来切换不同的Dao实现&quot;&gt;&lt;a href=&quot;#2-考虑到松耦合性，新增一个Dao的中间层，用来切换不同的Dao实现&quot; class=&quot;headerlink&quot; title=&quot;2 考虑到松耦合性，新增一个Dao的中间层，用来切换不同的Dao实现&quot;&gt;&lt;/a&gt;2 考虑到松耦合性，新增一个Dao的中间层，用来切换不同的Dao实现&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class NoteDaoMiddle &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private NoteDao noteDao;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private ILessonSixActvity lessonSixActvity;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public  ArrayList&amp;lt;Note&amp;gt; notes = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public NoteDaoMiddle(ILessonSixActvity lessonSixActvity, DaoSession daoSession)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.lessonSixActvity = lessonSixActvity;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.noteDao = daoSession.getNoteDao();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void add(Note note)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Observable.create(subscriber-&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            noteDao.insert(note);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            notes.add(note);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            subscriber.onCompleted();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;).subscribeOn(Schedulers.io()) //指定 subscribe() 发生在 IO 线程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .observeOn(AndroidSchedulers.mainThread()) //指定 Subscriber 的回调发生在主线程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .subscribe(getUpdateSubScriber());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void search(String title)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Observable.create(subscriber-&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //为空&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (TextUtils.isEmpty(title))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Query 类代表了一个可以被重复执行的查询&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Query&amp;lt;Note&amp;gt; query = noteDao.queryBuilder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .orderAsc(NoteDao.Properties.Date)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //      查询结果以 List 返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                notes = (ArrayList&amp;lt;Note&amp;gt;) query.list();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Query query = noteDao.queryBuilder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .where(NoteDao.Properties.Text.eq(title))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .orderAsc(NoteDao.Properties.Date)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                notes = (ArrayList&amp;lt;Note&amp;gt;) query.list();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 在 QueryBuilder 类中内置两个 Flag 用于方便输出执行的 SQL 语句与传递参数的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            QueryBuilder.LOG_SQL = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            QueryBuilder.LOG_VALUES = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            subscriber.onCompleted();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .subscribeOn(Schedulers.io()) //指定 subscribe() 发生在 IO 线程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .observeOn(AndroidSchedulers.mainThread()) //指定 Subscriber 的回调发生在主线程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .subscribe(getUpdateSubScriber());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private Subscriber&amp;lt;Object&amp;gt; getUpdateSubScriber()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return  new Subscriber&amp;lt;Object&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public void onCompleted() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                lessonSixActvity.onUpdateList(notes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                LogUtil.Debug(&amp;quot;onCompleted&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public void onError(Throwable e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                LogUtil.Debug(&amp;quot;onError:&amp;quot;+e.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public void onNext(Object o) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-响应view层的增删查改操作&quot;&gt;&lt;a href=&quot;#3-响应view层的增删查改操作&quot; class=&quot;headerlink&quot; title=&quot;3 响应view层的增删查改操作&quot;&gt;&lt;/a&gt;3 响应view层的增删查改操作&lt;/h2&gt;&lt;p&gt;新建NoteDaoMiddle实例&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   protected void onCreate(@Nullable Bundle savedInstanceState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       super.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       daoSession = MyApplication.getIns().getDaoSession(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       noteDaoMiddle = new NoteDaoMiddle(this,daoSession);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;响应add search按钮&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private void addNote()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //如果新增为空，弹出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       if (TextUtils.isEmpty(editText.getText()))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Toast.makeText(this,&amp;quot;add不能为空&amp;quot;,Toast.LENGTH_SHORT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       // 插入操作，简单到只要你创建一个 Java 对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       Note note = new Note(null, noteText, comment, new Date());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       noteDaoMiddle.add(note);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private void search(String title) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       noteDaoMiddle.search(title);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过回调或者接口响应查询结果,并通知listview刷新视图&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onUpdateList(ArrayList&amp;lt;Note&amp;gt; notes) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sixAdapter.setData(notes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sixAdapter.notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.codeceo.com/article/android-orm-greendao-usage.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android ORM 框架 greenDAO 使用经验总结&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;greenDao是一个将对象映射到 SQLite 数据库中的轻量且快速的 ORM 解决方案，性能很不错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://static.codeceo.com/images/2015/07
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android最佳实践" scheme="http://hammercui.github.io/tags/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>android基础：工具类</title>
    <link href="http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://hammercui.github.io/post/android基础：工具类/</id>
    <published>2016-06-12T14:25:20.000Z</published>
    <updated>2016-06-15T09:07:38.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要总结下android常用的工具类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;TextUtils类，处理字符串&quot;&gt;&lt;a href=&quot;#TextUtils类，处理字符串&quot; class=&quot;headerlink&quot; title=&quot;TextUtils类，处理字符串&quot;&gt;&lt;/a&gt;TextUtils类，处理字符串&lt;/h1&gt;&lt;p&gt;&lt;code&gt;android.text.TextUtils&lt;/code&gt;这个类有以下功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public static boolean isEmpty(@Nullable CharSequence str)&lt;/code&gt;这个方法判断字符串非null且非空，在对字符串进行判断时可以不必if(str !=null &amp;amp;&amp;amp; str.length() &amp;gt; 0)这样判断。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public static CharSequence concat(CharSequence... text)&lt;/code&gt; 字符串连接。有很多字符串，你还在用＋拼接或自己new 一个StringBuffer\StringBuilder么？其实这个方法已经帮我们做好了，用StringBuilder实现，进行字符串拼接时可以考虑使用这个方法。而且支持SpannableString。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public static boolean isDigitsOnly(CharSequence str)&lt;/code&gt; 判断所给的字符串是否只有数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public static boolean equals(CharSequence a, CharSequence b)&lt;/code&gt; 判断两个字符串对象的内容是否相等，内部进行了非null判断&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public static String htmlEncode(String s)&lt;/code&gt;将html代码中的特殊字符进行转码处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;android-text-format-DateUtils-日期格式化工具&quot;&gt;&lt;a href=&quot;#android-text-format-DateUtils-日期格式化工具&quot; class=&quot;headerlink&quot; title=&quot;android.text.format.DateUtils 日期格式化工具&quot;&gt;&lt;/a&gt;android.text.format.DateUtils 日期格式化工具&lt;/h1&gt;&lt;h1 id=&quot;android-webkit-URLUtil-URI判断工具类&quot;&gt;&lt;a href=&quot;#android-webkit-URLUtil-URI判断工具类&quot; class=&quot;headerlink&quot; title=&quot;android.webkit.URLUtil URI判断工具类&quot;&gt;&lt;/a&gt;android.webkit.URLUtil URI判断工具类&lt;/h1&gt;&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;[Android快速开发系列 10个常用工具类]（&lt;a href=&quot;http://blog.csdn.net/lmj623565791/article/details/38965311）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/lmj623565791/article/details/38965311）&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要总结下android常用的工具类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;TextUtils类，处理字符串&quot;&gt;&lt;a href=&quot;#TextUtils类，处理字符串&quot; class=&quot;headerlink&quot; title=&quot;TextU
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android" scheme="http://hammercui.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>直播的相关技术</title>
    <link href="http://hammercui.github.io/post/%E7%9B%B4%E6%92%AD%E7%9A%84%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/"/>
    <id>http://hammercui.github.io/post/直播的相关技术/</id>
    <published>2016-06-10T12:59:26.000Z</published>
    <updated>2016-06-11T08:55:52.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;重要从四点来说直播的相关技术&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;服务器，云存储&lt;/li&gt;
&lt;li&gt;手机端推流，主播&lt;/li&gt;
&lt;li&gt;手机端拉流，观众&lt;/li&gt;
&lt;li&gt;互动sdk，比如打赏，弹幕&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;服务器&quot;&gt;&lt;a href=&quot;#服务器&quot; class=&quot;headerlink&quot; title=&quot;服务器&quot;&gt;&lt;/a&gt;服务器&lt;/h1&gt;&lt;p&gt;流媒体服务器就是p2p服务器&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般自建流媒体服务器平比较复杂，维护也麻烦，都选择现成的云存储解决方案&lt;br&gt;技术关键字&lt;code&gt;rtmp&lt;/code&gt;推流，&lt;code&gt;hls&lt;/code&gt;拉流&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上行，就是数据上传，一般有&lt;br&gt;RTMP，HLS推流&lt;/p&gt;
&lt;p&gt;下行，播放，一般有&lt;br&gt;RTMP、HLS和HTTP（FLV）协议&lt;/p&gt;
&lt;h2 id=&quot;综述&quot;&gt;&lt;a href=&quot;#综述&quot; class=&quot;headerlink&quot; title=&quot;综述&quot;&gt;&lt;/a&gt;综述&lt;/h2&gt;&lt;p&gt;RTMP,RTSP,HLS都是流媒体协议，如果要开发一套准实时的手机音视频直播系统，需要支持iphone，android，windows phone等多款手机，最好使用hls协议，这个时候客户端播放的是切割的ts文件，它的延迟取决于切片的大小。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rtmp和hls并存：rtmp一般用于pc-flash播放直播，而hls用于移动端播放&lt;/li&gt;
&lt;li&gt;RTMP本质上是流协议，实时性高，RTMP的实时性在3秒之内&lt;/li&gt;
&lt;li&gt;hls是apple搞出来的协议，实时性在3s左右， Apple 为了提高流播效率开发的技术，特点是将流媒体切分为若干 TS 片段（比如每10秒一段），然后通过一个扩展的 m3u 列表文件将这些 TS 片段集中起来供客户端播放器接收。比mp4适合做直播技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ossrs/srs/wiki/v1_CN_RTMP.PK.HTTP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;腾讯云视频解决方案，全方向&quot;&gt;&lt;a href=&quot;#腾讯云视频解决方案，全方向&quot; class=&quot;headerlink&quot; title=&quot;腾讯云视频解决方案，全方向&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.qcloud.com/solution/video.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯云视频解决方案，全方向&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最全的解决方案，包括服务器，客户端的sdk&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代表商&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;龙珠直播&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提供游戏直播，美女主播解决方案，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直播提供HLS拉流/RTMP推流接入能力，快速接入游戏主播摄像头、游戏桌面、专业视频源等，并行进快速下发；通过500+CDN节点快速触及玩家；低至2秒延迟；&lt;/li&gt;
&lt;li&gt;互动直播通过双向SDK，提供400ms超低延迟的实时互动能力，提供游戏直播场景中的互动能力；下行也可通过标准HLS下发进行单向直播，无需安装SDK；&lt;/li&gt;
&lt;li&gt;提供推流端口，播放端的sdk&lt;br&gt;架构如图&lt;br&gt;&lt;img src=&quot;https://qzonestyle.gtimg.cn/aoi/sola/20151228190527_8KQCd9MwEL.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;网易视频云，全方向&quot;&gt;&lt;a href=&quot;#网易视频云，全方向&quot; class=&quot;headerlink&quot; title=&quot;网易视频云，全方向&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://vcloud.163.com/live.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网易视频云，全方向&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;解决方案也很全，包括服务器，客户端的sdk，贵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代表商&lt;br&gt;BoBo美女主播&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供推流Android SDK， iOS SDK，Windows SDK&lt;/li&gt;
&lt;li&gt;提供播放器Android SDK， iOS SDK&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;乐视云方案，手机方向&quot;&gt;&lt;a href=&quot;#乐视云方案，手机方向&quot; class=&quot;headerlink&quot; title=&quot;乐视云方案，手机方向&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.lecloud.com/mobile.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;乐视云方案，手机方向&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;产品架构图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i3.letvimg.com/lc05_lecloud/201604/19/20/12/process.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;阿里云直播-pc方向&quot;&gt;&lt;a href=&quot;#阿里云直播-pc方向&quot; class=&quot;headerlink&quot; title=&quot;阿里云直播,pc方向&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.aliyun.com/solution/media/live?spm=5176.8009263.277601.3.j9Hr2d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阿里云直播,pc方向&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;产品架构图&lt;br&gt;&lt;img src=&quot;https://img.alicdn.com/tps/i4/TB1yKnMIpXXXXb5XVXXyEWcOpXX-612-454.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h1&gt;&lt;p&gt;手机端推流，主要就是链接服务器，上传ts文件碎片&lt;/p&gt;
&lt;p&gt;手机端拉流，主要就是下载ts文件碎片，播放的问题&lt;/p&gt;
&lt;p&gt;互动sdk,参考聊天，弹幕类，主要是udp技术。&lt;/p&gt;
&lt;p&gt;付费扣费sdk,主要是http技术&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;重要从四点来说直播的相关技术&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;服务器，云存储&lt;/li&gt;
&lt;li&gt;手机端推流，主播&lt;/li&gt;
&lt;li&gt;手机端拉流，观众&lt;/li&gt;
&lt;li&gt;互动sdk，比如打赏，弹幕&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 
    
    </summary>
    
      <category term="技术杂谈" scheme="http://hammercui.github.io/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="技术杂谈" scheme="http://hammercui.github.io/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>android基础：Activity Window View ViewGroup</title>
    <link href="http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9AActivity-Window-View-ViewGroup/"/>
    <id>http://hammercui.github.io/post/android基础：Activity-Window-View-ViewGroup/</id>
    <published>2016-05-30T02:22:08.000Z</published>
    <updated>2016-06-06T10:31:16.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;View与ViewGroup的关系&quot;&gt;&lt;a href=&quot;#View与ViewGroup的关系&quot; class=&quot;headerlink&quot; title=&quot;View与ViewGroup的关系&quot;&gt;&lt;/a&gt;View与ViewGroup的关系&lt;/h1&gt;&lt;p&gt;Android系统中的所有UI类都是建立在View和ViewGroup这两个类的基础上的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有View的子类成为”Widget”&lt;/li&gt;
&lt;li&gt;所有ViewGroup的子类成为”Layout”&lt;/li&gt;
&lt;li&gt;ViewGroup是一种特殊的View&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;View和ViewGroup之间采用了组合设计模式，可以使得“部分-整体”同等对待。ViewGroup作为布局容器类的最上层，布局容器里面又可以有View和ViewGroup&lt;/p&gt;
&lt;p&gt;如下图&lt;br&gt;&lt;img src=&quot;http://hi.csdn.net/attachment/201108/21/0_1313928575W9Q0.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如果viewgroup有一个子view是invisible状态，viewgroup就是invisible状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20140919111037400?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFua2V0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20140919110917937?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFua2V0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20140919111133997?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFua2V0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20140919111154012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFua2V0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Activity与window&quot;&gt;&lt;a href=&quot;#Activity与window&quot; class=&quot;headerlink&quot; title=&quot;Activity与window&quot;&gt;&lt;/a&gt;Activity与window&lt;/h1&gt;&lt;h2 id=&quot;Activity&quot;&gt;&lt;a href=&quot;#Activity&quot; class=&quot;headerlink&quot; title=&quot;Activity&quot;&gt;&lt;/a&gt;Activity&lt;/h2&gt;&lt;p&gt;在Activity中使用LayoutInflater。&lt;br&gt;LayoutInflater是一个用来实例化XML布局文件为View对象的类&lt;br&gt;LayoutInflater.infalte(R.layout.test,null)用来从指定的XML资源中填充一个新的View&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Activity的作用相当于人机交互界面，负责管理跟维护View与手机的操作。比如提供用户处理事件的API，如onKeyEvent, onTouchEvent等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Window&quot;&gt;&lt;a href=&quot;#Window&quot; class=&quot;headerlink&quot; title=&quot;Window&quot;&gt;&lt;/a&gt;Window&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;window是一个抽象类&lt;/li&gt;
&lt;li&gt;当我们调用Acitivity的 setContentView方法的时候实际上是调用的Window对象的setContentView方法，Activity中关于界 面的绘制实际上全是交给Window对象来做的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Activity与Window关系&quot;&gt;&lt;a href=&quot;#Activity与Window关系&quot; class=&quot;headerlink&quot; title=&quot;Activity与Window关系&quot;&gt;&lt;/a&gt;Activity与Window关系&lt;/h2&gt;&lt;p&gt;一个Activity包含了一个Window，Window才是真正代表一个窗口，也就是说Activity可以没有Window，那就相当于是Service了。在ActivityThread中也有控制Service的相关函数或许正好印证了这一点。&lt;br&gt; Activity和Window的第一次邂逅是在ActivityThread调用Activity的attach()函数时。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//[window]:通过PolicyManager创建window,实现callback函数,所以,当window接收到&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//外界状态改变时,会调用activity的方法,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;final void attach(Context context, ActivityThread aThread,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Instrumentation instr, IBinder token, int ident,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Application application, Intent intent, ActivityInfo info,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CharSequence title, Activity parent, String id,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NonConfigurationInstances lastNonConfigurationInstances,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Configuration config, String referrer, IVoiceInteractor voiceInteractor) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mWindow = PolicyManager.makeNewWindow(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //当window接收系统发送给它的IO输入事件时,例如键盘和触摸屏事件,就可以转发给相应的Activity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mWindow.setCallback(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置本地窗口管理器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mWindow.setWindowManager(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mToken, mComponent.flattenToString(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (info.flags &amp;amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 在attach()中，新建一个Window实例作为自己的成员变量，它的类型为PhoneWindow,这是抽象类Window的一个子类。然后设置mWindow的WindowManager。&lt;/p&gt;
&lt;h2 id=&quot;Window-Activity和DecorView&quot;&gt;&lt;a href=&quot;#Window-Activity和DecorView&quot; class=&quot;headerlink&quot; title=&quot;Window,Activity和DecorView&quot;&gt;&lt;/a&gt;Window,Activity和DecorView&lt;/h2&gt;&lt;p&gt;DecorView是FrameLayout的子类，它可以被认为是Android视图树的根节点视图。DecorView作为顶级View，一般情况下它内部包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分（具体情况和Android版本及主体有关），上面的是标题栏，下面的是内容栏。在Activity中通过setContentView所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是content，在代码中可以通过ViewGroup content = （ViewGroup)findViewById(R.android.id.content)来得到content对应的layout。&lt;br&gt; Window中有几个视图相关的比较重要的成员变量如下所示:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mDecor:DecorView的实例，标示Window内部的顶级视图&lt;/li&gt;
&lt;li&gt;mContentParent:setContetView所设置的布局文件就加到这个视图中&lt;/li&gt;
&lt;li&gt;mContentRoot:是DecorView的唯一子视图，内部包含mContentParent,标题栏和状态栏。&lt;br&gt; &lt;br&gt;Activity中不仅持有一个Window实例，还有一个类型为View的mDecor实例。这个实例和Window中的mDecor实例有什么关系呢？它又是什么时候被创建的呢？&lt;br&gt; 二者其实指向同一个对象，这个对象是在Activity调用setContentView时创建的。我们都知道Activity的setContentView实际上是调用了Window的setContentView方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void setContentView(int layoutResID) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mContentParent == null) &amp;#123; //[window]如何没有DecorView,那么就新建一个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        installDecor(); //[window]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mContentParent.removeAllViews();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //[window]第二步,将layout添加到mContentParent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mLayoutInflater.inflate(layoutResID, mContentParent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/u012422440/article/details/51173387&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android视图架构详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/luoshengyang/article/details/8245546&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android应用程序窗口（Activity）的视图对象（View）的创建过程分析&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;View与ViewGroup的关系&quot;&gt;&lt;a href=&quot;#View与ViewGroup的关系&quot; class=&quot;headerlink&quot; title=&quot;View与ViewGroup的关系&quot;&gt;&lt;/a&gt;View与ViewGroup的关系&lt;/h1&gt;&lt;p&gt;Android系统中
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android" scheme="http://hammercui.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android基础：adapter详解</title>
    <link href="http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9Aadapter%E8%AF%A6%E8%A7%A3/"/>
    <id>http://hammercui.github.io/post/android基础：adapter详解/</id>
    <published>2016-05-23T06:15:22.000Z</published>
    <updated>2016-06-14T10:01:30.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;什么是adapter&quot;&gt;&lt;a href=&quot;#什么是adapter&quot; class=&quot;headerlink&quot; title=&quot;什么是adapter&quot;&gt;&lt;/a&gt;什么是adapter&lt;/h1&gt;&lt;p&gt;adapter就是适配器，适配器模式把一个类的接口转换成客户端所期待的另一种接口，从而使原本两个接口不匹配而无法在一起工作的类，能够在一起工作&lt;/p&gt;
&lt;h1 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h1&gt;&lt;p&gt;举个栗子&lt;br&gt;用电源接口做例子，笔记本电脑的电源一般都是接受5V的电压，但是我们生活中的电线电压一般都是220V的输出。这个时候就出现了不匹配的状况，在软件开发中我们称之为接口不兼容，此时就需要适配器来进行一个接口转换。在软件开发中有一句话正好体现了这点：任何问题都可以加一个中间层来解决。这个层我们可以理解为这里的Adapter层，通过这层来进行一个接口转换就达到了兼容的目的。 &lt;/p&gt;
&lt;h1 id=&quot;ListView中的Adapter模式&quot;&gt;&lt;a href=&quot;#ListView中的Adapter模式&quot; class=&quot;headerlink&quot; title=&quot;ListView中的Adapter模式&quot;&gt;&lt;/a&gt;ListView中的Adapter模式&lt;/h1&gt;&lt;p&gt;为什么listview要用adapter呢？我们知道，作为重要的视图元素，listview展示的view千变万化，ListView需要能够显示各式各样的视图，每个人需要的显示效果各不相同，显示的数据类型，数量也不尽相同，那么如何隔离这种变化尤为重要。&lt;/p&gt;
&lt;p&gt;Android的做法是增加一个Adapter层来应对变化，将ListView需要的接口抽象到Adapter对象中，这样只要用户实现了Adapter的接口，ListView就可以按照用户设定的显示效果、数量、数据来显示特定的Item View。 &lt;/p&gt;
&lt;p&gt;通过代理数据集来告知ListView数据的个数( &lt;code&gt;getCount()&lt;/code&gt;函数 )以及每个数据的类型( &lt;code&gt;getItem()&lt;/code&gt;函数 )，最重要的是要解决Item View的输出。Item View千变万化，但终究它都是View类型，Adapter统一将Item View输出为View ( &lt;code&gt;getView()&lt;/code&gt;函数 )，这样就很好的应对了Item View的可变性。&lt;/p&gt;
&lt;h1 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/bboyfeiyu/article/details/43950185&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android源码之ListView的适配器模式&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是adapter&quot;&gt;&lt;a href=&quot;#什么是adapter&quot; class=&quot;headerlink&quot; title=&quot;什么是adapter&quot;&gt;&lt;/a&gt;什么是adapter&lt;/h1&gt;&lt;p&gt;adapter就是适配器，适配器模式把一个类的接口转换成客户端所期待的另一种
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android" scheme="http://hammercui.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android基础：浅析mvc与mvp</title>
    <link href="http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9A%E6%B5%85%E6%9E%90mvc%E4%B8%8Emvp/"/>
    <id>http://hammercui.github.io/post/android基础：浅析mvc与mvp/</id>
    <published>2016-05-20T01:41:08.000Z</published>
    <updated>2016-05-20T10:12:10.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;为什么要使用框架&quot;&gt;&lt;a href=&quot;#为什么要使用框架&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用框架&quot;&gt;&lt;/a&gt;为什么要使用框架&lt;/h1&gt;&lt;p&gt;设计框架的目的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提高开发效率，尤其是协同工作&lt;/li&gt;
&lt;li&gt;业务逻辑的切分，渐进式开发，提高业务的重用性，灵活性&lt;/li&gt;
&lt;li&gt;测试以及问题的定位&lt;/li&gt;
&lt;li&gt;日常的更新与维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h1&gt;&lt;p&gt;经典的框架，view层，model层，Controller层.&lt;br&gt;用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。&lt;/p&gt;
&lt;p&gt;在android中的实践呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;M层：适合的业务逻辑。数据库存取，网络操作，复杂算法，耗时操作&lt;/li&gt;
&lt;li&gt;V层：显示数据&lt;/li&gt;
&lt;li&gt;Contro层：在很多情况下activity会掺和很多Controller的事情，activity负责人机交互界面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举例：&lt;br&gt;Activity读取V视图层的数据（eg.读取当前EditText控件的数据），控制用户输入（eg.EditText控件数据的输入），并向Model发送数据请求（eg.发起网络请求等）。&lt;/p&gt;
&lt;h2 id=&quot;优点：&quot;&gt;&lt;a href=&quot;#优点：&quot; class=&quot;headerlink&quot; title=&quot;优点：&quot;&gt;&lt;/a&gt;优点：&lt;/h2&gt;&lt;p&gt;(1)耦合性低。所谓耦合性就是模块代码之间的关联程度。利用MVC框架使得View（视图）层和Model（模型）层可以很好的分离，这样就达到了解耦的目的，所以耦合性低，减少模块代码之间的相互影响。便于进行单元开发，单元测试&lt;br&gt;(2)可扩展性好。由于耦合性低，添加需求，扩展代码就可以减少修改之前的代码，降低bug的出现率。&lt;br&gt;(3)模块职责划分明确。主要划分层M,V,C三个模块，利于代码的维护。&lt;/p&gt;
&lt;h2 id=&quot;缺点：&quot;&gt;&lt;a href=&quot;#缺点：&quot; class=&quot;headerlink&quot; title=&quot;缺点：&quot;&gt;&lt;/a&gt;缺点：&lt;/h2&gt;&lt;p&gt;Activity中有很多关于视图UI的显示代码，因此View视图和Activity控制器并不是完全分离的，当activity类业务过多的时候，会变得难以管理和维护。&lt;br&gt;尤其是当ui的状态数据，跟持久化的数据混杂在一起，变得极为混乱。&lt;/p&gt;
&lt;h1 id=&quot;MVP&quot;&gt;&lt;a href=&quot;#MVP&quot; class=&quot;headerlink&quot; title=&quot;MVP&quot;&gt;&lt;/a&gt;MVP&lt;/h1&gt;&lt;p&gt;为了解决view层代码过多，引入了这套设计框架。&lt;br&gt;MVP从更早的MVC框架演变过来，与MVC有一定的相似性：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。&lt;br&gt;如下图&lt;br&gt;&lt;img src=&quot;http://assets.tianmaying.com/md-image/ea995e88af236afbd8fdc4906a67e829&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;MVP框架由3部分组成：View负责显示，Presenter负责逻辑处理，Model提供数据。在MVP模式里通常包含3个要素（加上View interface是4个）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View：负责呈现ui，与用户进行交互，如activity fragment&lt;/li&gt;
&lt;li&gt;Model: 负责存储，检索，操作数据&lt;/li&gt;
&lt;li&gt;Presenter：作为view跟model的桥梁，处理交互与数据逻辑。&lt;/li&gt;
&lt;li&gt;View Interface:Presenter中持有的view层接口，负责给view返回消息。降低耦合，方便单元测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h2&gt;&lt;p&gt;1 模型与视图完全分离，我们可以修改视图而不影响模型；&lt;br&gt;2 可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部；&lt;br&gt;3 我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁；&lt;br&gt;4 如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）。&lt;/p&gt;
&lt;h1 id=&quot;两者的区别&quot;&gt;&lt;a href=&quot;#两者的区别&quot; class=&quot;headerlink&quot; title=&quot;两者的区别&quot;&gt;&lt;/a&gt;两者的区别&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://pic001.cnblogs.com/images/2012/1/2012040113391482.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（最主要区别）View与Model并不直接交互，而是通过与Presenter交互来与Model间接交互。而在MVC中View可以与Model直接交互&lt;br&gt;通常View与Presenter是一对一的，但复杂的View可能绑定多个Presenter来处理逻辑。而Controller是基于行为的，并且可以被多个View共享，Controller可以负责决定显示哪个View&lt;br&gt;Presenter与View的交互是通过接口来进行的，更有利于添加单元测试。&lt;/p&gt;
&lt;h1 id=&quot;附赠MVVM知识&quot;&gt;&lt;a href=&quot;#附赠MVVM知识&quot; class=&quot;headerlink&quot; title=&quot;附赠MVVM知识&quot;&gt;&lt;/a&gt;附赠MVVM知识&lt;/h1&gt;&lt;p&gt;MVVM可以算是MVP的升级版，其中的VM是ViewModel的缩写，ViewModel可以理解成是View的数据模型和Presenter的合体，ViewModel和View之间的交互通过Data Binding完成，而Data Binding可以实现双向的交互，这就使得视图和控制层之间的耦合程度进一步降低，关注点分离更为彻底，同时减轻了Activity的压力。&lt;/p&gt;
&lt;p&gt;MVC -&amp;gt; MVP -&amp;gt; MVVM 这几个软件设计模式是一步步演化发展的，MVVM 是从 MVP 的进一步发展与规范，MVP 隔离了MVC中的 M 与 V 的直接联系后，靠 Presenter 来中转，所以使用 MVP 时 P 是直接调用 View 的接口来实现对视图的操作的，这个 View 接口的东西一般来说是 showData、showLoading等等。M 与 V已经隔离了，方便测试了，但代码还不够优雅简洁，所以 MVVM 就弥补了这些缺陷。在 MVVM 中就出现的 Data Binding 这个概念，意思就是 View 接口的 showData 这些实现方法可以不写了，通过 Binding 来实现。&lt;/p&gt;
&lt;p&gt;google官方已经推出了Data Binding库来写声明的layouts文件，并且用最少的代码来绑定你的app逻辑和layouts文件&lt;br&gt;Data Binding库不仅灵活而且广泛兼容- 它是一个support库，因此你可以在所有的Android平台最低能到Android 2.1（API等级7+）上使用它。&lt;/p&gt;
&lt;h2 id=&quot;三者的异同&quot;&gt;&lt;a href=&quot;#三者的异同&quot; class=&quot;headerlink&quot; title=&quot;三者的异同&quot;&gt;&lt;/a&gt;三者的异同&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://assets.tianmaying.com/md-image/bb8f3106230c33063ab53393dfe1876a.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;异&lt;br&gt;三者的差异在于如何粘合View和Model，实现用户的交互操作以及变更通知&lt;/p&gt;
&lt;h1 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.tianmaying.com/tutorial/AndroidMVC&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android App的设计架构：MVC,MVP,MVVM与架构经验谈&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002876984&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Data Binding 用户指南（Android）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/asce1885/article/details/47080085&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android DataBinding：再见Presenter，你好ViewModel！&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么要使用框架&quot;&gt;&lt;a href=&quot;#为什么要使用框架&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用框架&quot;&gt;&lt;/a&gt;为什么要使用框架&lt;/h1&gt;&lt;p&gt;设计框架的目的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提高开发效率，尤其是协同工作&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>android最佳实践10：开源库汇总</title>
    <link href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B510%EF%BC%9A%E5%BC%80%E6%BA%90%E5%BA%93%E6%B1%87%E6%80%BB/"/>
    <id>http://hammercui.github.io/post/android最佳实践10：开源库汇总/</id>
    <published>2016-05-16T01:57:48.000Z</published>
    <updated>2016-06-17T07:01:06.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;第一部分：工具库&quot;&gt;&lt;a href=&quot;#第一部分：工具库&quot; class=&quot;headerlink&quot; title=&quot;第一部分：工具库&quot;&gt;&lt;/a&gt;第一部分：工具库&lt;/h1&gt;&lt;h2 id=&quot;依赖注入库&quot;&gt;&lt;a href=&quot;#依赖注入库&quot; class=&quot;headerlink&quot; title=&quot;依赖注入库&quot;&gt;&lt;/a&gt;依赖注入库&lt;/h2&gt;&lt;h3 id=&quot;dagger：Square公司的明星项目，已被google官方采用&quot;&gt;&lt;a href=&quot;#dagger：Square公司的明星项目，已被google官方采用&quot; class=&quot;headerlink&quot; title=&quot;dagger：Square公司的明星项目，已被google官方采用&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/square/dagger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dagger&lt;/a&gt;：Square公司的明星项目，已被google官方采用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;依赖注入，适用于 Android 和 Java&lt;/li&gt;
&lt;li&gt;在android平台，特别适合mvp架构&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://square.github.io/dagger/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://a.codekk.com/detail/Android/%E6%89%94%E7%89%A9%E7%BA%BF/Dagger%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger 源码解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/c2feb21064bb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger2使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/tiankong1206/article/details/46486401&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MVP+Dagger2+Retrofit实现更清晰的架构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;AndroidAnnotations-Code-Diet&quot;&gt;&lt;a href=&quot;#AndroidAnnotations-Code-Diet&quot; class=&quot;headerlink&quot; title=&quot;AndroidAnnotations(Code Diet)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/excilys/androidannotations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidAnnotations(Code Diet)&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;目前我正在使用的项目，不是很方便，每次要编译时生成Activity的子类_Activity&lt;/li&gt;
&lt;li&gt;特点：(1) 依赖注入：包括 view，extras，系统服务，资源等等&lt;br&gt;(2) 简单的线程模型，通过 annotation 表示方法运行在 ui 线程还是后台线程&lt;br&gt;(3) 事件绑定：通过 annotation 表示 view 的响应事件，不用在写内部类&lt;br&gt;(4) REST 客户端：定义客户端接口，自动生成 REST 请求的实现&lt;br&gt;(5) 没有你想象的复杂：AndroidAnnotations 只是在在编译时生成相应子类&lt;br&gt;(6) 不影响应用性能：仅 50kb，在编译时完成，不会对运行时有性能影响。&lt;br&gt;其他：与 roboguice 的比较：roboguice 通过运行时读取 annotations 进行反射，所以可能影响应用性能，而 AndroidAnnotations 在编译时生成子类，所以对性能没有影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;图片缓存库&quot;&gt;&lt;a href=&quot;#图片缓存库&quot; class=&quot;headerlink&quot; title=&quot;图片缓存库&quot;&gt;&lt;/a&gt;图片缓存库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;picasso&lt;/li&gt;
&lt;li&gt;fresco&lt;/li&gt;
&lt;li&gt;Glide&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;对比&quot;&gt;&lt;a href=&quot;#对比&quot; class=&quot;headerlink&quot; title=&quot;对比&quot;&gt;&lt;/a&gt;对比&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;fresco facebook的明星项目，5.0以下特别流畅，但是包大。亮点是渐进式显示图片&lt;/li&gt;
&lt;li&gt;picasso Square的明星项目，跟okhttp结合最好用，包最小&lt;/li&gt;
&lt;li&gt;Glide是google出品的图片缓存框架&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结，我选择使用Picasso，因为简单易上手。&lt;/p&gt;
&lt;h2 id=&quot;gradle-retrolambda-java7兼容lambda库&quot;&gt;&lt;a href=&quot;#gradle-retrolambda-java7兼容lambda库&quot; class=&quot;headerlink&quot; title=&quot;gradle-retrolambda:java7兼容lambda库&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/evant/gradle-retrolambda&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gradle-retrolambda&lt;/a&gt;:java7兼容lambda库&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B51%EF%BC%9Aretrolambda%E6%A1%86%E6%9E%B6/&quot;&gt;使用教程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;rx-android-感受响应式编程魅力&quot;&gt;&lt;a href=&quot;#rx-android-感受响应式编程魅力&quot; class=&quot;headerlink&quot; title=&quot;rx-android:感受响应式编程魅力&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxAndroid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rx-android&lt;/a&gt;:感受响应式编程魅力&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B52%EF%BC%9Arxjava%E6%A1%86%E6%9E%B6/&quot;&gt;使用教程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Retrofit2-0-最热门的restfull规范网络请求框架&quot;&gt;&lt;a href=&quot;#Retrofit2-0-最热门的restfull规范网络请求框架&quot; class=&quot;headerlink&quot; title=&quot;Retrofit2.0:最热门的restfull规范网络请求框架&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/square/retrofit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit2.0&lt;/a&gt;:最热门的restfull规范网络请求框架&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B53%EF%BC%9Aretrofit%E6%A1%86%E6%9E%B6/&quot;&gt;使用教程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;EventBus：发布-订阅的事件总线&quot;&gt;&lt;a href=&quot;#EventBus：发布-订阅的事件总线&quot; class=&quot;headerlink&quot; title=&quot;EventBus：发布 / 订阅的事件总线&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/greenrobot/EventBus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EventBus&lt;/a&gt;：发布 / 订阅的事件总线&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B55%EF%BC%9AEventBus/&quot;&gt;使用教程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;高版本向低版本兼容库&quot;&gt;&lt;a href=&quot;#高版本向低版本兼容库&quot; class=&quot;headerlink&quot; title=&quot;高版本向低版本兼容库&quot;&gt;&lt;/a&gt;高版本向低版本兼容库&lt;/h2&gt;&lt;h3 id=&quot;nineoldandroids-JakeWharton大神的项目&quot;&gt;&lt;a href=&quot;#nineoldandroids-JakeWharton大神的项目&quot; class=&quot;headerlink&quot; title=&quot;nineoldandroids:JakeWharton大神的项目&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/JakeWharton/NineOldAndroids&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nineoldandroids&lt;/a&gt;:JakeWharton大神的项目&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://a.codekk.com/detail/Android/Mr.Simple/NineOldAnimations%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NineOldAnimations 源码解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nineoldandroids.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;第二部分-ui库&quot;&gt;&lt;a href=&quot;#第二部分-ui库&quot; class=&quot;headerlink&quot; title=&quot;第二部分 ui库&quot;&gt;&lt;/a&gt;第二部分 ui库&lt;/h1&gt;&lt;h2 id=&quot;刷新ui&quot;&gt;&lt;a href=&quot;#刷新ui&quot; class=&quot;headerlink&quot; title=&quot;刷新ui&quot;&gt;&lt;/a&gt;刷新ui&lt;/h2&gt;&lt;h3 id=&quot;BGARefreshLayout-Android-多种下拉刷新效果、上拉加载更多、可配置自定义头部广告位&quot;&gt;&lt;a href=&quot;#BGARefreshLayout-Android-多种下拉刷新效果、上拉加载更多、可配置自定义头部广告位&quot; class=&quot;headerlink&quot; title=&quot;BGARefreshLayout-Android:多种下拉刷新效果、上拉加载更多、可配置自定义头部广告位&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/bingoogolapple/BGARefreshLayout-Android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BGARefreshLayout-Android&lt;/a&gt;:多种下拉刷新效果、上拉加载更多、可配置自定义头部广告位&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/7539fed2c320aecc0d47320586e8c2ee22a2d762/687474703a2f2f37786b39646a2e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f726566726573686c61796f75742f73637265656e73686f74732f6267615f726566726573686c61796f7574322e676966&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目前我正在使用的下拉刷新，上拉加载&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Android-PullToRefresh&quot;&gt;&lt;a href=&quot;#Android-PullToRefresh&quot; class=&quot;headerlink&quot; title=&quot;Android-PullToRefresh&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/chrisbanes/Android-PullToRefresh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-PullToRefresh&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/chrisbanes/Android-PullToRefresh/master/header_graphic.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目前使用最广泛的强大的拉动刷新开源项目，强烈推荐使用&lt;/li&gt;
&lt;li&gt;支持各种控件下拉刷新，ListView、ViewPager、WebView、ExpandableListView、GridView、ScrollView、Horizontal ScrollView、Fragment 上下左右拉动刷新&lt;/li&gt;
&lt;li&gt;APP 示例：新浪微博各个页面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;android-Ultra-Pull-To-Refresh&quot;&gt;&lt;a href=&quot;#android-Ultra-Pull-To-Refresh&quot; class=&quot;headerlink&quot; title=&quot;android-Ultra-Pull-To-Refresh&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-Ultra-Pull-To-Refresh&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;star数目4991的项目，跟上一个刷新控件媲美&lt;/li&gt;
&lt;li&gt;这个继承于 ViewGroup 可以包含任何 View。功能甚至比 SwipeRefreshLayout 强大。使用起来非常简单。良好的设计，如果你想定制自己的 UI 样式，非常简单，就像给 ListView 加一个 Header View 那么简单。支持 API LEVEL &amp;gt;= 8&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://a.codekk.com/detail/Android/Grumoon/android-Ultra-Pull-To-Refresh%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-Ultra-Pull-To-Refresh 源码解析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Material-Design-UI&quot;&gt;&lt;a href=&quot;#Material-Design-UI&quot; class=&quot;headerlink&quot; title=&quot;Material Design UI&quot;&gt;&lt;/a&gt;Material Design UI&lt;/h2&gt;&lt;h3 id=&quot;material-dialogs&quot;&gt;&lt;a href=&quot;#material-dialogs&quot; class=&quot;headerlink&quot; title=&quot;material-dialogs&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/afollestad/material-dialogs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;material-dialogs&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;各种material风格的dialog。 漂亮的的、易于使用的和可定制的Dialog API，你能够使用Material designed风格的Dialog到API 8&lt;/li&gt;
&lt;li&gt;目前正在使用，文档很全面。&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://raw.githubusercontent.com/afollestad/material-dialogs/master/art/mddemoshowcase.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;仿ios的ui&quot;&gt;&lt;a href=&quot;#仿ios的ui&quot; class=&quot;headerlink&quot; title=&quot;仿ios的ui&quot;&gt;&lt;/a&gt;仿ios的ui&lt;/h2&gt;&lt;h3 id=&quot;Android-PickerView-仿ios的pickview库&quot;&gt;&lt;a href=&quot;#Android-PickerView-仿ios的pickview库&quot; class=&quot;headerlink&quot; title=&quot;Android-PickerView:仿ios的pickview库&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/saiwu-bigkoo/Android-PickerView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-PickerView&lt;/a&gt;:仿ios的pickview库&lt;/h3&gt;&lt;p&gt;仿iOS的PickerView控件，有时间选择和选项选择并支持一二三级联动效果&lt;br&gt;&lt;img src=&quot;https://github.com/saiwu-bigkoo/Android-PickerView/raw/master/preview/pickerdemo.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ViewPager-、Gallery轮播图-旋转木马效果&quot;&gt;&lt;a href=&quot;#ViewPager-、Gallery轮播图-旋转木马效果&quot; class=&quot;headerlink&quot; title=&quot;ViewPager 、Gallery轮播图 旋转木马效果&quot;&gt;&lt;/a&gt;ViewPager 、Gallery轮播图 旋转木马效果&lt;/h2&gt;&lt;h3 id=&quot;Android-ConvenientBanner-banner轮播图&quot;&gt;&lt;a href=&quot;#Android-ConvenientBanner-banner轮播图&quot; class=&quot;headerlink&quot; title=&quot;Android-ConvenientBanner:banner轮播图&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/saiwu-bigkoo/Android-ConvenientBanner&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-ConvenientBanner&lt;/a&gt;:banner轮播图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/saiwu-bigkoo/Android-ConvenientBanner/raw/master/preview/convenientbannerdemo.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目前我正在使用的控件，没有解决每次imageview重新加载的问题，导致大的图片会先出现空白。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;LoopRotarySwitch：旋转木马&quot;&gt;&lt;a href=&quot;#LoopRotarySwitch：旋转木马&quot; class=&quot;headerlink&quot; title=&quot;LoopRotarySwitch：旋转木马&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/dalong982242260/LoopRotarySwitch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LoopRotarySwitch&lt;/a&gt;：旋转木马&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/dalong982242260/LoopRotarySwitch/raw/master/img/dalong.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目前正在使用，适用于3-4个图片，支持无线滚动。&lt;br&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;适用于Activity和Fragment&lt;/li&gt;
&lt;li&gt;可定制大小，可监听事件，可调整旋转滚动半径&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;CarouselViewProject：画廊效果&quot;&gt;&lt;a href=&quot;#CarouselViewProject：画廊效果&quot; class=&quot;headerlink&quot; title=&quot;CarouselViewProject：画廊效果&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/clkasd/CarouselViewProject&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CarouselViewProject&lt;/a&gt;：画廊效果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/fc4718502ecb25f906deb73a34c2e7b465323ea0/687474703a2f2f646576656c6f70776561722e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031342f30352f6361726f7573656c312e706e67&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不是很灵活，不支持无限滚动&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3d旋转木马效果&quot;&gt;&lt;a href=&quot;#3d旋转木马效果&quot; class=&quot;headerlink&quot; title=&quot;3d旋转木马效果&quot;&gt;&lt;/a&gt;3d旋转木马效果&lt;/h3&gt;&lt;p&gt;以下三个3d旋转木马效果，都来自于这篇文章&lt;a href=&quot;http://www.codeproject.com/Articles/146145/Android-D-Carousel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 3D Carousel&lt;/a&gt;,分别是不同的实现&lt;/p&gt;
&lt;h4 id=&quot;carousel-android-star31&quot;&gt;&lt;a href=&quot;#carousel-android-star31&quot; class=&quot;headerlink&quot; title=&quot;carousel-android:star31&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/ludovicroland/carousel-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;carousel-android&lt;/a&gt;:star31&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ad7578f22aeef2180975a57c2ce291d8d22d7ec3/68747470733a2f2f7261772e6769746875622e636f6d2f6c75646f766963726f6c616e642f6361726f7573656c2d616e64726f69642f6d61737465722f73637265656e73686f74312e706e67&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Fragment中使用会出现问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Android-3D-Carousel-star4&quot;&gt;&lt;a href=&quot;#Android-3D-Carousel-star4&quot; class=&quot;headerlink&quot; title=&quot;Android-3D-Carousel:star4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/panhuachao/Android-3D-Carousel#android-3d-carousel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-3D-Carousel&lt;/a&gt;:star4&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/panhuachao/Android-3D-Carousel/raw/master/round.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加了垂直滚动模式，尚未测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;CarrouselView-star22-中文版&quot;&gt;&lt;a href=&quot;#CarrouselView-star22-中文版&quot; class=&quot;headerlink&quot; title=&quot;CarrouselView:star22 中文版&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/dalong982242260/CarrouselView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CarrouselView&lt;/a&gt;:star22 中文版&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/dalong982242260/CarrouselView/raw/master/screenshot/carouselview.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中文版，效果最佳&lt;/li&gt;
&lt;li&gt;布局可以随意自定义，不受只是图片的限制。 &lt;/li&gt;
&lt;li&gt;2、增加点击切换到中间位置。 &lt;/li&gt;
&lt;li&gt;3、手势滑动切换。 &lt;/li&gt;
&lt;li&gt;4、切换中间回调。 &lt;/li&gt;
&lt;li&gt;5、自定义适配器更加方便用户设置自己需要的布局。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;GlFancyCoverFlow-电影海报轮播图&quot;&gt;&lt;a href=&quot;#GlFancyCoverFlow-电影海报轮播图&quot; class=&quot;headerlink&quot; title=&quot;GlFancyCoverFlow:电影海报轮播图&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/LittleLiByte/GlFancyCoverFlow&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GlFancyCoverFlow&lt;/a&gt;:电影海报轮播图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/LittleLiByte/GlFancyCoverFlow/raw/master/GlFancyCoverFlow/res/raw/ScreenShots/device-2014-10-15-141029.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;借鉴自&lt;a href=&quot;https://github.com/davidschreiber/FancyCoverFlow&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FancyCoverFlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;增加了无限滚动，更适合海报等效果&lt;/li&gt;
&lt;li&gt;但是继承自GalleryView，这个类已经被google放弃了，有内存溢出的风险&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;特殊ui&quot;&gt;&lt;a href=&quot;#特殊ui&quot; class=&quot;headerlink&quot; title=&quot;特殊ui&quot;&gt;&lt;/a&gt;特殊ui&lt;/h2&gt;&lt;h3 id=&quot;ExpandableLayout-控件收缩&quot;&gt;&lt;a href=&quot;#ExpandableLayout-控件收缩&quot; class=&quot;headerlink&quot; title=&quot;ExpandableLayout:控件收缩&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/traex/ExpandableLayout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ExpandableLayout&lt;/a&gt;:控件收缩&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/traex/ExpandableLayout/raw/master/demo.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目前正在使用，可以自己修改源码。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一部分：工具库&quot;&gt;&lt;a href=&quot;#第一部分：工具库&quot; class=&quot;headerlink&quot; title=&quot;第一部分：工具库&quot;&gt;&lt;/a&gt;第一部分：工具库&lt;/h1&gt;&lt;h2 id=&quot;依赖注入库&quot;&gt;&lt;a href=&quot;#依赖注入库&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="android" scheme="http://hammercui.github.io/categories/android/"/>
    
    
      <category term="android最佳实践" scheme="http://hammercui.github.io/tags/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
</feed>
