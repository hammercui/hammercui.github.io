<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[react-native基础：redux学习2-实战篇]]></title>
      <url>http://hammercui.github.io/post/react-native%E5%9F%BA%E7%A1%80%EF%BC%9Aredux%E5%AD%A6%E4%B9%A02/</url>
      <content type="html"><![CDATA[<h1 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h1><p><a href="http://hammercui.github.io/post/react-native%E5%9F%BA%E7%A1%80%EF%BC%9Aredux%E5%AD%A6%E4%B9%A01/">react-native基础：redux学习1-理论篇</a></p>
<p><a href="">react-native基础：redux学习2-实战篇</a></p>
<blockquote>
<p>本篇blog是在对redux理论知识有了足够了解后，做的实战架构。</p>
</blockquote>
<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="安装需要用到的库"><a href="#安装需要用到的库" class="headerlink" title="安装需要用到的库"></a>安装需要用到的库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --save redux</span><br><span class="line">npm install --save react-redux</span><br><span class="line">npm install --save redux-devtools</span><br><span class="line">npm install --save redux-thunk</span><br><span class="line">npm install --save redux-logger</span><br></pre></td></tr></table></figure>
<p>react绑定库跟开发者工具<br><a href="https://github.com/reactjs/redux" target="_blank" rel="external">redux</a><br><a href="https://github.com/reactjs/react-redux" target="_blank" rel="external">react-redux</a><br><a href="https://github.com/gaearon/redux-devtools" target="_blank" rel="external">redux-devtools</a></p>
<p>异步action构造器<a href="https://github.com/gaearon/redux-thunk/" target="_blank" rel="external">redux-thunk</a></p>
<p>日志工具<br><a href="https://github.com/fcomb/redux-logger" target="_blank" rel="external">redux-logger</a></p>
<h3 id="基础用法-同步的action"><a href="#基础用法-同步的action" class="headerlink" title="基础用法 同步的action"></a>基础用法 同步的action</h3><p>引入支持</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore &#125; from &apos;redux&apos;</span><br><span class="line">import &#123; Provider, connect &#125; from &apos;react-redux&apos;</span><br></pre></td></tr></table></figure>
<p>将根组件包装进<code>&lt;Provider&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//reducer函数，所有的</span><br><span class="line">function reducer(state=&#123;&#125;,action)&#123;</span><br><span class="line">&#125;</span><br><span class="line">let store = createStore(todoApp);</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/Provider&gt;,</span><br><span class="line">  document.getElementById(&apos;root&apos;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>通过 <code>react-redux</code> 提供的 <code>connect()</code> 方法将包装好的组件连接到<code>Redux</code>。尽量只做一个顶层的组件，或者 <code>route</code> 处理</p>
<p>任何一个从 <code>connect()</code> 包装好的组件都可以得到一个 <code>dispatch</code> 方法作为组件的 <code>props</code>，以及得到全局 <code>state</code> 中所需的任何内容。 <code>connect()</code> 的唯一参数是 <code>selector</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const PageContainer = connect()(PageContainer);</span><br><span class="line"></span><br><span class="line">let store = createStore(todoApp);</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/Provider&gt;,</span><br><span class="line">  document.getElementById(&apos;root&apos;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="高价用法-异步action"><a href="#高价用法-异步action" class="headerlink" title="高价用法 异步action"></a>高价用法 异步action</h3><p>如何把action creator跟网络请求结合起来呢。</p>
<p><a href="">redux-thunk</a>：一个搭建异步action的构造器。<br>其作用就是把一些比较复杂的动作(例如这里用到的异步操作)封装到一个action中去。</p>
<p>通过使用指定的 middleware，action creator 除了返回 action 对象外还可以返回函数。这时，这个 action creator 就成为了 thunk。</p>
<p>当 action creator 返回函数时，这个函数会被 Redux Thunk middleware 执行。这个函数并不需要保持纯净；它还可以带有副作用，包括执行异步 API 请求。这个函数还可以 dispatch action，就像 dispatch 前面定义的同步 action 一样。</p>
<p>注意<code>dispatch</code>定义：通过 <code>store.dispatch()</code> 将 <code>action</code> 传到 <code>store</code></p>
<p>使用 ES6 计算属性语法，使用 <code>Object.assign()</code> 来简洁高效地更新 <code>state</code>的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return Object.assign(&#123;&#125;, state, newState);</span><br></pre></td></tr></table></figure></p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>fetch<br>当我们在react-native版本可以直接使用这个强大的网络操作API，当时在react-web中大多数浏览器不支持，建议使用[isomorphic-fetch](<a href="https://github.com/matthew-andrews/isomorphic-fetch.所以我考虑还是在web项目使用jQuery，最稳妥。" target="_blank" rel="external">https://github.com/matthew-andrews/isomorphic-fetch.所以我考虑还是在web项目使用jQuery，最稳妥。</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 每次使用 `fetch` 前都这样调用一下</span><br><span class="line">import fetch from &apos;isomorphic-fetch&apos;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native基础：global全局变量和持久化]]></title>
      <url>http://hammercui.github.io/post/react-native%E5%9F%BA%E7%A1%80%EF%BC%9Aglobal%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%92%8C%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="如何实现react-native的全局变量呢"><a href="#如何实现react-native的全局变量呢" class="headerlink" title="如何实现react-native的全局变量呢"></a>如何实现react-native的全局变量呢</h2><p>参考网上的答案，使用<code>global</code>,类似于web的window,<br>比如<br>global.isBeat = true,<br>全局就知道这是一个测试版</p>
<h2 id="如何做持久化存储呢"><a href="#如何做持久化存储呢" class="headerlink" title="如何做持久化存储呢"></a>如何做持久化存储呢</h2><p>推荐<a href="https://github.com/sunnylqm/react-native-storage/blob/master/README-CHN.md" target="_blank" rel="external"><code>react-native-storage</code></a></p>
<ul>
<li>支持react-native(AsyncStorage,简单的异步的持久化的key-value存储系统)</li>
<li>支持浏览器（localStorage）</li>
<li>es6语法，promise异步读取，使用jest进行单元测试</li>
</ul>
<p>推荐new出来的Storage给global，这样我们就能全局使用了。<br>比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var storage = new Storage(&#123;</span><br><span class="line">  // 最大容量，默认值1000条数据循环存储</span><br><span class="line">  size: 1000,</span><br><span class="line"></span><br><span class="line">  // 存储引擎：对于RN使用AsyncStorage，对于web使用window.localStorage</span><br><span class="line">  // 如果不指定则数据只会保存在内存中，重启后即丢失</span><br><span class="line">  storageBackend: AsyncStorage,</span><br><span class="line"></span><br><span class="line">  // 数据过期时间，默认一整天（1000 * 3600 * 24 毫秒），设为null则永不过期</span><br><span class="line">  defaultExpires: 1000 * 3600 * 24,</span><br><span class="line"></span><br><span class="line">  // 读写时在内存中缓存数据。默认启用。</span><br><span class="line">  enableCache: true,</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">global.storage = storage;</span><br></pre></td></tr></table></figure>
<h3 id="保存-读取-删除"><a href="#保存-读取-删除" class="headerlink" title="保存 读取 删除"></a>保存 读取 删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">// 使用key来保存数据。这些数据一般是全局独有的，常常需要调用的。</span><br><span class="line">  // 除非你手动移除，这些数据会被永久保存，而且默认不会过期。</span><br><span class="line">  storage.save(&#123;</span><br><span class="line">    key: &apos;loginState&apos;,  // 注意:请不要在key中使用_下划线符号!</span><br><span class="line">    rawData: &#123; </span><br><span class="line">      from: &apos;some other site&apos;,</span><br><span class="line">      userid: &apos;some userid&apos;,</span><br><span class="line">      token: &apos;some token&apos;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 如果不指定过期时间，则会使用defaultExpires参数</span><br><span class="line">    // 如果设为null，则永不过期</span><br><span class="line">    expires: 1000 * 3600</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 读取</span><br><span class="line">  storage.load(&#123;</span><br><span class="line">    key: &apos;loginState&apos;,</span><br><span class="line"></span><br><span class="line">    // autoSync(默认为true)意味着在没有找到数据或数据过期时自动调用相应的sync方法</span><br><span class="line">    autoSync: true,</span><br><span class="line"></span><br><span class="line">    // syncInBackground(默认为true)意味着如果数据过期，</span><br><span class="line">    // 在调用sync方法的同时先返回已经过期的数据。</span><br><span class="line">    // 设置为false的话，则始终强制返回sync方法提供的最新数据(当然会需要更多等待时间)。</span><br><span class="line">    syncInBackground: true</span><br><span class="line">  &#125;).then(ret =&gt; &#123;</span><br><span class="line">    // 如果找到数据，则在then方法中返回</span><br><span class="line">    // 注意：这是异步返回的结果（不了解异步请自行搜索学习）</span><br><span class="line">    // 你只能在then这个方法内继续处理ret数据</span><br><span class="line">    // 而不能在then以外处理</span><br><span class="line">    // 也没有办法“变成”同步返回</span><br><span class="line">    // 你也可以使用“看似”同步的async/await语法</span><br><span class="line"></span><br><span class="line">    console.log(ret.userid);</span><br><span class="line">    this.setState(&#123; user: ret &#125;);</span><br><span class="line">  &#125;).catch(err =&gt; &#123;</span><br><span class="line">    //如果没有找到数据且没有sync方法，</span><br><span class="line">    //或者有其他异常，则在catch中返回</span><br><span class="line">    console.warn(err.message);</span><br><span class="line">    switch (err.name) &#123;</span><br><span class="line">        case &apos;NotFoundError&apos;:</span><br><span class="line">            // TODO;</span><br><span class="line">            break;</span><br><span class="line">        case &apos;ExpiredError&apos;:</span><br><span class="line">            // TODO</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  // --------------------------------------------------</span><br><span class="line"></span><br><span class="line">// 获取某个key下的所有id</span><br><span class="line">storage.getIdsForKey(&apos;user&apos;).then(ids =&gt; &#123;</span><br><span class="line">    console.log(ids);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 获取某个key下的所有数据</span><br><span class="line">storage.getAllDataForKey(&apos;user&apos;).then(users =&gt; &#123;</span><br><span class="line">    console.log(users);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// !! 清除某个key下的所有数据</span><br><span class="line">storage.clearMapForKey(&apos;user&apos;);</span><br><span class="line"></span><br><span class="line">// --------------------------------------------------  </span><br><span class="line"></span><br><span class="line">// 删除单个数据</span><br><span class="line">storage.remove(&#123;</span><br><span class="line">    key: &apos;lastPage&apos;</span><br><span class="line">&#125;);</span><br><span class="line">storage.remove(&#123;</span><br><span class="line">    key: &apos;user&apos;,</span><br><span class="line">    id: &apos;1001&apos;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// !! 清空map，移除所有&quot;key-id&quot;数据（但会保留只有key的数据）</span><br><span class="line">storage.clearMap();</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native基础：redux学习1-理论篇]]></title>
      <url>http://hammercui.github.io/post/react-native%E5%9F%BA%E7%A1%80%EF%BC%9Aredux%E5%AD%A6%E4%B9%A01/</url>
      <content type="html"><![CDATA[<h1 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h1><p><a href="http://hammercui.github.io/post/react-native%E5%9F%BA%E7%A1%80%EF%BC%9Aredux%E5%AD%A6%E4%B9%A01/">react-native基础：redux学习1-理论篇</a></p>
<p><a href="">react-native基础：redux学习2-实战篇</a></p>
<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h1><blockquote>
<p>本篇blog主要讲解redux的一些理论，以及第三方的组件库和其优秀的解决思路，所谓理论现行。</p>
<p>我在查阅了大量参考文章和blog后，有感于大部分文章都侧重于讲某个点，而没有系统的让初学者从0开始对redux进行理解，所以写下了这篇总结。</p>
<p>当然我们首先还是要站在巨人的肩膀，需要预先阅读一下文档，我起初读完以下文档也是萌萌哒，直到对所有的知识串起来思考，才有恍然大悟的感觉。首先是<a href="https://camsong.github.io/redux-in-chinese/" target="_blank" rel="external">Redux 中文文档</a>，然后是<a href="http://div.io/topic/1309" target="_blank" rel="external">深入到源码：解读 redux 的设计思路与用法</a>,以及<a href="http://richard-cao.github.io/2016/01/12/React-Native-With-Redux/" target="_blank" rel="external">React-Native With Redux</a>,最后如果对redux的基础知识有了初步了解，可以看下这个讨论帖<a href="http://react-china.org/t/redux/2687" target="_blank" rel="external">这段时间研究了下Redux，写写自己对它的感觉。</a></p>
</blockquote>
<h2 id="Flex与Redux的关系"><a href="#Flex与Redux的关系" class="headerlink" title="Flex与Redux的关系"></a>Flex与Redux的关系</h2><blockquote>
<p>Redux是遵循了单向数据流Flex的设计,但是做了流程的简化。</p>
</blockquote>
<p>Redux是javascript状态容器，提供可预测化的状态管理，可以构建一致化的应用，除了和React一起用外，还支持其他界面库，体积小（只有2kb）而且没有任何依赖。Redux由Flux演变而来，但是避开了Flux的复杂性，上手快，使用简单，而且社区活跃，是目前主流的Flux数据流框架（学习Redux可以参考<a href="https://camsong.github.io/redux-in-chinese/" target="_blank" rel="external">Redux中文文档</a>）</p>
<h2 id="Redux总览"><a href="#Redux总览" class="headerlink" title="Redux总览"></a>Redux总览</h2><blockquote>
<p>在 Redux 的[源码目录][redux-src] <code>src/</code>，我们可以看到如下文件结构：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── utils/</span><br><span class="line">│     ├── warning.js # 打酱油的，负责在控制台显示警告信息</span><br><span class="line">├── applyMiddleware.js</span><br><span class="line">├── bindActionCreators.js</span><br><span class="line">├── combineReducers.js</span><br><span class="line">├── compose.js</span><br><span class="line">├── createStore.js</span><br><span class="line">├── index.js # 入口文件</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>store</strong>: 应用中所有的<code>state</code>都以一个对象树的形式储存在一个单一的store中，<code>state</code>就是每个<code>component</code>里都存在的状态集合，你也可以理解为java类的属性和方法。</li>
<li><strong>action</strong>: 惟一改变 state 的办法是触发 action，一个描述发生什么的对象。它是 store 数据的唯一来源。</li>
<li><strong>reducers</strong>:为了描述 action 如何改变 state 树，你需要编写 reducers。</li>
<li><strong>compose</strong>:没有依赖，是个纯函数，实现函数的层级合并，从右开始。</li>
<li><strong>createStore</strong>:创建store的函数。参数是(reducer,初始化state，中间件)，返回store</li>
<li><strong>combineReducers(reducers)</strong>:可以合并不同的reducer，便于不同功能的reducer进行分支化管理</li>
<li><strong>bindActionCreators(actionCreators,dispacth)</strong>:实现自动<code>dispatch</code></li>
</ul>
<h3 id="sect-action"><a href="#sect-action" class="headerlink" title="&sect; action"></a>&sect; action</h3><p>action本质是是一个包含<code>type</code>属性的普通对象，type是它的key也是识别码。改变state必须<code>dispatch</code>一个<code>action</code>。</p>
<p>一般用法component的state其实是从props传递的，以propsMaptoState形式存储在store中。</p>
<p>高阶用法包括<code>selector绑定</code>，这是为了解决全局变化而对store的state做了最小化拆分</p>
<ul>
<li>存储最小的可能变化state</li>
<li>提高效率，除非一个参数发生改变，否则不会重新计算</li>
<li>selector是可组合的，一个selector可以导出给其他<code>selector</code>使用</li>
</ul>
<h3 id="sect-reducer"><a href="#sect-reducer" class="headerlink" title="&sect; reducer"></a>&sect; reducer</h3><p>指明如何更新<code>state</code>，<code>reducer</code> 本质是一个一<code>function</code>，接收旧<code>state</code> 和 <code>action</code>，返回新的 <code>state</code>，我们叫<code>nextState</code>，也就是说每次返回的都是新的state,而不是旧state的副本。reducer返回啥，state就被替换成啥。</p>
<p>思考：这样就能实现数据的回滚了，比如执行redo,undo操作了。</p>
<h3 id="sect-store"><a href="#sect-store" class="headerlink" title="&sect; store"></a>&sect; store</h3><p>Store 就是把它们联系到一起的对象。Store 有以下职责：</p>
<ul>
<li>维持应用的 state；</li>
<li>提供 getState() 方法获取 state；</li>
<li>提供 dispatch(action) 方法更新 state；</li>
<li>通过 subscribe(listener) 注册监听器。</li>
</ul>
<p><strong>一个Redux应用只能有一个单一的store</strong></p>
<h3 id="sect-compose"><a href="#sect-compose" class="headerlink" title="&sect; compose"></a>&sect; compose</h3><p>主要的作用是让代码更优雅，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var re1 = func3(func2(func1(0)));</span><br><span class="line">//替换为</span><br><span class="line">var re2 = Redux.compose(func3, func2, func1)(0);</span><br><span class="line">//是不是更优雅了</span><br></pre></td></tr></table></figure>
<h3 id="sect-creteStore-reducer-initalState-enhaner"><a href="#sect-creteStore-reducer-initalState-enhaner" class="headerlink" title="&sect; creteStore(reducer,initalState,enhaner)"></a>&sect; creteStore(reducer,initalState,enhaner)</h3><p>经常的用法是创建store，并给store添加中间件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const finalCreateStore = Redux.compose(</span><br><span class="line">	中间件1，</span><br><span class="line">	中间件2，</span><br><span class="line">	中间件3</span><br><span class="line">)（createStore）</span><br><span class="line"></span><br><span class="line">const store = finalCreateStore(reducer);</span><br><span class="line">//执行流程是</span><br><span class="line">//reducer作为参数传递给函数createStore,返回store</span><br><span class="line">//store作为参数传递给函数中间件3,返回store</span><br><span class="line">//store作为参数传递给函数中间件2,返回store</span><br><span class="line">//store作为参数传递给函数中间件1,返回store</span><br></pre></td></tr></table></figure>
<h3 id="sect-combineReducers-reducers）"><a href="#sect-combineReducers-reducers）" class="headerlink" title="&sect; combineReducers(reducers）"></a>&sect; combineReducers(reducers）</h3><p>无论应用的状态树多复杂，都可以通过逐层下分，来管理对应部分的state，如下图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">                                 aReducer(a_value, action) -------------------- a_value</span><br><span class="line">                              ↗                                                              ↘</span><br><span class="line">rootReducer(state, action) —→∑     ↗ b1Reducer(b1_value, action) ------ b1_value ↘         nextState</span><br><span class="line">                              ↘—→∑                                                    b_value  ↗</span><br><span class="line">                                   ↘ b2Reducer(b2_value,action) ----- b2_value ↗</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注：左侧表示 dispatch 分发流，∑ 表示 combineReducers；右侧表示各实体 reducer 的返回值，最后汇总整合成 nextState</span><br></pre></td></tr></table></figure>
<blockquote>
<p>无论dispatch哪个action，都会流通所有的reducer</p>
<p>这也是为何 reducer 必须返回其对应的 state 的原因。否则整合状态树时，该 reducer 对应的键值就是 undefined</p>
</blockquote>
<h3 id="sect-bindActionCreators-actionCreators-diapatch"><a href="#sect-bindActionCreators-actionCreators-diapatch" class="headerlink" title="&sect; bindActionCreators(actionCreators,diapatch)"></a>&sect; bindActionCreators(actionCreators,diapatch)</h3><p>把我们手动的action的dispatch过程变成了自动.</p>
<h3 id="⊙-Redux-与传统后端-MVC-的对照"><a href="#⊙-Redux-与传统后端-MVC-的对照" class="headerlink" title="⊙ Redux 与传统后端 MVC 的对照"></a>⊙ Redux 与传统后端 MVC 的对照</h3><table>
<thead>
<tr>
<th>Redux</th>
<th>传统后端 MVC</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>store</code></td>
<td>数据库实例</td>
</tr>
<tr>
<td><code>state</code></td>
<td>数据库中存储的数据</td>
</tr>
<tr>
<td><code>dispatch(action)</code></td>
<td>用户发起请求</td>
</tr>
<tr>
<td><code>action: { type, payload }</code></td>
<td><code>type</code> 表示请求的 URL，<code>payload</code> 表示请求的数据</td>
</tr>
<tr>
<td><code>reducer</code></td>
<td>路由 + 控制器（handler）</td>
</tr>
<tr>
<td><code>reducer</code> 中的 <code>switch-case</code> 分支</td>
<td>路由，根据 <code>action.type</code> 路由到对应的控制器</td>
</tr>
<tr>
<td><code>reducer</code> 内部对 <code>state</code> 的处理</td>
<td>控制器对数据库进行增删改操作</td>
</tr>
<tr>
<td><code>reducer</code> 返回 <code>nextState</code></td>
<td>将修改后的记录写回数据库</td>
</tr>
</tbody>
</table>
<h2 id="第三方辅助类组件库"><a href="#第三方辅助类组件库" class="headerlink" title="第三方辅助类组件库"></a>第三方辅助类组件库</h2><h3 id="sect-redux-actions"><a href="#sect-redux-actions" class="headerlink" title="&sect; redux-actions"></a>&sect; <a href="https://github.com/acdlite/redux-actions" target="_blank" rel="external">redux-actions</a></h3><blockquote>
<p>专门为redux准备的，flux standard action的工具集。</p>
</blockquote>
<h4 id="什么是flux-standard-action？"><a href="#什么是flux-standard-action？" class="headerlink" title="什么是flux standard action？"></a>什么是<a href="https://github.com/acdlite/flux-standard-action" target="_blank" rel="external">flux standard action</a>？</h4><h4 id="createAction-type-payloadCreator-Identity-metaCreator"><a href="#createAction-type-payloadCreator-Identity-metaCreator" class="headerlink" title="createAction(type, payloadCreator = Identity, ?metaCreator)"></a>createAction(type, payloadCreator = Identity, ?metaCreator)</h4><ul>
<li>参数type:就是action类型，一般是string，</li>
<li>参数payloadCreator:就是payload生成器，一般是个function</li>
</ul>
<p>包装一个action creator ,然后就能把flux标准的action的payload，作为返回值返回。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let increment = createAction(&apos;INCREMENT&apos;, amount =&gt; amount);</span><br><span class="line">expect(increment(42)).to.deep.equal(&#123;</span><br><span class="line">  type: &apos;INCREMENT&apos;,</span><br><span class="line">  payload: 42</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>好处是如果payload是一个error实例，react-actions就能自动把<code>action.error = true</code></p>
<p>example</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const increment = createAction(&apos;INCREMENT&apos;);</span><br><span class="line"></span><br><span class="line">const error = new TypeError(&apos;not a number&apos;);</span><br><span class="line">expect(increment(error)).to.deep.equal(&#123;</span><br><span class="line">  type: &apos;INCREMENT&apos;,</span><br><span class="line">  payload: error,</span><br><span class="line">  error: true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>createAction也能返回它的<code>type</code>，然后作为<code>type</code>传参给<code>handleAction</code>或者<code>handleActions</code></p>
<ul>
<li>作为参数在handleAction中</li>
<li>作为object key 在handleActions中使用</li>
</ul>
<h4 id="handleAction-type-reducer-reducerMap-Identity-defaultState"><a href="#handleAction-type-reducer-reducerMap-Identity-defaultState" class="headerlink" title="handleAction(type, reducer | reducerMap = Identity, defaultState)"></a>handleAction(type, reducer | reducerMap = Identity, defaultState)</h4><p>包装一个reducer，这个reducer仅能处理一个，确定type的、flux标准的action。</p>
<ul>
<li>参数type:就是一个action的type</li>
<li>参数reducer:就是reducer函数，用来处理传递的action里的payload和state,然后返回新的state</li>
<li>参数defaultState,当reducer收到的参数是<code>undefined</code>时，就返回defaultState</li>
</ul>
<h4 id="handleActions-reducerMap-defaultState"><a href="#handleActions-reducerMap-defaultState" class="headerlink" title="handleActions(reducerMap, defaultState)"></a>handleActions(reducerMap, defaultState)</h4><ul>
<li>参数reduerMap:就是一个<code>action type</code>为<code>key</code>,<code>reducer</code>为<code>value</code>的键值对。</li>
<li>参数defaultState:</li>
</ul>
<p>把大量使用<code>handleAction</code>创建的<code>reducer</code>合并</p>
<h3 id="sect-Reselect"><a href="#sect-Reselect" class="headerlink" title="&sect; Reselect"></a>&sect; Reselect</h3><p><a href="https://github.com/reactjs/reselect" target="_blank" rel="external">Reselect</a>是一个第三方库，解决数据冗余的问题。这个问题是怎么产生的呢？<br>首先：原本store中的state是通过props，数据一级一级的传递，在 render 中处理，避免了状态判断的问题，即拿到的数据总是最新的，缺点就是每次重新计算。</p>
<p>然后：一层层传递的数据，每个层级组件都要用，一旦原始数据被污染了，需要保存多份原始数据的处理结果，数据的冗余就出现了。</p>
<p>解决方案：<br>Container component 模式很，就是每个组件connect自己所需要的数据.</p>
<p><strong>reselect的三个特性</strong></p>
<ul>
<li>Selectors can compute derived data, allowing Redux to store the minimal possible state.(Selectors可以计算派生数据，允许Redux存储最小可用state)</li>
<li>Selectors are efficient. A selector is not recomputed unless one of its arguments change.（Selectors是高效的。除非其中一个参数发生更改，否则不会重新计算Selectors）</li>
<li>Selectors are composable. They can be used as input to other selectors.(Selectors是可组合的，也可以作为input给其他Selectors使用)</li>
</ul>
<h2 id="React-Redux容器组件与展示组件分离的开发思想"><a href="#React-Redux容器组件与展示组件分离的开发思想" class="headerlink" title="React-Redux容器组件与展示组件分离的开发思想"></a>React-Redux<a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0" target="_blank" rel="external">容器组件与展示组件分离</a>的开发思想</h2><p>这个在<a href="https://camsong.github.io/redux-in-chinese/" target="_blank" rel="external">Redux 中文文档</a>中有详细跟直观的讲解。<br>通俗来讲就是，一个Redux应用切成两部分来管理数据流</p>
<ul>
<li><p>Container:容器组件</p>
<pre><code>-在这里使用redux，控制分发需要向下传递的state,action创建函数
</code></pre></li>
<li><p>View：展示组件</p>
<pre><code>-我们要展示数据的的view，以及触发action的操作
</code></pre></li>
</ul>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://camsong.github.io/redux-in-chinese/" target="_blank" rel="external">Redux 中文文档</a></p>
<p><a href="http://richard-cao.github.io/2016/01/12/React-Native-With-Redux/" target="_blank" rel="external">React-Native With Redux</a></p>
<p><a href="http://div.io/topic/1309" target="_blank" rel="external">深入到源码：解读 redux 的设计思路与用法</a></p>
<p><a href="http://react-china.org/t/redux/2687" target="_blank" rel="external">这段时间研究了下Redux，写写自己对它的感觉。</a></p>
<p><a href="https://github.com/kenberkeley/redux-simple-tutorial#-需求-2在上述需求的基础上记录用户的操作时间" target="_blank" rel="external">Redux 简明教程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native学习路线]]></title>
      <url>http://hammercui.github.io/post/react-native%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>react-native是Facebook推出的跨平台开发技术，使用JavaScript代码，目前是es6。主要涉及知识点flexbox（弹性工具盒）布局，flux来管理数据流动</p>
</blockquote>
<h1 id="初级阶段"><a href="#初级阶段" class="headerlink" title="初级阶段"></a>初级阶段</h1><ul>
<li>es6语法<ul>
<li>promis</li>
<li>async,waite</li>
<li><a href="http://lodashjs.com/docs/" target="_blank" rel="external">lodash</a>:是具有一致接口，模块化，高性能等特性的JavaScript工具库。</li>
</ul>
</li>
<li>npm安装，react-native安装，环境搭建</li>
<li>了解Props，State</li>
<li>学习样式jxs,flexbox</li>
<li>学习导航器</li>
</ul>
<h1 id="进阶阶段"><a href="#进阶阶段" class="headerlink" title="进阶阶段"></a>进阶阶段</h1><ul>
<li><p>学习<a href="http://cn.redux.js.org/index.html" target="_blank" rel="external">redux</a>,了解它与flux的区别，学会如何使用单项数据流的思想管理状态树。它的使用场景会更多。你也可以看做它是简化了流程的flux。</p>
<ul>
<li>action</li>
<li>reducer</li>
<li>store</li>
<li>middleWare</li>
<li><a href="https://github.com/gaearon/redux-thunk/" target="_blank" rel="external">redux-thunk</a>:比较流行的redux异步action中间件，统一了异步和同步action的调用方式，避免在component动刀子。</li>
</ul>
</li>
<li><p>学习<a href="https://github.com/reactjs/reselect" target="_blank" rel="external">Reselect</a>:构建粒度化的数据，Reselect 库可以创建可记忆的(Memoized)、可组合的 selector 函数。Reselect selectors 可以用来高效地计算 Redux store 里的衍生数据。</p>
</li>
<li>学习<a href="https://github.com/root-two/react-native-drawer" target="_blank" rel="external">react-native-drawer</a>:可用于Android ios的抽屉式控件。</li>
<li><p>学习<a href="https://github.com/d-a-n/react-native-modal-picker" target="_blank" rel="external">react-native-model-picker</a>：一个比较好用的model picker,兼容Android  iOS</p>
</li>
<li><p>学习<a href="https://github.com/jprichardson/redux-watch" target="_blank" rel="external">redux-watch</a>:一个可以检测全局store数据变动的组件，常用于全局的状态变化，比如登录数据：当发现token不一致时，弹出登录界面。比如全局检测错误数据：根据错误id显示不同的提示。</p>
</li>
<li>文件系统<ul>
<li><a href="https://github.com/    johanneslumpe/react-native-fs" target="_blank" rel="external">react-native-fs</a>：react-native调用本地    文件系统的库，兼容Android iOS</li>
<li><a href="https://github.com/johanneslumpe/react-native-fs" target="_blank" rel="external">react-native-file-transfer</a>:ios专用的从图片库往服务器上传库</li>
<li><a href="https://github.com/PhilippKrone/react-native-fileupload/" target="_blank" rel="external">react-native-fileupload</a>:兼容iOS Android上传文件的库。支持 1 同时上传多个文件 2 支持file and fields</li>
</ul>
</li>
<li><p>导航</p>
<ul>
<li><a href="https://github.com/aksonov/react-native-router-flux/" target="_blank" rel="external">react-native-router-flux</a>：可配合redux的路由导航库，目前最全面，功能最强大。常用于构建整个APP的路由规则。<ul>
<li><a href="https://github.com/skv-headless/react-native-scrollable-tab-view" target="_blank" rel="external">react-native-scrollable-tab-view</a>:带scroll滑动切换的tab view</li>
<li><a href="https://github.com/aksonov/react-native-tabs" target="_blank" rel="external">react-native-tabs</a>：简版的底部tabbar导航栏，常见于ios应用，兼容Android iOS</li>
</ul>
</li>
</ul>
</li>
<li></li>
</ul>
<h1 id="解坑阶段"><a href="#解坑阶段" class="headerlink" title="解坑阶段"></a>解坑阶段</h1><h2 id="坑1：ipad-模拟器-command-D-程序崩溃"><a href="#坑1：ipad-模拟器-command-D-程序崩溃" class="headerlink" title="坑1：ipad 模拟器 command+D 程序崩溃"></a>坑1：ipad 模拟器 command+D 程序崩溃</h2><p>0.3.6才有的问题，ipad丢失了actionsheet布局<br>修复：<br>在React/Modules/RctDevMenu.m第519行新增</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIAlertControllerStyle style = [[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone ? UIAlertControllerStyleActionSheet : UIAlertControllerStyleAlert;</span><br></pre></td></tr></table></figure>
<p>然后把519行的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_actionSheet = [UIAlertController alertControllerWithTitle:title</span><br><span class="line">                                                     message:@&quot;&quot;</span><br><span class="line">                                              preferredStyle:UIAlertControllerStyleActionSheet];</span><br></pre></td></tr></table></figure>
<p>替换为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_actionSheet = [UIAlertController alertControllerWithTitle:title</span><br><span class="line">                                                    message:@&quot;&quot;</span><br><span class="line">                                             preferredStyle:style];</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android学习路线]]></title>
      <url>http://hammercui.github.io/post/android%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      <content type="html"><![CDATA[<h2 id="初级阶段"><a href="#初级阶段" class="headerlink" title="初级阶段"></a>初级阶段</h2><p>技术要求：</p>
<ul>
<li>四大组件Activity，Service, BroadcastReceive，ContentProvider的使用.<a href="http://www.jianshu.com/p/51aaa65d5d25" target="_blank" rel="external">参考文章</a></li>
<li>Fragment</li>
<li>ui设计<ul>
<li>各类layout</li>
<li>简单自定义view，各种用户界面</li>
<li>动画[包括valueAnimator,ObjectAnimator]</li>
<li>Bitmap,Canvas</li>
</ul>
</li>
<li>数据存储<ul>
<li>sharePerference</li>
<li>SQLite3,GreenDao,Realm</li>
</ul>
</li>
</ul>
<p>书籍推荐:</p>
<ul>
<li>《Thinking in java》 经典</li>
</ul>
<p>网站推荐:</p>
<ul>
<li><a href="https://developer.android.com/guide/index.html" target="_blank" rel="external">google api guides</a>官方api，不知道怎么用，就看官方的</li>
<li><a href="http://wiki.jikexueyuan.com/list/android/" target="_blank" rel="external">极客学院Android wiki</a>非常全面</li>
<li><a href="http://wiki.jikexueyuan.com/list/android/" target="_blank" rel="external">Stack Overflow android tag</a></li>
</ul>
<h2 id="中级阶段"><a href="#中级阶段" class="headerlink" title="中级阶段"></a>中级阶段</h2><p>技术要求</p>
<ul>
<li>aidl:熟悉aidl，理解其工作原理，懂transact和onTransact的区别</li>
<li>Binder:从java层大概理解Binder的工作原理，懂Parcel对象的使用</li>
<li>多进程：多进程的运行机制，消息队列，Messenger,Socket</li>
<li>事件分发：弹性滑动 滑动冲突</li>
<li>玩转view： view的绘制原理，各种自定义view</li>
<li>动画系列：熟悉view动画和属性动画的不同点，懂ObjectAnimator的工作原理</li>
<li>懂性能优化，熟悉mat等工具</li>
<li>熟悉常见的设计模式，比如mvp,mvvm</li>
<li>熟悉rxjava响应式编程</li>
</ul>
<p>学习方法</p>
<ul>
<li>阅读源码</li>
<li>view以及事件分发<ul>
<li>view的滑动原理</li>
<li>如何实现弹性滑动</li>
<li>view的滑动冲突</li>
<li>view的measure，layout，draw</li>
<li>自己实现几个经典的view</li>
</ul>
</li>
</ul>
<h2 id="高级阶段"><a href="#高级阶段" class="headerlink" title="高级阶段"></a>高级阶段</h2><p>技术要求</p>
<ul>
<li>了解SystemSever的启动过程</li>
<li>了解AndroidFramework层的内容</li>
<li>了解主线程的消息循环模型</li>
<li>了解ams和psm的工作原理</li>
<li>了解Windows</li>
<li>Activity的启动模式以及异常情况下不同Activity的表现 </li>
<li>Service的onBind和onReBind的关联 </li>
<li>onServiceDisconnected(ComponentName className)和binderDied()的区别 </li>
<li>AsyncTask在不同版本上的表现细节 </li>
<li>线程池的细节和参数配置 </li>
</ul>
<p>总结</p>
<ul>
<li>系统核心机制</li>
<li>基础知识点的细节</li>
<li>设计模式和架构</li>
<li>了解这张图的底层细节<br><img src="http://img.blog.csdn.net/20140326133801171?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaXRmb290YmFsbA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"> </li>
</ul>
<p>推荐书籍</p>
<ul>
<li>《android内核剖析》</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android基础：控件集锦]]></title>
      <url>http://hammercui.github.io/post/android%E6%8E%A7%E4%BB%B6%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>汇总常用的或者经常忘记的Android控件</p>
</blockquote>
<h2 id="DrawerLayout"><a href="#DrawerLayout" class="headerlink" title="DrawerLayout"></a>DrawerLayout</h2><p>弹出式抽屉视图<br><em>DrawerLayout 控件的子视图必须是2个，1个显示原视图，1个显示弹出的抽屉视图</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v4.widget.DrawerLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:id=&quot;@+id/drawerLayout&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    tools:context=&quot;com.inthecheesefactory.lab.designlibrary.CodeLabActivity&quot;&gt;</span><br><span class="line">    &lt;!--视图1：原视图--&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;@string/hello_world&quot; /&gt;</span><br><span class="line">    &lt;!--视图2：弹出的抽屉视图 --&gt;</span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:layout_gravity=&quot;start&quot;</span><br><span class="line">        android:background=&quot;#ffffff&quot;</span><br><span class="line">        android:orientation=&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<h2 id="硬按键控制音量"><a href="#硬按键控制音量" class="headerlink" title="硬按键控制音量"></a>硬按键控制音量</h2><p>1 添加权限<br><code>&lt;uses-permission android:name=&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot; /&gt;</code></p>
<p>2 新建控制音量类实例 </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> //音量控制,初始化定义</span><br><span class="line"> private AudioManager mAudioManager;</span><br></pre></td></tr></table></figure>
<p>3 实例初始化，在<code>onCreat()</code>中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mAudioManager = (AudioManager) </span><br><span class="line">getSystemService(Context.AUDIO_SERVICE);</span><br></pre></td></tr></table></figure>
<p>4 具体调节音量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">  public boolean onKeyDown(int keyCode, KeyEvent event) &#123;</span><br><span class="line">    </span><br><span class="line">    int currentVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);</span><br><span class="line">    switch(keyCode)</span><br><span class="line">    &#123;</span><br><span class="line">    case KeyEvent.KEYCODE_VOLUME_UP:</span><br><span class="line">      mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, currentVolume+1, 1);</span><br><span class="line">      return true;</span><br><span class="line">      </span><br><span class="line">    case KeyEvent.KEYCODE_VOLUME_DOWN:</span><br><span class="line">      mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, currentVolume-1, 1);</span><br><span class="line">      return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return super.onKeyDown(keyCode, event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="home按键切换后台"><a href="#home按键切换后台" class="headerlink" title="home按键切换后台"></a>home按键切换后台</h2><p> 1借用surface改变：<br>切换后台触发:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void surfaceChanged(SurfaceHolder arg0, int arg1, int arg2, int arg3) &#123;</span><br><span class="line">  // TODO Auto-generated method stub</span><br><span class="line">  Log.v(&quot;admob&quot;, &quot;surfaceChanged!&quot;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>回到前台触发：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public void surfaceCreated(SurfaceHolder arg0) &#123;	//activity resume</span><br><span class="line">  // TODO Auto-generated method stub</span><br><span class="line">  if(isPause &amp;&amp; m_State == GAME_PLAY)&#123;</span><br><span class="line">   AlertDialog.Builder builder = new AlertDialog.Builder(GameActivity.mContext);</span><br><span class="line">   builder.setTitle(&quot;Alert&quot;)</span><br><span class="line">   .setMessage(&quot;Game is paused，press OK resume&quot;)</span><br><span class="line">      .setCancelable(false)</span><br><span class="line">      .setPositiveButton(&quot;OK&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">       public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        mLoopHandler.start();</span><br><span class="line">       &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">   AlertDialog alert = builder.create();</span><br><span class="line">   alert.show();</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">   mLoopHandler.start();</span><br><span class="line">  &#125;</span><br><span class="line">  isPause = false;</span><br><span class="line"> &#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">##  action bar使用</span><br><span class="line">action bar是3.0之后系统自带的控件，</span><br></pre></td></tr></table></figure>
<p>@Override<br>protected void onCreate(Bundle savedInstanceState) {<br>super.onCreate(savedInstanceState);<br>    setContentView(R.layout.aty_securityissue_creat);<br>actionBar= getActionBar();<br>actionBar.show();</p>
<p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//创建菜单</span><br></pre></td></tr></table></figure></p>
<p>@Override<br>public boolean onCreateOptionsMenu(Menu menu) {<br>// Inflate the menu; this adds items to the action bar if it is present.<br>super.onCreateOptionsMenu(menu);<br>//添加菜单项<br>MenuItem add=menu.add(0,0,0,”add”);<br>    MenuItem del=menu.add(0,0,0,”del”);<br>    MenuItem save=menu.add(0,0,0,”save”);<br>//绑定到ActionBar<br>add.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);<br>    del.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);<br>    save.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);<br>return true;<br>}</p>
<p>//选择菜单<br>@Override<br>public boolean onOptionsItemSelected(MenuItem item)<br>{<br>switch (item.getItemId())<br>    {<br>case android.R.id.home:<br>return true;<br>default:<br>return super.onOptionsItemSelected(item);<br>    }<br>}<br>```</p>
<h2 id="FragmentTabHost"><a href="#FragmentTabHost" class="headerlink" title="FragmentTabHost"></a>FragmentTabHost</h2><p><a href="http://www.jianshu.com/p/3b0ff7a4bde1" target="_blank" rel="external">参考案例</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python学习笔记：6 tornado]]></title>
      <url>http://hammercui.github.io/post/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A6-tornado/</url>
      <content type="html"><![CDATA[<blockquote>
<p>tornad是Facebook开源的非阻塞式web框架，类似于nodejs，主要是为了解决frendfeed的实时更新。因此相应速度非常高。</p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>win10环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tornado</span><br></pre></td></tr></table></figure></p>
<p>mongodb数据库：<a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="external">官网下载地址</a></p>
<h1 id="数据库请求"><a href="#数据库请求" class="headerlink" title="数据库请求"></a>数据库请求</h1><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><p><code>Tornado-MySQL</code>，是对PyMySQL的异步化的一个库,测试用例,文档,都比较齐全，目前在使用的版本。</p>
<h1 id="异步web请求"><a href="#异步web请求" class="headerlink" title="异步web请求"></a>异步web请求</h1><p>使用异步装饰器，实现异步功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class TestAsynchr2(tornado.web.RequestHandler):</span><br><span class="line">    @tornado.web.asynchronous</span><br><span class="line">    @tornado.gen.engine</span><br><span class="line">    def get(self, *args, **kwargs):</span><br><span class="line">        client = tornado.httpclient.AsyncHTTPClient();</span><br><span class="line">        response = yield tornado.gen.Task(client.fetch,test_url)</span><br><span class="line">        body = json.loads(response.body)</span><br><span class="line">        print &apos;异步请求2 %s&apos; % body</span><br><span class="line">        print body[&apos;errNum&apos;]</span><br><span class="line">        self.write(&apos;异步请求2 %s&apos; % response.body)</span><br><span class="line">        self.finish()</span><br></pre></td></tr></table></figure></p>
<p>重点是yield，以及<code>self.finish()</code></p>
<p>使用<code>asyncmongo</code>,来异步的调用mongoDB服务器。它是专门给Tornado开发者开发提供异步数据库访问的</p>
<h1 id="使用tornado进行长轮询"><a href="#使用tornado进行长轮询" class="headerlink" title="使用tornado进行长轮询"></a>使用tornado进行长轮询</h1><p>传统的方案是浏览器js进行定时http轮训，但是对服务器压力太大了。<br>新的技术是让浏览器发起连接来模拟服务器推送更新。这种方式的HTTP连接被称为长轮询或Comet请求。意味着浏览器只需启动一个http请求，其连接的服务器会有意保持开启，浏览器只需要等待更新可用时服务器”推送”响应。当服务器发送响应并关闭连接后，（或者浏览器端客户请求超时），客户端只需打开一个新的连接并等待下一个更新。</p>
<p>好处：</p>
<ul>
<li>减少web服务器负载</li>
<li>浏览器兼容性，只要支持ajax即可</li>
<li>比如状态更新，消息通知，聊天消息，Twitter显示通知，Facebook的聊天</li>
<li>跟websockets的实现方式不同</li>
</ul>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p><strong>修改mysql默认字符集</strong></p>
<p>最简单的方法：修改mysql的<code>my.ini</code>配置文件.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">default-character-set = utf8</span><br><span class="line">character_set_server = utf8</span><br></pre></td></tr></table></figure></p>
<p><strong>python2.7查询mysql的中文乱码</strong></p>
<p>解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(&apos;utf-8&apos;)</span><br><span class="line"></span><br><span class="line"> conn = yield tornado_mysql</span><br><span class="line">.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;&apos;, db=&apos;test&apos;,charset=&apos;utf8&apos;)</span><br><span class="line"></span><br><span class="line">然后</span><br><span class="line">print value.decode(&apos;utf-8&apos;)</span><br><span class="line">如果是插入</span><br><span class="line">则是value = unicode(&apos;你好&apos;，’utf-8&apos;)</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库进阶：1 win10环境mongoDB部署]]></title>
      <url>http://hammercui.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E9%98%B6%EF%BC%9AmongoDB/</url>
      <content type="html"><![CDATA[<h1 id="win10环境部署"><a href="#win10环境部署" class="headerlink" title="win10环境部署"></a>win10环境部署</h1><p><strong>下载</strong></p>
<p>下载地址<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="external">官网</a><br>选择如图：<br><img src="http://7xrf0l.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160913115644.png" alt=""></p>
<p>安装过程，选择&gt;&gt;<strong>custom</strong>，这个是免费版本</p>
<p><strong>环境变量</strong></p>
<ol>
<li>把安装之后的<code>F:\App\mongoDb3.2.9\bin</code>添加到环境变量<code>Path</code>中</li>
<li>f盘根目录新建<code>mongodb\data</code>目录，’mongodb\logs\db.log`文件</li>
</ol>
<p><strong>命令行启动数据库</strong></p>
<ol>
<li>管理员启动cmd，输入<code>mongod.exe --dbpath=f:\mongodb\data</code><br>显示<img src="http://pic002.cnblogs.com/images/2012/335686/2012081615385166.png" alt=""><br>说明启动成功</li>
<li><p>浏览器输入<a href="http://localhost:27017/，会出现" target="_blank" rel="external">http://localhost:27017/，会出现</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It looks like you are trying to access MongoDB over HTTP on the native driver port.</span><br></pre></td></tr></table></figure>
</li>
<li><p>lunix环境将mongodb作为windows服务随机启动<br>cmd命令输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --dbpath f:\mongodb\db --logpath 、f:\mongodb\logs\db.log --install --serviceName mongodb --logappend --directoryperdb</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动mongodb服务<br>cmd命令输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mongodb</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>配置文件形式启动数据库</strong></p>
<p>在<code>f:\mongodb\</code>目录新建配置文件<code>mongodb.init</code>,内容如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#数据库</span><br><span class="line">dbpath=F:\mongodb\data</span><br><span class="line">directoryperdb = true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#日志</span><br><span class="line">logpath=F:\mongodb\logs\mongod.log</span><br><span class="line">#错误日志采用追加模式</span><br><span class="line">logappend=true</span><br><span class="line">#启用日志模式，默认启用</span><br><span class="line">journal=true </span><br><span class="line">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用，请设置为false</span><br><span class="line">quiet=true </span><br><span class="line">#cpu=true</span><br><span class="line">#verbose = true</span><br><span class="line"></span><br><span class="line"># 认证</span><br><span class="line">#autho =false</span><br><span class="line"></span><br><span class="line"># 管理</span><br><span class="line">#reset = true</span><br><span class="line"></span><br><span class="line"># 主节点配置</span><br><span class="line">master = true</span><br><span class="line"></span><br><span class="line"># 子节点配置</span><br><span class="line">#slave = true</span><br><span class="line">#source = 192.168.3.56</span><br><span class="line">#only = xxx</span><br><span class="line"></span><br><span class="line">#端口号 默认27017</span><br><span class="line">port=27017</span><br></pre></td></tr></table></figure>
<p>在<code>f:\mongodb\</code>目录新建启动文件<code>install.bat</code>,启动服务的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -f f:\mongodb\config.ini --install --serviceName &quot;mongodb&quot;</span><br></pre></td></tr></table></figure>
<p>对应的，新建<code>uninstall.bat</code>,关闭服务的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --remove</span><br></pre></td></tr></table></figure></p>
<p>然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mongodb</span><br></pre></td></tr></table></figure></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果您的MongoDB服务总是无法启动，或启动后一直在反复重启，那么请检查data目录下是否存在一个名为“mongod.lock”的文件，如果存在就删除它，然后重启服务即可。这种情况通常是由于MongoDB服务没有正常关闭造成的，比如意外断电。</p>
<p><strong>重点</strong><br>通过实践，发现在<code>windows</code>环境下表，使用<code>net start mongodb</code><br>启动非常不稳定，因此建议使用如下脚本命令，新建<code>start.bat</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del f:\mongodb\data\mongod.lock</span><br><span class="line">mongod.exe --dbpath=f:\mongodb\data --logpath=f:\mongodb\logs\db.log</span><br></pre></td></tr></table></figure></p>
<p>然后再启动一个dos,输入<code>mongo</code>，进入操作界面</p>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p>创建数据库，不存在，创建，存在则切换</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user &apos;dbname`</span><br></pre></td></tr></table></figure>
<p>查看所有数据库<br>show dbs</p>
<p>往student数据库插入一条数据，json形式<br>db.student.insert({“name”:”hammercui”})</p>
<p>删除数据库，之前先切换到当前数据库<br>db.dropDatabase()</p>
<p>集合删除<br>db.collection.drop()</p>
<p>student数据库的socre集合插入一个数据/文档<br>db.score.insert({yuwen:100,shuxue:100,lishi:100})</p>
<p>查询文档/数据<br>db.score.find()</p>
<p>更新文档/数据<br>db.score.update({条件}，{新值})</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python学习笔记：5 web开发]]></title>
      <url>http://hammercui.github.io/post/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A5-web%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h2 id="wsgi"><a href="#wsgi" class="headerlink" title="wsgi"></a>wsgi</h2><p>wsgi是最基础的接口实现方式，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def application(environ, start_response):</span><br><span class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/html&apos;)])</span><br><span class="line">    return &apos;&lt;h1&gt;Hello, web!&lt;/h1&gt;&apos;</span><br></pre></td></tr></table></figure>
<p>上面的application()函数就是符合WSGI标准的一个HTTP处理函数，它接收两个参数：</p>
<ul>
<li><p>environ：一个包含所有HTTP请求信息的dict对象；</p>
</li>
<li><p>start_response：一个发送HTTP响应的函数。</p>
</li>
</ul>
<p>运行wsgi服务器,<code>server.py</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># server.py</span><br><span class="line"># 从wsgiref模块导入:</span><br><span class="line">from wsgiref.simple_server import make_server</span><br><span class="line"># 导入我们自己编写的application函数:</span><br><span class="line">from hello import application</span><br><span class="line"></span><br><span class="line"># 创建一个服务器，IP地址为空，端口是8000，处理函数是application:</span><br><span class="line">httpd = make_server(&apos;&apos;, 8000, application)</span><br><span class="line">print &quot;Serving HTTP on port 8000...&quot;</span><br><span class="line"># 开始监听HTTP请求:</span><br><span class="line">httpd.serve_forever()</span><br></pre></td></tr></table></figure></p>
<p>但是维护起来太蛋疼了，我们需要引入web服务框架</p>
<p>有了Web框架，我们在编写Web应用时，注意力就从WSGI处理函数转移到URL+对应的处理函数，这样，编写Web App就更加简单了。</p>
<p>Flask:精简型web框架</p>
<p>Django：全能型Web框架；</p>
<p>web.py：一个小巧的Web框架；</p>
<p>Bottle：和Flask类似的Web框架；</p>
<p>Tornado：Facebook的开源异步Web框架。</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>跟c#的协程一样，一种子程序可以中断的机制。<br>协程的优点：</p>
<ol>
<li>协程跟多线程比，没有线程切换的开销，协程只有一个线程。</li>
<li>其次，协程最大的优势是不需要多线程的锁机制。</li>
</ol>
<p>所以在多核CPU的逻辑是，多进程+协程。<br>Python对协程的支持还非常有限，用在generator中的yield可以一定程度上实现协程。虽然支持不完全，但已经可以发挥相当大的威力了。</p>
<p>还记得我们学习生成器时（generator），使用的<code>yield</code>关键字吗,<strong>如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator</strong></p>
<p>以下举例，利用协程实现，无锁状态下的生产者，消费者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">def consumer():</span><br><span class="line">    r = &apos;&apos;</span><br><span class="line">    while True:</span><br><span class="line">        n = yield r</span><br><span class="line">        if not n:</span><br><span class="line">            return</span><br><span class="line">        print(&apos;[CONSUMER] Consuming %s...&apos; % n)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        r = &apos;200 OK&apos;</span><br><span class="line"></span><br><span class="line">def produce(c):</span><br><span class="line">    c.next()</span><br><span class="line">    n = 0</span><br><span class="line">    while n &lt; 5:</span><br><span class="line">        n = n + 1</span><br><span class="line">        print(&apos;[PRODUCER] Producing %s...&apos; % n)</span><br><span class="line">        r = c.send(n)</span><br><span class="line">        print(&apos;[PRODUCER] Consumer return: %s&apos; % r)</span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line">if __name__==&apos;__main__&apos;:</span><br><span class="line">    c = consumer()</span><br><span class="line">    produce(c)</span><br></pre></td></tr></table></figure></p>
<p><strong> gevent</strong></p>
<p>Python通过yield提供了对协程的基本支持，但是不完全。而第三方的gevent为Python提供了比较完善的协程支持。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python学习笔记：4 常用模块]]></title>
      <url>http://hammercui.github.io/post/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A4-%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h2 id="常用内建模块"><a href="#常用内建模块" class="headerlink" title="常用内建模块"></a>常用内建模块</h2><h3 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h3><p><strong>namedtuple</strong><br>用来自定义tuple。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from collections import nametuple</span><br><span class="line"></span><br><span class="line">Point = nametuple(&apos;Point&apos;,[&apos;x&apos;,&apos;y&apos;])</span><br><span class="line">p = Point(1,2)</span><br><span class="line">pring p.x,p.y</span><br></pre></td></tr></table></figure></p>
<p><strong>deque</strong><br>deque是为了高效实现插入和删除操作的双向列表，适合用于队列和栈<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from collections import deque</span><br><span class="line">q = deque([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;])</span><br><span class="line">a.append(&apos;xx)</span><br></pre></td></tr></table></figure></p>
<p><strong>defaultdict</strong><br>使用dict时，如果引用的Key不存在，就会抛出KeyError。如果希望key不存在时，返回一个默认值，就可以用defaultdict</p>
<p><strong>OrderedDict</strong></p>
<p>如果要保持Key的顺序，可以用OrderedDict：<br>注意，OrderedDict的Key会按照插入的顺序排列，不是Key本身排序：</p>
<h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import base64</span><br><span class="line">&gt;&gt;&gt; base64.b64encode(&apos;binary\x00string&apos;)</span><br><span class="line">&apos;YmluYXJ5AHN0cmluZw==&apos;</span><br><span class="line">&gt;&gt;&gt; base64.b64decode(&apos;YmluYXJ5AHN0cmluZw==&apos;)</span><br><span class="line">&apos;binary\x00string&apos;</span><br></pre></td></tr></table></figure>
<h4 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h4><p>Python的hashlib提供了常见的摘要算法，如MD5，SHA1等等。</p>
<p>什么是摘要算法呢？摘要算法又称哈希算法、散列算法。它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用16进制的字符串表示）</p>
<p><strong>md5使用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(&apos;how to use md5 in python hashlib?&apos;)</span><br><span class="line">print md5.hexdigest()</span><br></pre></td></tr></table></figure></p>
<p><strong>sha1使用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">sha1 = hashlib.sha1()</span><br><span class="line">sha1.update(&apos;how to use sha1 in &apos;)</span><br><span class="line">sha1.update(&apos;python hashlib?&apos;)</span><br><span class="line">print sha1.hexdigest()</span><br></pre></td></tr></table></figure></p>
<h2 id="常用第三方模块"><a href="#常用第三方模块" class="headerlink" title="常用第三方模块"></a>常用第三方模块</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>http://hammercui.github.io/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>正则表达式广泛用于前端，移动端，以及服务端，用来做字符串的规则校验，校验是否合法</p>
</blockquote>
<ul>
<li>\d可以匹配一个数字，\w可以匹配一个字母或数字</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;00\d&apos;可以匹配&apos;007&apos;，但无法匹配&apos;00A&apos;；</span><br><span class="line"></span><br><span class="line">&apos;\d\d\d&apos;可以匹配&apos;010&apos;；</span><br></pre></td></tr></table></figure>
<ul>
<li><code>.</code>匹配任意字符</li>
<li><code>*</code>表示任意个字符，包括0个，<code>+</code>表示至少一个字符，<code>?</code>表示0个或1个字符，<code>{n}</code>表示n个字符，<code>{n-m}</code>表示n-m个字符</li>
<li><code>[]</code>表示范围<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[0-9a-zA-Z\_]可以匹配一个数字,字母或者下划线</span><br><span class="line">[0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如&apos;a100&apos;，&apos;0_Z&apos;，&apos;Py3000&apos;等等</span><br><span class="line">``` </span><br><span class="line">* `A|B`可以匹配A或B，所以`(P|p)ython`可以匹配`&apos;Python&apos;`或者`&apos;python&apos;`</span><br><span class="line">* ^表示行的开头，^\d表示必须以数字开头。</span><br><span class="line">* $表示行的结束，\d$表示必须以数字结束。</span><br><span class="line"></span><br><span class="line">## python中的使用</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>import re<br>if re.match(r’^\d{3}-\d{3,8}$’,’010-55’):<br>    print ‘ok’<br>else:<br>    print ‘not match’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">无法识别连续的空格，用正则表达式试试：</span><br></pre></td></tr></table></figure></p>
<blockquote>
<blockquote>
<blockquote>
<p>re.split(r’\s+’, ‘a b   c’)<br>[‘a’, ‘b’, ‘c’]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">无论多少个空格都可以正常分割。加入,试试</span><br></pre></td></tr></table></figure></p>
<p>re.split(r’[\s\,]+’, ‘a,b, c  d’)<br>[‘a’, ‘b’, ‘c’, ‘d’]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">再加入;试试：</span><br></pre></td></tr></table></figure></p>
<p>re.split(r’[\s\,\;]+’, ‘a,b;; c  d’)<br>[‘a’, ‘b’, ‘c’, ‘d’]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**分组功能**</span><br><span class="line">加上（）用来做分组的拆分</span><br></pre></td></tr></table></figure></p>
<p>m = re.match(r’^(\d{3})-(\d{3,8})$’, ‘010-12345’)<br>m.group(1)<br>‘010’<br>m.group(2)<br>‘12345’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**预编译**</span><br><span class="line">如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式</span><br></pre></td></tr></table></figure></p>
</blockquote>
</blockquote>
</blockquote>
<p>import re</p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译:"></a>编译:</h1><p> re_telephone = re.compile(r’^(\d{3})-(\d{3,8})$’)</p>
<h1 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h1><p>re_telephone.match(‘010-12345’).groups()<br>执行结果：<br>(‘010’, ‘12345’)<br>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python学习笔记：3 io操作]]></title>
      <url>http://hammercui.github.io/post/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A3-io%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p>可以使用open来操作文件，但是每次都要close<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    f = open(&apos;iotest.txt&apos;, &apos;rb&apos;)</span><br><span class="line">    print f.read()</span><br><span class="line">finally:</span><br><span class="line">    if f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure></p>
<p>所以推荐使用with ，能自动完成close<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;iotest.txt&apos;, &apos;rb&apos;) as f:</span><br><span class="line">    print f.read().decode(&apos;gbk&apos;)</span><br></pre></td></tr></table></figure></p>
<p>练习：遍历目录下所有文件，查找文件名包含<code>test</code>的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">absolute_path = sys.path[0]</span><br><span class="line">#print absolute_path</span><br><span class="line">def search(path,name):</span><br><span class="line">    for x in os.listdir(path):</span><br><span class="line">        fullname = os.path.join(path,x)</span><br><span class="line">        if os.path.isfile(fullname):</span><br><span class="line">            #print &apos;文件：%s&apos; % fullname</span><br><span class="line">            if name in x:</span><br><span class="line">                print &apos;选中：%s&apos; % fullname</span><br><span class="line">        else:</span><br><span class="line">            search(fullname,name)</span><br><span class="line"></span><br><span class="line">search(absolute_path,&apos;test&apos;)</span><br></pre></td></tr></table></figure></p>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>我们把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling，在其他语言中也被称之为serialization，marshalling，flattening等等，都是一个意思</p>
<p>序列化文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;dump.txt&apos;, &apos;wb&apos;)</span><br><span class="line">pickle.dump(dic, f)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></p>
<p>反序列化文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;dump.txt&apos;, &apos;rb&apos;)</span><br><span class="line">d = pickle.load(f)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></p>
<p>字典序列化为json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str_json = json.dumps(dic)</span><br><span class="line">print str_json</span><br><span class="line">print json.loads(str_json)</span><br></pre></td></tr></table></figure></p>
<p>对象序列化为json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self,name,age,score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.score = score</span><br><span class="line">    def student2dict(self,object):</span><br><span class="line">        return &#123;&apos;name&apos;:self.name,&apos;age&apos;:self.age,&apos;score&apos;:self.score&#125;</span><br><span class="line"></span><br><span class="line">hammer = Student(&apos;hammer&apos;,27,100)</span><br><span class="line">print json.dumps(hammer,default=hammer.student2dict)</span><br></pre></td></tr></table></figure></p>
<h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>unix/lunix使用<code>fork()</code>,会复制当前进程出一个子进程</p>
<p>子进程永远返回0，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用getppid()就可以拿到父进程的ID。</p>
<p>Python的os模块封装了常见的系统调用，其中就包括fork，可以在Python程序中轻松创建子进程：<br><strong>Progress</strong><br>使用Progress来写快平台多进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 1 使用Process来创建进程</span><br><span class="line">def run_proc(name):</span><br><span class="line">    print &apos;Run child process %s (%s)...&apos; % (name, os.getpid())</span><br><span class="line"></span><br><span class="line">if __name__==&apos;__main__&apos;:</span><br><span class="line">    print &apos;Parent process %s.&apos; % os.getpid()</span><br><span class="line">    p = Process(target=run_proc, args=(&apos;test&apos;,))</span><br><span class="line">    print &apos;Process will start.&apos;</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print &apos;Process end.&apos;</span><br><span class="line">####################</span><br></pre></td></tr></table></figure></p>
<p><strong> Pool</strong><br>使用Pool进程池，来批量创造进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#2 学习使用Pool,进程池</span><br><span class="line">def long_time_task(name):</span><br><span class="line">    print &apos;执行 tast %s(%s)...&apos; % (name,os.getpid())</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * 3 )</span><br><span class="line">    end = time.time()</span><br><span class="line">    print &apos;Task %s run %0.2f seconds.&apos; % (name,end - start)</span><br><span class="line"></span><br><span class="line">if __name__ ==&apos;__main__&apos;:</span><br><span class="line">    print &apos;父进程id %s .&apos; % os.getpid()</span><br><span class="line">    p = Pool()</span><br><span class="line">    for i in range(5):</span><br><span class="line">        p.apply_async(long_time_task,args=(i,))</span><br><span class="line">    print &apos;等待所有子进程执行完毕.&apos;</span><br><span class="line">    p.close() #close之后Pool不能新增子进程了</span><br><span class="line">    p.join() # join方法会等待所有子进程执行完毕</span><br><span class="line">    print &apos;All done .&apos;</span><br><span class="line">#########################</span><br></pre></td></tr></table></figure></p>
<p><strong>进程间通信</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 3 学习使用Queue,实现进程间通信</span><br><span class="line"># 写数据进程执行的代码:</span><br><span class="line">def write(q):</span><br><span class="line">    for value in [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]:</span><br><span class="line">        print &apos;Put %s to queue...&apos; % value</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"># 读数据进程执行的代码:</span><br><span class="line">def read(q):</span><br><span class="line">    while True:</span><br><span class="line">        value = q.get(True)</span><br><span class="line">        print &apos;Get %s from queue.&apos; % value</span><br><span class="line"></span><br><span class="line">if __name__==&apos;__main__&apos;:</span><br><span class="line">    # 父进程创建Queue，并传给各个子进程：</span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    # 启动子进程pw，写入:</span><br><span class="line">    pw.start()</span><br><span class="line">    # 启动子进程pr，读取:</span><br><span class="line">    pr.start()</span><br><span class="line">    # 等待pw结束:</span><br><span class="line">    pw.join()</span><br><span class="line">    # pr进程里是死循环，无法等待其结束，只能强行终止:</span><br><span class="line">    pr.terminate()</span><br></pre></td></tr></table></figure></p>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>Python是真正的多线程。<br>Python的标准库提供了两个模块：<code>thread</code>和<code>threading</code>，<code>thread</code>是低级模块，<code>threading</code>是高级模块，对<code>thread</code>进行了封装。绝大多数情况下，我们只需要使用<code>threading</code>这个高级模块。</p>
<p>Python解释器由于设计时有GIL全局锁，导致了多线程无法利用多核。多线程的并发在Python中就是一个美丽的梦。<br>意思是Python虽然是实际设计的多线程，但是由于全局所的存在，无法使用CPU的多核性能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 学习使用多线程，主要是threading</span><br><span class="line">import time,threading</span><br><span class="line">def loop():</span><br><span class="line">    print &apos;thread %s is running ...&apos; % threading.current_thread().name</span><br><span class="line">    n = 0</span><br><span class="line">    while n &lt; 5:</span><br><span class="line">        n = n+1</span><br><span class="line">        print &apos;thread %s &gt;&gt;&gt; %s&apos; % (threading.current_thread().name,n)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">    print &apos;thread %s ended.&apos; % threading.current_thread().name</span><br><span class="line">print &apos;thread %s is running...&apos; % threading.current_thread().name</span><br><span class="line">t = threading.Thread(target=loop,name = &apos;ChildThread&apos;)</span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br><span class="line">print &apos;thread %s ended.&apos; % threading.current_thread().name</span><br></pre></td></tr></table></figure>
<h3 id="选择进程还是线程"><a href="#选择进程还是线程" class="headerlink" title="选择进程还是线程"></a>选择进程还是线程</h3><p>如果用多进程实现Master-Worker，主进程就是Master，其他进程就是Worker。</p>
<p>如果用多线程实现Master-Worker，主线程就是Master，其他线程就是Worker。</p>
<ul>
<li>cpu密集型：典型的是计算圆周率，视频解码</li>
<li>io密集型：典型的是web服务器<blockquote>
<p>如果充分利用操作系统提供的异步IO支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为<strong>事件驱动模型</strong>，Nginx就是支持异步IO的Web服务器。它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同）。<br>python单进程的异步编程模型称为<strong>协程</strong>，有了协程的支持，就可以<strong>基于事件驱动</strong>编写高效的多任务程序.<br>类似于nodejs服务器，也是采用的基于事件驱动的单进程单线程来执行多任务。</p>
</blockquote>
</li>
</ul>
<h3 id="分布式进程"><a href="#分布式进程" class="headerlink" title="分布式进程"></a>分布式进程</h3><p>为什么选用Process，而不是Thread呢，因为进程可以部署到不同的机器上，形成分布式进程。<br>比如：<br>机器1》 创建Queue，把Queue注册到网络上暴露，供其他进程访问</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python学习笔记：2.面向对象]]></title>
      <url>http://hammercui.github.io/post/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A2-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>一个py文件，就是一个模块（module），相同函数和变量名可以存在不同的模块中。一个py模块就是一个类，可以这么理解</p>
<p>为了避免类的冲突，引入包的概念。注意每一个包下面，都会有一个<strong>init</strong>.py的文件，他的模块名就是包名    </p>
<p><strong>作用域</strong></p>
<ul>
<li><p>正常的函数和变量名是公开的（public），可以被直接引用，比如：abc，x123，PI等；</p>
</li>
<li><p>类似_xxx和<strong>xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，</strong>abc等；</p>
</li>
</ul>
<p>之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。</p>
<p><strong>命令行运行</strong><br>在命令行运行py文件时，Python解释器把一个特殊变量<strong>name</strong>置为<strong>main</strong><br>因此以下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if __name__==&apos;__main__&apos;:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>
<p>在<code>$ python hello.py</code>运行时，会执行<code>test()</code>，但是import时不会执行</p>
<h3 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h3><p><strong>安装pip</strong><br>使用pip安装，可在命令行检查输入pip，检查是否安装。<br>如果安装不成功，可以直接去<a href="https://pypi.python.org/pypi/pip#downloads ：" target="_blank" rel="external">官网地址</a>下载<br><img src="http://img1.tuicool.com/qau2yqQ.png!web" alt=""></p>
<p>下载完成之后，解压到一个文件夹，用CMD控制台进入解压目录，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure></p>
<p>然后输入pip命令，检测是否安装成功</p>
<p><strong>安装PIL</strong><br>PIL是一个图片处理库，而且是跨平台的。<br>当我们执行以下失败时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PIL</span><br></pre></td></tr></table></figure></p>
<p>换成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure></p>
<p>然后引入时<code>fom PIL import Image</code></p>
<p><strong>在python2中使用python3</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from __future__ import unicode_literals</span><br><span class="line">from __future__ import division</span><br></pre></td></tr></table></figure></p>
<p>2.x里的字符串用’xxx’表示str，Unicode字符串用u’xxx’表示unicode<br>在3.x中，所有字符串都被视为unicode，写u’xxx’和’xxx’是完全一致的，但是str就必须写成b’xxx’，来表示“二进制字符串”</p>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>给对象发消息实际上就是调用对象对应的关联函数，我们称之为对象的方法（Method）。这里指明了方法跟函数概念上的区别</p>
<p>数据封装、继承和多态是面向对象的三大特点。</p>
<p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<strong>，在Python中，实例的变量名如果以</strong>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问</p>
<p><strong>继承和多态</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#父类</span><br><span class="line">class Animal(object):</span><br><span class="line">    def run(self):</span><br><span class="line">        print &quot;Animal is running&quot;</span><br><span class="line"></span><br><span class="line">class Dog(Animal):</span><br><span class="line">    pass</span><br><span class="line">class Cat(Animal):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">dog = Dog()</span><br><span class="line">dog.run()</span><br><span class="line">cat = Cat()</span><br><span class="line">cat.run()</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p><code>type()</code>,来判断对象类型。</p>
</li>
<li><p>通过内置的一系列函数，我们可以对任意一个Python对象进行剖析，拿到其内部的数据。</p>
</li>
<li><code>dir()</code>,来获得一个对象的所有属性跟方法。</li>
</ul>
<p>高级特性：多重继承，定制类，元类</p>
<p><strong>动态绑定</strong><br>动态绑定允许我们在程序运行的过程中动态给class加上功能，这在静态语言中很难实现</p>
<p>以下给一个实例绑定方法，其他实例没有这个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 给dog对象动态新增方法set_age</span><br><span class="line"></span><br><span class="line">def set_age(self,age): #定义一个函数作为实例方法</span><br><span class="line">    self.age = age</span><br><span class="line"></span><br><span class="line">dog.set_age = MethodType(set_age,dog,Dog)# 给实例绑定一个方法</span><br><span class="line">dog.set_age(25)</span><br><span class="line">print &apos;dog的age:%s&apos; % dog.age</span><br></pre></td></tr></table></figure></p>
<p>以下是给对象绑定方法，它的所有实例都会有这个方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def set_price(self,price): #定义一个函数作为实例方法</span><br><span class="line">    self.price = price</span><br><span class="line"></span><br><span class="line">Animal.set_price = MethodType(set_price,None,Animal)# 给类绑定一个方法</span><br><span class="line">dog.set_price(&apos;200$&apos;)</span><br><span class="line">cat.set_price(&apos;300$&apos;)</span><br><span class="line">print dog.price</span><br><span class="line">print cat.price</span><br></pre></td></tr></table></figure></p>
<p><strong>@property</strong><br>类似java的get set，避免把属性直接暴露<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def birth(self):</span><br><span class="line">        return self._birth</span><br><span class="line"></span><br><span class="line">    @birth.setter</span><br><span class="line">    def birth(self, value):</span><br><span class="line">        self._birth = value</span><br></pre></td></tr></table></figure></p>
<p><strong>多重继承</strong></p>
<p>区别于java的单继承<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Dog(Mammal, RunnableMixin, CarnivorousMixin):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">这样Dog类就继承了Mammal类，RunnableMixin类，CarnivorousMixin类</span><br></pre></td></tr></table></figure></p>
<p><strong>定制类</strong><br><code>__str__</code><br><code>__repr__</code><br>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;Student object (name=%s)&apos; % self.name</span><br><span class="line">    __repr__ = __str__</span><br></pre></td></tr></table></figure></p>
<p><code>__iter__</code>用法：<br>如果一个类想被用于for … in循环，类似list或tuple那样，就必须实现一个<strong>iter</strong>()方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的next()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。</p>
<p><code>__getattr__</code><br>利用完全动态的<strong>getattr</strong>写一个链式调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Chain(object):</span><br><span class="line">    # class实例化调用</span><br><span class="line">    def __init__(self,path = &apos;&apos;):</span><br><span class="line">        self._pathh = path</span><br><span class="line">    # 调用Chain不存在的属性时</span><br><span class="line">    def __getattr__(self, path):</span><br><span class="line">        return Chain(&apos;%s/%s&apos; % (self._pathh,path))</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self._pathh</span><br><span class="line"></span><br><span class="line">print Chain().statu.v2.member.center</span><br><span class="line">结果</span><br><span class="line">/statu/v2/member/center</span><br></pre></td></tr></table></figure>
<p><code>__call()__</code>可以使对象被当成函数进行调用</p>
<p><strong>使用元类</strong></p>
<ul>
<li>type() 动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的</li>
<li><p>type()函数既可以返回一个对象的类型，又可以创建出新的类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def fn(self, name=&apos;world&apos;): # 先定义函数</span><br><span class="line">       print(&apos;Hello, %s.&apos; % name)</span><br><span class="line">Hello = type(&apos;Hello&apos;, (object,), dict(hello=fn)) # 创建Hello class</span><br><span class="line">h = Hello()</span><br><span class="line">h.hello()</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>metaclass</code><br>控制类的创建行为，还可使使用这个，元类<br>先定义metaclass，就可以创建类，最后创建实例。所以，metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的“实例”。</p>
</li>
</ul>
<p><strong>调试</strong></p>
<ul>
<li>try catach</li>
<li>assert 断言，类似于print，输出内容</li>
<li>logging.info(),可以指定输出的级别<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>单元测试</strong><br>被测试文件<code>mydict.py</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># 单元测试</span><br><span class="line">class Dict(dict):</span><br><span class="line"></span><br><span class="line">    def __init__(self, **kw):</span><br><span class="line">        super(Dict, self).__init__(**kw)</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, key):</span><br><span class="line">        try:</span><br><span class="line">            return self[key]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise AttributeError(r&quot;&apos;Dict&apos; object has no attribute &apos;%s&apos;&quot; % key)</span><br><span class="line"></span><br><span class="line">    def __setattr__(self, key, value):</span><br><span class="line">        self[key] = value</span><br></pre></td></tr></table></figure></p>
<p>我们需要写的测试代码<code>mydict_test.py</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># 进行单元测试</span><br><span class="line">import unittest</span><br><span class="line">from mydict import Dict</span><br><span class="line">class TestDict(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    def test_init(self):</span><br><span class="line">        d = Dict(a=1, b=&apos;test&apos;)</span><br><span class="line">        self.assertEquals(d.a, 1)</span><br><span class="line">        self.assertEquals(d.b, &apos;test&apos;)</span><br><span class="line">        self.assertTrue(isinstance(d, dict))</span><br><span class="line"></span><br><span class="line">    def test_key(self):</span><br><span class="line">        d = Dict()</span><br><span class="line">        d[&apos;key&apos;] = &apos;value&apos;</span><br><span class="line">        self.assertEquals(d.key, &apos;value&apos;)</span><br><span class="line"></span><br><span class="line">    def test_attr(self):</span><br><span class="line">        d = Dict()</span><br><span class="line">        d.key = &apos;value&apos;</span><br><span class="line">        self.assertTrue(&apos;key&apos; in d)</span><br><span class="line">        self.assertEquals(d[&apos;key&apos;], &apos;value&apos;)</span><br><span class="line"></span><br><span class="line">    def test_keyerror(self):</span><br><span class="line">        d = Dict()</span><br><span class="line">        with self.assertRaises(KeyError):</span><br><span class="line">            value = d[&apos;empty&apos;]</span><br><span class="line"></span><br><span class="line">    def test_attrerror(self):</span><br><span class="line">        d = Dict()</span><br><span class="line">        with self.assertRaises(AttributeError):</span><br><span class="line">            value = d.empty</span><br><span class="line"></span><br><span class="line">    def setUp(self):</span><br><span class="line">        print &apos;setUp...开始测试&apos;</span><br><span class="line"></span><br><span class="line">    def tearDown(self):</span><br><span class="line">        print &apos;tearDown...测试结束&apos;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python学习笔记：1.基础]]></title>
      <url>http://hammercui.github.io/post/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A1-%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<blockquote>
<p>对于大多数程序员来说，有了一定功底，就会觉得语言大同小异，再学习动态语言，也不会觉得是难事。因此，我只做一些简单的记录，记录会跟静态语言混淆的地方。</p>
</blockquote>
<h1 id="数据类型，变量"><a href="#数据类型，变量" class="headerlink" title="数据类型，变量"></a>数据类型，变量</h1><ul>
<li><p>python中同一个变量，可以反复赋值，而且可以是不同类型的变量。这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错，笔记java.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = 123 # a是整数</span><br><span class="line">print a</span><br><span class="line">a = &apos;ABC&apos; # a变为字符串</span><br><span class="line">print a</span><br></pre></td></tr></table></figure>
</li>
<li><p>通常用全部大写，表示常量。Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法</p>
</li>
</ul>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><ul>
<li><p>Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素<br>用索引来访问list中每一个位置的元素，记得索引是从0开始的,这点跟lua有区别</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nameList = [&apos;xiaoming&apos;,&apos;xiaoli&apos;,&apos;xiaozhang&apos;]</span><br><span class="line">print nameList</span><br><span class="line">print len(nameList)</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素,以此类推，可以获取倒数第2个、倒数第3个：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameList[-1]</span><br><span class="line">nameList[-2]</span><br></pre></td></tr></table></figure>
</li>
<li><p>要删除list末尾的元素，用pop()方法</p>
</li>
<li>要删除指定位置的元素，用pop(i)方法，其中i是索引位置</li>
</ul>
<h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p>元组，跟list的区别是，元组是不能修改的，不能赋值成其他的元素，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameList = （&apos;xiaoming&apos;,&apos;xiaoli&apos;,&apos;xiaozhang&apos;）</span><br></pre></td></tr></table></figure></p>
<h2 id="dic"><a href="#dic" class="headerlink" title="dic"></a>dic</h2><p>字典，普遍用法</p>
<ul>
<li><p>判断key是否存在</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;key&apos; in dict</span><br><span class="line">或者</span><br><span class="line">dict.get(&apos;key&apos;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除key:pop(key)</p>
</li>
</ul>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。<br>s = set([1, 2, 3])</p>
<ul>
<li><p>重复元素在set中自动被过滤：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = set([1, 1, 2, 2, 3, 3])</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">set([1, 2, 3])</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果</p>
</li>
<li><p>通过remove(key)方法可以删除元素：</p>
</li>
<li>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s1 = set([1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; s2 = set([2, 3, 4])</span><br><span class="line">&gt;&gt;&gt; s1 &amp; s2</span><br><span class="line">set([2, 3])</span><br><span class="line">&gt;&gt;&gt; s1 | s2</span><br><span class="line">set([1, 2, 3, 4])</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><ul>
<li>支持中文，需要在开头添加</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br></pre></td></tr></table></figure>
<ul>
<li>在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;Hi ,%s,you have 钱数:%d&apos; % (&apos;Hammercui&apos;,10000)</span><br><span class="line">print a</span><br><span class="line"></span><br><span class="line">常见的占位符有：</span><br><span class="line"></span><br><span class="line">%d	整数</span><br><span class="line">%f	浮点数</span><br><span class="line">%s	字符串</span><br><span class="line">%x	十六进制整数</span><br></pre></td></tr></table></figure>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul>
<li>abs()绝对值函数</li>
<li>cmp(x,y)比较函数</li>
<li>int() 转int函数</li>
<li>声明函数：<code>def</code>,依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def my_abs(x):</span><br><span class="line">    if x&gt;0:</span><br><span class="line">        return x</span><br><span class="line">    else:</span><br><span class="line">        return -x</span><br><span class="line"></span><br><span class="line">print my_abs(-2000)</span><br></pre></td></tr></table></figure>
<ul>
<li>默认参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def power(x, n=2):</span><br><span class="line">    s = 1</span><br><span class="line">    while n &gt; 0:</span><br><span class="line">        n = n - 1</span><br><span class="line">        s = s * x</span><br><span class="line">    return s</span><br><span class="line"></span><br><span class="line">power(5)</span><br></pre></td></tr></table></figure>
<ul>
<li>fact(n)阶乘函数。递归不做优化的话，会导致栈溢出</li>
</ul>
<h2 id="slice切片操作符"><a href="#slice切片操作符" class="headerlink" title="slice切片操作符"></a>slice切片操作符</h2><p>L[0:3]表示从list L中取出索引0到3，不包括3的元素，返回list<br>前10个数，每两个取一个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> L[:10:2]</span><br><span class="line">[0, 2, 4, 6, 8]</span><br></pre></td></tr></table></figure></p>
<ul>
<li>字符串’xxx’或Unicode字符串u’xxx’也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;ABCDEFG&apos;[:3]</span><br><span class="line">&apos;ABC&apos;</span><br><span class="line">&gt;&gt;&gt; &apos;ABCDEFG&apos;[::2]</span><br><span class="line">&apos;ACEG&apos;</span><br></pre></td></tr></table></figure>
<h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><ul>
<li><p>判断是否能是迭代</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Iterable</span><br><span class="line">&gt;&gt;&gt; isinstance(&apos;abc&apos;, Iterable) # str是否可迭代</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance([1,2,3], Iterable) # list是否可迭代</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(123, Iterable) # 整数是否可迭代</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果要对list实现类似Java那样的下标循环怎么办？Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 模仿java写法</span><br><span class="line">for i,value in enumerate([&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]):</span><br><span class="line">    print i,value</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><p>但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？方法一是循环，方法二如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11)]</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure></p>
<p>可以增加条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0]</span><br><span class="line">[4, 16, 36, 64, 100]</span><br></pre></td></tr></table></figure></p>
<p>还可以双层循环<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [m + n for m in &apos;ABC&apos; for n in &apos;XYZ&apos;]</span><br><span class="line">[&apos;AX&apos;, &apos;AY&apos;, &apos;AZ&apos;, &apos;BX&apos;, &apos;BY&apos;, &apos;BZ&apos;, &apos;CX&apos;, &apos;CY&apos;, &apos;CZ&apos;]</span><br></pre></td></tr></table></figure></p>
<h2 id="生成器generator"><a href="#生成器generator" class="headerlink" title="生成器generator"></a>生成器generator</h2><p>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器（Generator）</p>
<p>定义generator的另一种方法。如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator</p>
<p>而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。这样就保证了，每次next都是从上次的结果之后执行的。</p>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>指函数名也是变量，可以把函数作为参数传递。<br>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式</p>
<h2 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h2><p>接收两个参数，第一个函数，第二个序列（可以是list,tuple），返回结果list<br>比如，把一个int类型的list转成string类型的list<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map(str,[1,2,3,4])</span><br><span class="line">结果：</span><br><span class="line">[&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;]</span><br></pre></td></tr></table></figure></p>
<h2 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h2><p>接收两个参数，第一函数，但这个函数必须<strong>接收2个参数</strong>，第二个序列，返回list。<br>reduce与map的区别是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure></p>
<p>相当于每次传入2个参数，把结果作为新的参数，跟下一个参数再传入</p>
<h2 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h2><p>传入两个参数，和map()不同的时，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。</p>
<p>例如，在一个list中，删掉偶数，只保留奇数，可以这么写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def is_odd(n):</span><br><span class="line">    return n % 2 == 1</span><br><span class="line"></span><br><span class="line">filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15])</span><br><span class="line">结果</span><br><span class="line"># 结果: [1, 5, 9, 15]</span><br></pre></td></tr></table></figure></p>
<h2 id="sorted函数"><a href="#sorted函数" class="headerlink" title="sorted函数"></a>sorted函数</h2><p>与其他相反，序列在前，函数在后</p>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>比如函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def f(x)</span><br><span class="line">	return x*x</span><br></pre></td></tr></table></figure></p>
<p>可以写作<br><code>lambda x:x*x</code><br>用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数</p>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>假设我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改now()函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。</p>
<h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p>
<p>比如二进制转换成int<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def int2(x, base=2):</span><br><span class="line">    return int(x, base)</span><br><span class="line"></span><br><span class="line">int2(&apos;1000000&apos;)</span><br><span class="line">结果</span><br><span class="line">64</span><br></pre></td></tr></table></figure></p>
<p>使用偏函数写法就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import functools</span><br><span class="line">int2 = functools.partical(int,base=2)</span><br><span class="line">int2(&apos;1000000&apos;)</span><br><span class="line">结果</span><br><span class="line">64</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android最佳实践9-2：greenDao的数据库升级]]></title>
      <url>http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B59-2%EF%BC%9AgreenDao%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%87%E7%BA%A7/</url>
      <content type="html"><![CDATA[<h1 id="app开发期间的数据库升级"><a href="#app开发期间的数据库升级" class="headerlink" title="app开发期间的数据库升级"></a>app开发期间的数据库升级</h1><p>我们使用DevOpenHelper打开数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> DaoMaster.DevOpenHelper helper = </span><br><span class="line">new DevOpenHelper(application,&quot;xue_old.db&quot;,null);</span><br></pre></td></tr></table></figure></p>
<p>DevOpenHelper内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static class DevOpenHelper extends OpenHelper &#123;</span><br><span class="line">      public DevOpenHelper(Context context, String name, CursorFactory factory) &#123;</span><br><span class="line">          super(context, name, factory);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      @Override</span><br><span class="line">      public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</span><br><span class="line">          Log.i(&quot;greenDAO&quot;, &quot;Upgrading schema from version &quot; + oldVersion + &quot; to &quot; + newVersion + &quot; by dropping all tables&quot;);</span><br><span class="line">          dropAllTables(db, true);</span><br><span class="line">          onCreate(db);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>其中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//删除当前所有表</span><br><span class="line">dropAllTables(db, true);</span><br><span class="line">//新建当前所有表</span><br><span class="line">onCreate(db);</span><br></pre></td></tr></table></figure>
<p>这种方式意味着每次都重新创建，所以数据不会报错</p>
<h1 id="app-上线后的数据库升级，Migration（合并）方式"><a href="#app-上线后的数据库升级，Migration（合并）方式" class="headerlink" title="app 上线后的数据库升级，Migration（合并）方式"></a>app 上线后的数据库升级，Migration（合并）方式</h1><p>我们自己新建一个HMROpenHelper,继承自OpenHelper<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class HMROpenHelper extends DaoMaster.OpenHelper &#123;</span><br><span class="line"></span><br><span class="line">    public HMROpenHelper(Context context, String name, SQLiteDatabase.CursorFactory factory) &#123;</span><br><span class="line">        super(context, name, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 数据库升级</span><br><span class="line">     * @param db</span><br><span class="line">     * @param oldVersion</span><br><span class="line">     * @param newVersion</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</span><br><span class="line">        //操作数据库的更新</span><br><span class="line">        MigrationHelper.migrate(db,NoteDao.class,LessonDao.class,ZhangDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>数据库的合并如下<br>MigrationHelper.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">public class MigrationHelper &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 调用升级方法</span><br><span class="line">     * @param db</span><br><span class="line">     * @param daoClasses 一系列dao.class</span><br><span class="line">     */</span><br><span class="line">    public static void migrate(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses) &#123;</span><br><span class="line">        //1 新建临时表</span><br><span class="line">        generateTempTables(db, daoClasses);</span><br><span class="line">        //2 创建新表</span><br><span class="line">        createAllTables(db, false, daoClasses);</span><br><span class="line">        //3 临时表数据写入新表，删除临时表</span><br><span class="line">        restoreData(db, daoClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成临时表，存储旧的表数据</span><br><span class="line">     * @param db</span><br><span class="line">     * @param daoClasses</span><br><span class="line">     */</span><br><span class="line">    private static void generateTempTables(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses) &#123;</span><br><span class="line">        //方法2</span><br><span class="line">        for (int i=0;i&lt;daoClasses.length;i++)&#123;</span><br><span class="line">            DaoConfig daoConfig = new DaoConfig(db,daoClasses[i]);</span><br><span class="line">            String tableName = daoConfig.tablename;</span><br><span class="line">            if (!checkTable(db,tableName))</span><br><span class="line">                continue;</span><br><span class="line">            String tempTableName = daoConfig.tablename.concat(&quot;_TEMP&quot;);</span><br><span class="line">            StringBuilder insertTableStringBuilder = new StringBuilder();</span><br><span class="line">            insertTableStringBuilder.append(&quot;alter table &quot;)</span><br><span class="line">                    .append(tableName)</span><br><span class="line">                    .append(&quot; rename to &quot;)</span><br><span class="line">                    .append(tempTableName)</span><br><span class="line">                    .append(&quot;;&quot;);</span><br><span class="line">            db.execSQL(insertTableStringBuilder.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 检测table是否存在</span><br><span class="line">     * @param db</span><br><span class="line">     * @param tableName</span><br><span class="line">     */</span><br><span class="line">    private static Boolean checkTable(SQLiteDatabase db,String  tableName)&#123;</span><br><span class="line">        StringBuilder query = new StringBuilder();</span><br><span class="line">        query.append(&quot;SELECT count(*) FROM sqlite_master WHERE type=&apos;table&apos; AND name=&apos;&quot;).append(tableName).append(&quot;&apos;&quot;);</span><br><span class="line">        Cursor c = db.rawQuery(query.toString(), null);</span><br><span class="line">        if (c.moveToNext())&#123;</span><br><span class="line">            int count = c.getInt(0);</span><br><span class="line">            if(count&gt;0)&#123;</span><br><span class="line">               return true;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除所有旧表</span><br><span class="line">     * @param db</span><br><span class="line">     * @param ifExists</span><br><span class="line">     * @param daoClasses</span><br><span class="line">     */</span><br><span class="line">    private static void dropAllTables(SQLiteDatabase db, boolean ifExists, @NonNull Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses) &#123;</span><br><span class="line">        reflectMethod(db, &quot;dropTable&quot;, ifExists, daoClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建新的表结构</span><br><span class="line">     * @param db</span><br><span class="line">     * @param ifNotExists</span><br><span class="line">     * @param daoClasses</span><br><span class="line">     */</span><br><span class="line">    private static void createAllTables(SQLiteDatabase db, boolean ifNotExists, @NonNull Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses) &#123;</span><br><span class="line">        reflectMethod(db, &quot;createTable&quot;, ifNotExists, daoClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建根删除都在NoteDao声明了，可以直接拿过来用</span><br><span class="line">     * dao class already define the sql exec method, so just invoke it</span><br><span class="line">     */</span><br><span class="line">    private static void reflectMethod(SQLiteDatabase db, String methodName, boolean isExists, @NonNull Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses) &#123;</span><br><span class="line">        if (daoClasses.length &lt; 1) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            for (Class cls : daoClasses) &#123;</span><br><span class="line">                //根据方法名，找到声明的方法</span><br><span class="line">                Method method = cls.getDeclaredMethod(methodName, SQLiteDatabase.class, boolean.class);</span><br><span class="line">                method.invoke(null, db, isExists);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 临时表的数据写入新表</span><br><span class="line">     * @param db</span><br><span class="line">     * @param daoClasses</span><br><span class="line">     */</span><br><span class="line">    private static void restoreData(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses) &#123;</span><br><span class="line">        for (int i = 0; i &lt; daoClasses.length; i++) &#123;</span><br><span class="line">            DaoConfig daoConfig = new DaoConfig(db, daoClasses[i]);</span><br><span class="line">            String tableName = daoConfig.tablename;</span><br><span class="line">            String tempTableName = daoConfig.tablename.concat(&quot;_TEMP&quot;);</span><br><span class="line">            if (!checkTable(db,tempTableName))</span><br><span class="line">                continue;</span><br><span class="line">            // get all columns from tempTable, take careful to use the columns list</span><br><span class="line">            List&lt;String&gt; columns = getColumns(db, tempTableName);</span><br><span class="line">            //新表，临时表都包含的字段</span><br><span class="line">            ArrayList&lt;String&gt; properties = new ArrayList&lt;&gt;(columns.size());</span><br><span class="line">            for (int j = 0; j &lt; daoConfig.properties.length; j++) &#123;</span><br><span class="line">                String columnName = daoConfig.properties[j].columnName;</span><br><span class="line">                if (columns.contains(columnName)) &#123;</span><br><span class="line">                    properties.add(columnName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (properties.size() &gt; 0) &#123;</span><br><span class="line">                final String columnSQL = TextUtils.join(&quot;,&quot;, properties);</span><br><span class="line"></span><br><span class="line">                StringBuilder insertTableStringBuilder = new StringBuilder();</span><br><span class="line">                insertTableStringBuilder.append(&quot;INSERT INTO &quot;).append(tableName).append(&quot; (&quot;);</span><br><span class="line">                insertTableStringBuilder.append(columnSQL);</span><br><span class="line">                insertTableStringBuilder.append(&quot;) SELECT &quot;);</span><br><span class="line">                insertTableStringBuilder.append(columnSQL);</span><br><span class="line">                insertTableStringBuilder.append(&quot; FROM &quot;).append(tempTableName).append(&quot;;&quot;);</span><br><span class="line">                db.execSQL(insertTableStringBuilder.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            StringBuilder dropTableStringBuilder = new StringBuilder();</span><br><span class="line">            dropTableStringBuilder.append(&quot;DROP TABLE &quot;).append(tempTableName);</span><br><span class="line">            db.execSQL(dropTableStringBuilder.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static List&lt;String&gt; getColumns(SQLiteDatabase db, String tableName) &#123;</span><br><span class="line">        List&lt;String&gt; columns = null;</span><br><span class="line">        Cursor cursor = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            cursor = db.rawQuery(&quot;SELECT * FROM &quot; + tableName + &quot; limit 0&quot;, null);</span><br><span class="line">            if (null != cursor &amp;&amp; cursor.getColumnCount() &gt; 0) &#123;</span><br><span class="line">                columns = Arrays.asList(cursor.getColumnNames());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (cursor != null)</span><br><span class="line">                cursor.close();</span><br><span class="line">            if (null == columns)</span><br><span class="line">                columns = new ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        return columns;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其核心思路是<br>1 把旧表改为临时表<br>2 建立新表<br>3 临时表数据写入新表，删除临时表</p>
<p>这样我们就可以直接打开数据库进行更新操作了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HMROpenHelper helper = new HMROpenHelper(application, &quot;xue_old.db&quot;, null);</span><br><span class="line">       SQLiteDatabase sqlDB = helper.getWritableDatabase();</span><br><span class="line">       return  sqlDB;</span><br></pre></td></tr></table></figure></p>
<h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><p>别忘了更新时<code>SCHEMA_VERSION</code>自动加1,不然不会执行更新<br>位于<code>DaoMaster.java</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android最佳实践11：butterknife框架使用]]></title>
      <url>http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B511%EF%BC%9Abutterknife%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>butterknife也是一个依赖注入框架，借助annonation实现view的快速初始化，解除findViewById的烦恼</p>
<h1 id="工程引入"><a href="#工程引入" class="headerlink" title="工程引入"></a>工程引入</h1><p>配置project的<code>build.gradle</code>，来引入<code>android-apt</code>插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">   &#125;</span><br><span class="line">  dependencies &#123;</span><br><span class="line">    classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>配置module的<code>build.gradle</code>,apply the <code>android-apt</code> plugin,and add the <code>Butter Knife</code> dependencies.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apply plugin: &apos;android-apt`</span><br><span class="line"></span><br><span class="line">android&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies&#123;</span><br><span class="line"> compile &apos;com.jakewharton:butterknife:8.2.1&apos;</span><br><span class="line"> apt &apos;com.jakewharton:butterknife-compiler:8.2.1&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><em>注意</em></strong><br>butter knife尽量不要在library中使用，如果要用，还得转R2,太麻烦了</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="使用-BindView注解view"><a href="#使用-BindView注解view" class="headerlink" title="使用@BindView注解view"></a>使用@BindView注解view</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class ExampleActivity extends Activity &#123;</span><br><span class="line">  @BindView(R.id.title) TextView title;</span><br><span class="line">  @BindView(R.id.subtitle) TextView subtitle;</span><br><span class="line">  @BindView(R.id.footer) TextView footer;</span><br><span class="line"></span><br><span class="line">  @Override public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.simple_activity);</span><br><span class="line">    ButterKnife.bind(this);</span><br><span class="line">    // TODO Use fields...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Resource的注解"><a href="#Resource的注解" class="headerlink" title="Resource的注解"></a>Resource的注解</h2><p>@BindBool, @BindColor, @BindDimen, @BindDrawable, @BindInt, @BindString</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class ExampleActivity extends Activity &#123;</span><br><span class="line">  @BindString(R.string.title) String title;</span><br><span class="line">  @BindDrawable(R.drawable.graphic) Drawable graphic;</span><br><span class="line">  @BindColor(R.color.red) int red; // int or ColorStateList field</span><br><span class="line">  @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="non-activity的注解"><a href="#non-activity的注解" class="headerlink" title="non-activity的注解"></a>non-activity的注解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class FancyFragment extends Fragment &#123;</span><br><span class="line">  @BindView(R.id.button1) Button button1;</span><br><span class="line">  @BindView(R.id.button2) Button button2;</span><br><span class="line"></span><br><span class="line">  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</span><br><span class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, false);</span><br><span class="line">    ButterKnife.bind(this, view);</span><br><span class="line">    // TODO Use fields...</span><br><span class="line">    return view;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以在ViewHolder中使用</p>
<h2 id="View-List"><a href="#View-List" class="headerlink" title="View List"></a>View List</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@BindViews(&#123; R.id.first_name, R.id.middle_name, R.id.last_name &#125;)</span><br><span class="line">List&lt;EditText&gt; nameViews;</span><br></pre></td></tr></table></figure>
<p>使用<code>apply</code>方法，能一次操作整个View的List<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ButterKnife.apply(nameViews, DISABLE);</span><br><span class="line">ButterKnife.apply(nameViews, ENABLED, false);</span><br></pre></td></tr></table></figure></p>
<p>包括设置属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ButterKnife.apply(nameViews, View.ALPHA, 0.0f);</span><br></pre></td></tr></table></figure></p>
<h2 id="Listener的绑定"><a href="#Listener的绑定" class="headerlink" title="Listener的绑定"></a>Listener的绑定</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@OnClick(R.id.submit)</span><br><span class="line">public void submit(View view) &#123;</span><br><span class="line">  // TODO submit data to server...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="绑定的释放"><a href="#绑定的释放" class="headerlink" title="绑定的释放"></a>绑定的释放</h2><p>由于Fragment的生命周期区别于activity，当我们在Fragment的onCreatView做绑定的时候，要在onDestoryView中设置views为null。Butter Knife 返回一个Unbider实例来解决这个问题，<br>eg:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class FancyFragment extends Fragment &#123;</span><br><span class="line">  @BindView(R.id.button1) Button button1;</span><br><span class="line">  @BindView(R.id.button2) Button button2;</span><br><span class="line">  private Unbinder unbinder;</span><br><span class="line"></span><br><span class="line">  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</span><br><span class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, false);</span><br><span class="line">    unbinder = ButterKnife.bind(this, view);</span><br><span class="line">    // TODO Use fields...</span><br><span class="line">    return view;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override public void onDestroyView() &#123;</span><br><span class="line">    super.onDestroyView();</span><br><span class="line">    unbinder.unbind();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="更懒的方式"><a href="#更懒的方式" class="headerlink" title="更懒的方式"></a>更懒的方式</h1><p>使用Zelezny插件，一键生成view<br><img src="http://upload-images.jianshu.io/upload_images/1833901-f6092a8aeda8a37e.gif?imageMogr2/auto-orient/strip" alt=""></p>
<p>如何找到插件<br><img src="http://upload-images.jianshu.io/upload_images/1833901-2bc52b5e7e37e664.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">github地址</a><br><a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="external">文档介绍·英文</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android最佳实践7:androidannotations框架]]></title>
      <url>http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B57%EF%BC%9Aandroidannotations%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h1 id="AndroidAnnotations"><a href="#AndroidAnnotations" class="headerlink" title="AndroidAnnotations"></a>AndroidAnnotations</h1><p>android依赖注入框架，主要作用于view层。</p>
<h1 id="工程引入"><a href="#工程引入" class="headerlink" title="工程引入"></a>工程引入</h1><blockquote>
<p>android studio环境</p>
</blockquote>
<p>工程的build.gradle如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">      mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">       	 ···</span><br><span class="line">        // replace with the current version of the android-apt plugin</span><br><span class="line">        classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    mavenLocal()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>app/build.gradle如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;android-apt&apos;</span><br><span class="line">def AAVersion = &apos;XXX&apos;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">	...</span><br><span class="line">    apt &quot;org.androidannotations:androidannotations:$AAVersion&quot;</span><br><span class="line">    compile &quot;org.androidannotations:androidannotations-api:$AAVersion&quot;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apt &#123;</span><br><span class="line">    arguments &#123;</span><br><span class="line">        androidManifestFile variant.outputs[0]?.processResources?.manifestFile</span><br><span class="line">        // if you have multiple outputs (when using splits), you may want to have other index than 0</span><br><span class="line"></span><br><span class="line">        // you should set your package name here if you are using different application IDs</span><br><span class="line">        // resourcePackageName &quot;your.package.name&quot;</span><br><span class="line"></span><br><span class="line">        // You can set optional annotation processing options here, like these commented options:</span><br><span class="line">        // logLevel &apos;INFO&apos;</span><br><span class="line">        // logFile &apos;/var/log/aa.log&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h1><p><a href="http://blog.csdn.net/zjbpku/article/details/18676149" target="_blank" rel="external">Android开源框架(一)：AndroidAnnotations</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android最佳实践8：dagger2框架]]></title>
      <url>http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B58%EF%BC%9Adragger2%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h1 id="dagger2"><a href="#dagger2" class="headerlink" title="dagger2"></a>dagger2</h1><p><a href="http://google.github.io/dagger/" target="_blank" rel="external">dagger2</a>是一种依赖注入框架，由square开发，现在google负责维护。dagger2一般配合mvp，在mvp已经解耦的基础上，让解耦变得更彻底，以便于测试及维护。</p>
<h2 id="dagger2与dagger的区别"><a href="#dagger2与dagger的区别" class="headerlink" title="dagger2与dagger的区别"></a>dagger2与dagger的区别</h2><ul>
<li>再也没有使用反射：图的验证、配置和预先设置都在编译的时候执行。</li>
<li>容易调试和可跟踪：完全具体地调用提供和创建的堆栈</li>
<li>更好的性能：谷歌声称他们提高了13%的处理性能</li>
<li>代码混淆：使用派遣方法，就如同自己写的代码一样</li>
</ul>
<p>当然所有这些很棒的特点都需要付出一个代价，那就是缺乏灵活性，例如：Dagger2没用反射所以没有动态机制。</p>
<h2 id="注解含义"><a href="#注解含义" class="headerlink" title="注解含义"></a>注解含义</h2><ul>
<li><p><code>@Inject</code>: 通常在需要依赖的地方使用这个注解，标识我们需要的实例。另外在<code>@Provide</code>中，直接返回的实例，需要在类的构造函数添加<code>@Inject</code></p>
</li>
<li><p><code>@Module</code>: 我们定义一个类，用<code>@Module注</code>解,<code>Modules</code>类里面的方法专门提供依赖。这样<code>Dagger</code>在构造类的实例的时候，就知道从哪里去找到需要的依赖。modules的一个重要特征是它们设计为分区并组合在一起（比如说，在我们的Component中可以有多个组成在一起的modules）。</p>
</li>
<li><p><code>@Provide</code>: 在<code>Modules</code>类中，我们定义的方法是用这个注解。这些方法都是用来提供依赖，生成实例的。</p>
</li>
<li><p><code>@Singlton</code>：常用在<code>@Provide</code>之前，表示提供的依赖是个单例，也就是每次都提供同一个实体。</p>
</li>
<li><p><code>@Component</code>: 我们定义一个接口，用<code>Components</code>注解，我们可以理解为Component就是一个注入器，是@Inject和@Module的桥梁。它的主要作用就是连接这两个部分。 Components可以提供所有定义了的类型的实例，比如：我们必须用@Component注解一个接口然后列出所有的@Modules组成该组件，如果缺失了任何一块都会在编译的时候报错。所有的组件都可以通过它的<code>Modules</code>知道依赖的范围。</p>
</li>
<li><p><code>@Scope</code>: Dagger2可以通过自定义注解限定注解作用域。后面会演示一个例子，这是一个非常强大的特点，因为就如前面说的一样，没 必要让每个对象都去了解如何管理他们的实例。在scope的例子中，我们用自定义的@PerActivity注解一个类，所以这个对象存活时间就和 activity的一样。简单来说就是我们可以定义所有范围的粒度(@PerFragment, @PerUser, 等等)。</p>
</li>
<li><p><code>Qualifier</code>: 当类的类型不足以鉴别一个依赖的时候，我们就可以使用这个注解标示。例如：在Android中，我们会需要不同类型的context，所以我们就可以定义 qualifier注解“@ForApplication”和“@ForActivity”，这样当注入一个context的时候，我们就可以告诉 Dagger我们想要哪种类型的context。</p>
</li>
</ul>
<h1 id="引入工程"><a href="#引入工程" class="headerlink" title="引入工程"></a>引入工程</h1><p>在app/build.gradle添加依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apply plugin:&apos;android-apt&apos;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">...</span><br><span class="line">	//dragger2</span><br><span class="line">    //provided &apos;org.glassfish:javax.annotation:10.0-b28&apos;</span><br><span class="line">    apt &apos;com.google.dagger:dagger-compiler:2.0.2&apos;</span><br><span class="line">    compile &apos;com.google.dagger:dagger:2.0.2&apos;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为Dragger2是基于注解的，它会预先生成一些类文件，所以需要在整个项目的/build.gradle文件中加上apt工具:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        ...</span><br><span class="line">        classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="demo详解"><a href="#demo详解" class="headerlink" title="demo详解"></a>demo详解</h1><p>我们通过使用greenDao的示例来说明，引入dagger2的好处。greenDao是非常流行的管理sqldata的orm，我们希望他以单例的形式存在，生命周期等同于Application。</p>
<h2 id="首先，创建GreenDaoModule-java"><a href="#首先，创建GreenDaoModule-java" class="headerlink" title="首先，创建GreenDaoModule.java"></a>首先，创建GreenDaoModule.java</h2><p>GreenDaoModule.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@Module</span><br><span class="line">public class GreenDaoModule &#123;</span><br><span class="line"></span><br><span class="line">    private final BaseApp application;</span><br><span class="line"></span><br><span class="line">    public GreenDaoModule(BaseApp application)&#123;</span><br><span class="line">        this.application = application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Provides</span><br><span class="line">    @Singleton</span><br><span class="line">    public BaseApp provideApplication()&#123;</span><br><span class="line">        return application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Provides</span><br><span class="line">    @Singleton</span><br><span class="line">    SQLiteDatabase provideSQLiteDatabase(BaseApp baseApp)&#123;</span><br><span class="line">        DaoMaster.OpenHelper helper = new DaoMaster.DevOpenHelper(baseApp, &quot;zlot-db&quot;, null);</span><br><span class="line">        SQLiteDatabase sqlDB = helper.getWritableDatabase();</span><br><span class="line">        return sqlDB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Provides</span><br><span class="line">    @Singleton</span><br><span class="line">    DaoMaster provideDaoMaster(SQLiteDatabase sqLiteDatabase)&#123;</span><br><span class="line">        DaoMaster daoMaster = new DaoMaster(sqLiteDatabase);</span><br><span class="line">        return daoMaster;</span><br><span class="line">    &#125;</span><br><span class="line">    @Provides</span><br><span class="line">    @Singleton</span><br><span class="line">    DaoSession provideDaoSession(DaoMaster daoMaster)&#123;</span><br><span class="line">        DaoSession daoSession = daoMaster.newSession();</span><br><span class="line">        return daoSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中，我们提供了BaseApp，SQLiteDatabase，DaoMaster，DaoSession的依赖，均是单例模式。<br>在目标类注解的时候，会在GreenDaoModule寻找依赖并提供实例。</p>
<h2 id="创建AppComponent-java，提供注射器"><a href="#创建AppComponent-java，提供注射器" class="headerlink" title="创建AppComponent.java，提供注射器"></a>创建AppComponent.java，提供注射器</h2><p>我们新建一个interface，添加@Component注解，就提供了一个注射器，桥接@Inject跟@Module。</p>
<p>AppComponent.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Singleton</span><br><span class="line">@Component(modules = &#123;GreenDaoModule.class&#125;)</span><br><span class="line">public interface AppComponent &#123;</span><br><span class="line">    BaseApp getApplication();</span><br><span class="line"></span><br><span class="line">    BasePresenter inject(BasePresenter basePresenter);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中BasePresenter是注射目标，也就是说想要在哪个类里面使用依赖注解，必须在component中注射。</p>
<p>比如我们想在BasePresenter这个类里，使用依赖注入DaoSession实例，必须在component里插入。</p>
<h2 id="在Application中交给dagger2来完成初始化"><a href="#在Application中交给dagger2来完成初始化" class="headerlink" title="在Application中交给dagger2来完成初始化"></a>在Application中交给dagger2来完成初始化</h2><p>Dagger会处理我们的注解，为components生成实现并重命名加上“Dagger”前缀。</p>
<p>MyApplication.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">	 * 初始化依赖加载器</span><br><span class="line">	 */</span><br><span class="line">	private void initInjector()&#123;</span><br><span class="line">		appComponent = DaggerAppComponent</span><br><span class="line">				.builder()</span><br><span class="line">				.apiModule(new ApiModule())</span><br><span class="line">				.greenDaoModule(new GreenDaoModule(this))</span><br><span class="line">				.build();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">public AppComponent getAppComponent()&#123;</span><br><span class="line">		return  appComponent;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们现在可以利用get方法获取创建的component，然后调用inject()方法将BasePresenter作为参数传进去，这样就完成了绑定BasePresenter依赖。</p>
<h2 id="创建BasePresenter"><a href="#创建BasePresenter" class="headerlink" title="创建BasePresenter"></a>创建BasePresenter</h2><p>BasePresenter的构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public BasePresenter(BaseApp baseApp)&#123;</span><br><span class="line">    baseApp.getAppComponent().inject(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>BasePresenter中使用依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class BasePresenter &#123;</span><br><span class="line"></span><br><span class="line">    @Inject</span><br><span class="line">    DaoSession daoSession;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 自定义http请求任务</span><br><span class="line">     */</span><br><span class="line">    @Inject</span><br><span class="line">    public HttpTask httpTask;</span><br><span class="line"></span><br><span class="line">    public BasePresenter(BaseApp baseApp)&#123;</span><br><span class="line">        baseApp.getAppComponent().inject(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样我们新建一个Presenter继承自BasePresenter，执行inject绑定，就直接可以使用Application提供的依赖来实例化对象了，而且这些实例都是singlton模式，生命周期等同于Application。<br>我们直接可以使用DaoSession来完成sql操作了。</p>
<h2 id="继承Presenter"><a href="#继承Presenter" class="headerlink" title="继承Presenter"></a>继承Presenter</h2><p>UserReguPresenter类继承自BasePresenter类，testLog（）方法来测试数据库的操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class UserReguPresenter  extends BasePresenter&#123;</span><br><span class="line">    private UserReguActivity userReguActivity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public UserReguPresenter(UserReguActivity userReguActivity) &#123;</span><br><span class="line">        super((BaseApp) userReguActivity.getApplication());</span><br><span class="line">        this.userReguActivity = userReguActivity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> public void testLog()&#123;</span><br><span class="line">        Logger.Debug(&quot;调用了presenter的测试&quot;);</span><br><span class="line">		//new一个实例</span><br><span class="line">        RegularHoldInfo regularHoldInfo = new RegularHoldInfo();</span><br><span class="line">        regularHoldInfo.setAmount(100.00);</span><br><span class="line">        regularHoldInfo.setCcsId(110);</span><br><span class="line">		//执行sql inset操作</span><br><span class="line">        daoSession.getRegularHoldInfoDao().insert(regularHoldInfo);</span><br><span class="line">		//执行sql query操作</span><br><span class="line">        Query query = daoSession.getRegularHoldInfoDao()</span><br><span class="line">                .queryBuilder()</span><br><span class="line">                .where(RegularHoldInfoDao.Properties.CcsId.eq(&quot;110&quot;))</span><br><span class="line">                .build();</span><br><span class="line">       List&lt;RegularHoldInfo&gt;  list = (List&lt;RegularHoldInfo&gt;)query.list();</span><br><span class="line">        if (list.size()&gt;0)&#123;</span><br><span class="line">            Logger.Debug(&quot;查询结果：&quot;+list.get(0).getAmount());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>泡在网上的日子 <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0519/2892.html" target="_blank" rel="external">详解Dagger2</a></p>
<p><a href="http://blog.csdn.net/finddreams/article/details/50849385" target="_blank" rel="external">基于Retrofit2.0+RxJava+Dragger2实现不一样的Android网络构架搭建</a></p>
<p><a href="http://www.jianshu.com/p/c2feb21064bb" target="_blank" rel="external">Dagger2使用</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android基础：多渠道打包和代码混淆]]></title>
      <url>http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85%E5%92%8C%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/</url>
      <content type="html"><![CDATA[<h1 id="多渠道打包"><a href="#多渠道打包" class="headerlink" title="多渠道打包"></a>多渠道打包</h1><h2 id="AndroidManifest-xml文件解析"><a href="#AndroidManifest-xml文件解析" class="headerlink" title="AndroidManifest.xml文件解析"></a>AndroidManifest.xml文件解析</h2><blockquote>
<p>补充知识<br>AndroidManifest.xml 是每个android程序中必须的文件。它位于整个项目的根目录，描述了package中暴露的组件（activities, services, 等等），他们各自的实现类，各种能被处理的数据和启动位置。 除了能声明程序中的Activities, ContentProviders, Services, 和Intent Receivers,还能指定permissions和instrumentation（安全控制和测试）</p>
</blockquote>
<h3 id="1-lt-meta-adata-gt"><a href="#1-lt-meta-adata-gt" class="headerlink" title="1 &lt;meta-adata&gt;"></a>1 <code>&lt;meta-adata&gt;</code></h3><p><strong>语法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data android:name=&quot;string&quot;</span><br><span class="line">           android:resource=&quot;resource specification&quot;</span><br><span class="line">           android:value=&quot;string&quot;/&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>被包含于</strong></p>
<p><code>&lt;activity&gt;</code><br><code>&lt;activity-alias&gt;</code><br><code>&lt;service&gt;</code><br><code>&lt;receiver&gt;</code><br>四个元素中。</p>
<p><strong>说明</strong><br>这个元素用name-value对的格式给其父组件提供任意可选的数据。<br>一个组件元素能够包含任意多个<code>&lt;meta-data&gt;</code>子元素，所有这些元素中定义的值会被收集到一个<a href="http://blog.csdn.net/randyjiawenjie/article/details/6651437" target="_blank" rel="external">Bundle</a>对象中，并且提供给组件的<code>PackageItemInfo.metaData</code>属性字段。<br>通常值是通过其value属性来指定的。但是，也可以使用resource属性来代替，把一个资源ID跟值进行关联。</p>
<p>例如，下面的代码就是把存储在@string/kangaroo资源中的值跟”zoo”名称进行关联：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data android:name=&quot;zoo&quot; android:value=&quot;@string/kangaroo&quot; /&gt;</span><br></pre></td></tr></table></figure></p>
<p>另一个方面，使用resource属性会给zoo分配一个数字资源ID，而不是保存在资源中的值。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data android:name=&quot;zoo&quot; android:resource=&quot;@string/kangaroo&quot; /&gt;</span><br></pre></td></tr></table></figure></p>
<p>要避免使用多个独立的<meta-data>实体来提供相关的数据。相反如果有复杂的数据要跟组件关联，那么把数据作为资源来保存，并使用resource属性，把相关的资源ID通知给组件。</meta-data></p>
<p><strong>属性</strong></p>
<ul>
<li><code>android:name</code><br>针对项目的一个唯一名称。使用Java样式的命名规则，可以确保名称的唯一性，例如：<code>com.example.project.activity.fred</code>。</li>
<li><p><code>android:resource</code><br>这个属性定义了一个要引用的资源。资源的ID会跟这个项目进行关联。通过Bundle.getInt()方法能够从meta-data的Bundle对象中获取这个ID。</p>
</li>
<li><p><code>android:value</code><br>这个属性会给这个项目分配一个值。下表列出了可能分配的数据的数据类型，以及获取这些数据的方法：</p>
</li>
</ul>
<h2 id="多渠道打包-1"><a href="#多渠道打包-1" class="headerlink" title="多渠道打包"></a>多渠道打包</h2><blockquote>
<p>以友盟统计为例,在AndroidManifest.xml里面会有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line">    android:name=&quot;UMENG_CHANNEL&quot;</span><br><span class="line">    android:value=&quot;Channel_ID&quot; /&gt;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>Channel_ID就是渠道标示,我们的目标就是在编译的时候这个值能够自动变化。</p>
<h3 id="1-在AndroidManifest-xml里配置PlaceHolder"><a href="#1-在AndroidManifest-xml里配置PlaceHolder" class="headerlink" title="1 在AndroidManifest.xml里配置PlaceHolder"></a>1 在AndroidManifest.xml里配置PlaceHolder</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line">    android:name=&quot;UMENG_CHANNEL&quot;</span><br><span class="line">    android:value=&quot;$&#123;UMENG_CHANNEL_VALUE&#125;&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>${UMENG_CHANNEL_VALUE}这是个引用，具体值在gradle中配置</p>
<h3 id="2-在build-gradle设置productFlavors"><a href="#2-在build-gradle设置productFlavors" class="headerlink" title="2 在build.gradle设置productFlavors"></a>2 在build.gradle设置productFlavors</h3><p>首先配置UMENG_CHANNEL_VALUE的默认值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line"> ···</span><br><span class="line">	manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;channel_name&quot;]</span><br><span class="line"> ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后配置不同的渠道id</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">android &#123;  </span><br><span class="line">...</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        xiaomi &#123;</span><br><span class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;xiaomi&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">        _360 &#123;</span><br><span class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;_360&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">        baidu &#123;</span><br><span class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;baidu&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">        wandoujia &#123;</span><br><span class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;wandoujia&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更简洁的写法，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 友盟多渠道打包</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        wandoujia &#123;&#125;</span><br><span class="line">        c360 &#123;&#125;</span><br><span class="line">        baidu &#123;&#125;</span><br><span class="line">        xiaomi &#123;&#125;</span><br><span class="line">        tencent &#123;&#125;</span><br><span class="line">        taobao &#123;&#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    productFlavors.all &#123; flavor -&gt;</span><br><span class="line">        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在签名配置完成后，就可以使用命令行打包了</p>
<h2 id="gradle命令行打包"><a href="#gradle命令行打包" class="headerlink" title="gradle命令行打包"></a>gradle命令行打包</h2><h3 id="1-使用gradle命令配置签名"><a href="#1-使用gradle命令配置签名" class="headerlink" title="1 使用gradle命令配置签名"></a>1 使用gradle命令配置签名</h3><p>首先在app的build.gradle文件配置要签名的keystore文件</p>
<p>为了不暴露密码，不直接在signingConfigs中配置密码，需要在控制台输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">def releaseTime() &#123;</span><br><span class="line">    return new Date().format(&quot;yyyy-MM-dd&quot;, TimeZone.getTimeZone(&quot;UTC&quot;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">	//执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。</span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	signingConfigs &#123;</span><br><span class="line">		debug &#123;</span><br><span class="line">            // No debug config</span><br><span class="line">        &#125;		</span><br><span class="line">		//release版本</span><br><span class="line">		release&#123;</span><br><span class="line">           storeFile file(&apos;../keystore文件名&apos;)</span><br><span class="line">			keyAlias &apos;asar&apos;</span><br><span class="line">			storePassword System.console().readLine(&quot;\nKeystore password: &quot;)  </span><br><span class="line">			keyPassword System.console().readLine(&quot;\nKey password: &quot;)  </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	buildTypes &#123;  </span><br><span class="line">		debug &#123;</span><br><span class="line">            // 显示Log</span><br><span class="line">            buildConfigField &quot;boolean&quot;, &quot;LOG_DEBUG&quot;, &quot;true&quot;</span><br><span class="line"></span><br><span class="line">            versionNameSuffix &quot;-debug&quot;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            zipAlignEnabled false</span><br><span class="line">            shrinkResources false</span><br><span class="line">            signingConfig signingConfigs.debug</span><br><span class="line">        	&#125;</span><br><span class="line">	    release &#123;  </span><br><span class="line">	         ...  </span><br><span class="line">			// 不显示Log</span><br><span class="line">            buildConfigField &quot;boolean&quot;, &quot;LOG_DEBUG&quot;, &quot;false&quot;</span><br><span class="line">			//混淆</span><br><span class="line">			minifyEnabled true</span><br><span class="line">			//zipAlgn优化</span><br><span class="line">			zipAlignEnabled true</span><br><span class="line">			//移除无用的resource文件</span><br><span class="line">			shrinkResources true</span><br><span class="line">			 </span><br><span class="line">			//加载默认的混淆配置文件</span><br><span class="line">			proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">			//签名</span><br><span class="line">	        signingConfig signingConfigs.release </span><br><span class="line">			//配置输出的apk文件名</span><br><span class="line"> 			applicationVariants.all &#123; variant -&gt;</span><br><span class="line">                variant.outputs.each &#123; output -&gt;</span><br><span class="line">                    def outputFile = output.outputFile</span><br><span class="line">                    if (outputFile != null &amp;&amp; outputFile.name.endsWith(&apos;.apk&apos;)) &#123;</span><br><span class="line">                    	// 输出apk名称为zlot_v1.0_2015-01-15_wandoujia.apk</span><br><span class="line">                        def fileName = &quot;zlot_v$&#123;defaultConfig.versionName&#125;_$&#123;releaseTime()&#125;_$&#123;variant.productFlavors[0].name&#125;.apk&quot;</span><br><span class="line">                        output.outputFile = new File(outputFile.parent, fileName)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	        &#125;  </span><br><span class="line">	   &#125;  </span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="2-使用命令行打包"><a href="#2-使用命令行打包" class="headerlink" title="2 使用命令行打包"></a>2 使用命令行打包</h2><p>1 view-&gt;ToolWindows-&gt;Terminal打开命令行<br>2 在命令行输入<code>gradlew -v</code> ，如果第一次会执行下载gradle，记得翻墙，不然会慢到崩溃<br>3 执行<code>gradlew clean</code>,等待时间会比较长<br>4 执行<code>gradle build</code>，开始编译，成功后<code>zlot\build\outputs\apk</code>目录会有编译后的apk,<br>这时编译的apk包括debug版本，release版本，特别慢<br>补充</p>
<ul>
<li><code>gradlew assembleRelease</code> ：只编译并打Release的包</li>
<li><code>gradlew assembleDebug</code>   :只编译并打包debug版本</li>
</ul>
<p>除此之外 assemble 还能和 Product Flavor 结合创建新的任务，其实 assemble 是和 Build Variants 一起结合使用的，而Build Variants = Build Type + Product Flavor ， 举个例子大家就明白了：</p>
<ul>
<li><code>gradlew assembleWandoujiaRelease</code>只打包wandoujia渠道的release包</li>
</ul>
<h3 id="3-比命令行更简单的打包方式"><a href="#3-比命令行更简单的打包方式" class="headerlink" title="3 比命令行更简单的打包方式"></a>3 比命令行更简单的打包方式</h3><p>打开androidStudiode gradle面板，会发现多了很多任务，<br><img src="http://xyzphoto.qiniudn.com/wordpress_20_QQ%E6%88%AA%E5%9B%BE20141117162914.png" alt=""></p>
<p>然后直接双击任务生成apk</p>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>当build faile时，找不到错误的原因，可以执行<code>gradlew check</code>进行检测，一般会给出错误原因，<br>比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ndroid &#123;</span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">             </span><br><span class="line">* Try:</span><br></pre></td></tr></table></figure></p>
<p>意义是让我们关闭lint检查，因为开启的话，有任何的错误或者警告提示，都会终止构建</p>
<h1 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h1><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://blog.csdn.net/shineflowers/article/details/45042485" target="_blank" rel="external">Android 使用Android Studio + Gradle 或 命令行 进行apk签名打包</a></p>
<p><a href="http://blog.csdn.net/ljchlx/article/details/43059467" target="_blank" rel="external">Android Studio系列教程六–Gradle多渠道打包</a></p>
<p><a href="http://my.oschina.net/aibenben/blog/370985" target="_blank" rel="external">Android studio 使用心得(四)—android studio 多渠道打包(二)</a></p>
<p><a href="http://www.cnblogs.com/0616--ataozhijia/p/4203997.html" target="_blank" rel="external">[Android Studio] Android studio 多渠道打包(超简洁版)</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android最佳实践9：greenDao在android studio中的使用]]></title>
      <url>http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B59%EF%BC%9AgreenDao%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>greenDao是一个将对象映射到 SQLite 数据库中的轻量且快速的 ORM 解决方案，性能很不错。</p>
</blockquote>
<p><img src="http://static.codeceo.com/images/2015/07/4cb11fd0257a668c15b9deda53cb65fb.png" alt=""></p>
<h1 id="greenDao的特点"><a href="#greenDao的特点" class="headerlink" title="greenDao的特点"></a>greenDao的特点</h1><ul>
<li>精简</li>
<li>性能最大化</li>
<li>不使用注解，使用code generate</li>
</ul>
<h1 id="android-studio中的使用"><a href="#android-studio中的使用" class="headerlink" title="android studio中的使用"></a>android studio中的使用</h1><h2 id="1-android工程配置-greendao-generator-模块"><a href="#1-android工程配置-greendao-generator-模块" class="headerlink" title="1 android工程配置[greendao generator]模块"></a>1 android工程配置[greendao generator]模块</h2><p>1 .src/main目录新建一个与java目录同层的<code>java-gen</code>目录，用于存放由greenDao生成的Bean,Dao,DaoMaster,DaoSession类</p>
<p>2 app的build.gradle添加sourceSets与dependencies</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildTypes&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> sourceSets &#123;</span><br><span class="line">        main&#123;</span><br><span class="line">            java.srcDirs = [&apos;src/main/java&apos;,src/main/java-gen]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">...</span><br><span class="line"> compile &apos;org.greenrobot:greendao:2.2.1&apos;</span><br><span class="line">    compile &apos;org.greenrobot:greendao-generator:2.2.0&apos;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-新建greenDao-generator模块，纯java工程"><a href="#2-新建greenDao-generator模块，纯java工程" class="headerlink" title="2 新建greenDao generator模块，纯java工程"></a>2 新建greenDao generator模块，纯java工程</h2><p>1 file-&gt;new-&gt;new module-&gt;java Library-&gt;填写包名类名-&gt;finish</p>
<p>然后在新工程的build.gradle中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">...</span><br><span class="line">compile &apos;org.greenrobot:greendao-generator:2.2.0&apos;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2 编写【ExampleDaoGenerator】类，注意： 我们的 Java 工程只有一个类，它的内容决定了「GreenDao Generator」的输出，你可以在这个类中通过对象、关系等创建数据库结构，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class ExampleDaoGenerator &#123;</span><br><span class="line">    public static void main(String args[])&#123;</span><br><span class="line">        // 正如你所见的，你创建了一个用于添加实体（Entity）的模式（Schema）对象。</span><br><span class="line">        // 两个参数分别代表：数据库版本号与自动生成代码的包路径。</span><br><span class="line">        Schema schema = new Schema(1, &quot;com.hammer.example&quot;);</span><br><span class="line">        //当然，如果你愿意，你也可以分别指定生成的 Bean 与 DAO 类所在的目录，只要如下所示：</span><br><span class="line">        // 一旦你拥有了一个 Schema 对象后，你便可以使用它添加实体（Entities）了。</span><br><span class="line">        addNote(schema);</span><br><span class="line">        // 最后我们将使用 DAOGenerator 类的 generateAll() 方法自动生成代码，此处你需要根据自己的情况更改输出目录（既之前创建的 java-gen)。</span><br><span class="line">        // 其实，输出目录的路径可以在 build.gradle 中设置，有兴趣的朋友可以自行搜索，这里就不再详解。</span><br><span class="line">        try &#123;</span><br><span class="line">            new DaoGenerator().generateAll(schema, &quot;E:/androidSpace/android-lesson/BaseLesson/src/main/java-gen&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param schema</span><br><span class="line">     */</span><br><span class="line">    private static void addNote(Schema schema) &#123;</span><br><span class="line">        // 一个实体（类）就关联到数据库中的一张表，此处表名为「Note」（既类名）</span><br><span class="line">        Entity note = schema.addEntity(&quot;Note&quot;);</span><br><span class="line">        // 你也可以重新给表命名</span><br><span class="line">        // note.setTableName(&quot;NODE&quot;);</span><br><span class="line">        // greenDAO 会自动根据实体类的属性值来创建表字段，并赋予默认值</span><br><span class="line">        // 接下来你便可以设置表中的字段：</span><br><span class="line">        note.addIdProperty();</span><br><span class="line">        note.addStringProperty(&quot;text&quot;).notNull();</span><br><span class="line">        // 与在 Java 中使用驼峰命名法不同，默认数据库中的命名是使用大写和下划线来分割单词的。</span><br><span class="line">        // For example, a property called “creationDate” will become a database column “CREATION_DATE”.</span><br><span class="line">        note.addStringProperty(&quot;comment&quot;);</span><br><span class="line">        note.addDateProperty(&quot;date&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3 执行run main函数，生成如图4个文件<br><img src="http://7xrf0l.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160614113731.png" alt=""></p>
<h1 id="在android工程进行数据库操作"><a href="#在android工程进行数据库操作" class="headerlink" title="在android工程进行数据库操作"></a>在android工程进行数据库操作</h1><h2 id="1-考虑到application的生命周期，把DaoMaster跟DaoSession的实例放到application中，避免重复创建"><a href="#1-考虑到application的生命周期，把DaoMaster跟DaoSession的实例放到application中，避免重复创建" class="headerlink" title="1 考虑到application的生命周期，把DaoMaster跟DaoSession的实例放到application中，避免重复创建"></a>1 考虑到application的生命周期，把DaoMaster跟DaoSession的实例放到application中，避免重复创建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public  DaoMaster getDaoMaster(Context context)&#123;</span><br><span class="line">        if (daoMaster == null)&#123;</span><br><span class="line">            daoMaster = new DaoMaster(getSQLDB(context));</span><br><span class="line">        &#125;</span><br><span class="line">        return daoMaster;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SQLiteDatabase getSQLDB(Context context)&#123;</span><br><span class="line">        if (sqlDB == null)&#123;</span><br><span class="line">            DaoMaster.OpenHelper helper = new DaoMaster.DevOpenHelper(context, &quot;zlot-db&quot;, null);</span><br><span class="line">            sqlDB = helper.getWritableDatabase();</span><br><span class="line">        &#125;</span><br><span class="line">        return  sqlDB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DaoSession getDaoSession(Context context)&#123;</span><br><span class="line">        if (daoSession == null)</span><br><span class="line">        &#123;</span><br><span class="line">            if (daoMaster == null)</span><br><span class="line">            &#123;</span><br><span class="line">                daoMaster = getDaoMaster(context);</span><br><span class="line">            &#125;</span><br><span class="line">            daoSession = daoMaster.newSession();</span><br><span class="line">        &#125;</span><br><span class="line">        return daoSession;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-考虑到松耦合性，新增一个Dao的中间层，用来切换不同的Dao实现"><a href="#2-考虑到松耦合性，新增一个Dao的中间层，用来切换不同的Dao实现" class="headerlink" title="2 考虑到松耦合性，新增一个Dao的中间层，用来切换不同的Dao实现"></a>2 考虑到松耦合性，新增一个Dao的中间层，用来切换不同的Dao实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public class NoteDaoMiddle &#123;</span><br><span class="line">    private NoteDao noteDao;</span><br><span class="line">    private ILessonSixActvity lessonSixActvity;</span><br><span class="line">    public  ArrayList&lt;Note&gt; notes = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public NoteDaoMiddle(ILessonSixActvity lessonSixActvity, DaoSession daoSession)&#123;</span><br><span class="line">        this.lessonSixActvity = lessonSixActvity;</span><br><span class="line">        this.noteDao = daoSession.getNoteDao();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void add(Note note)&#123;</span><br><span class="line">        Observable.create(subscriber-&gt;&#123;</span><br><span class="line">            noteDao.insert(note);</span><br><span class="line">            notes.add(note);</span><br><span class="line">            subscriber.onCompleted();</span><br><span class="line">        &#125;).subscribeOn(Schedulers.io()) //指定 subscribe() 发生在 IO 线程</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread()) //指定 Subscriber 的回调发生在主线程</span><br><span class="line">                .subscribe(getUpdateSubScriber());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void search(String title)&#123;</span><br><span class="line">        Observable.create(subscriber-&gt;&#123;</span><br><span class="line">            //为空</span><br><span class="line">            if (TextUtils.isEmpty(title))&#123;</span><br><span class="line">                // Query 类代表了一个可以被重复执行的查询</span><br><span class="line">                Query&lt;Note&gt; query = noteDao.queryBuilder()</span><br><span class="line">                        .orderAsc(NoteDao.Properties.Date)</span><br><span class="line">                        .build();</span><br><span class="line">                //      查询结果以 List 返回</span><br><span class="line">                notes = (ArrayList&lt;Note&gt;) query.list();</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                Query query = noteDao.queryBuilder()</span><br><span class="line">                        .where(NoteDao.Properties.Text.eq(title))</span><br><span class="line">                        .orderAsc(NoteDao.Properties.Date)</span><br><span class="line">                        .build();</span><br><span class="line">                notes = (ArrayList&lt;Note&gt;) query.list();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 在 QueryBuilder 类中内置两个 Flag 用于方便输出执行的 SQL 语句与传递参数的值</span><br><span class="line">            QueryBuilder.LOG_SQL = true;</span><br><span class="line">            QueryBuilder.LOG_VALUES = true;</span><br><span class="line">            subscriber.onCompleted();</span><br><span class="line">        &#125;)</span><br><span class="line">                .subscribeOn(Schedulers.io()) //指定 subscribe() 发生在 IO 线程</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread()) //指定 Subscriber 的回调发生在主线程</span><br><span class="line">                .subscribe(getUpdateSubScriber());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private Subscriber&lt;Object&gt; getUpdateSubScriber()&#123;</span><br><span class="line"></span><br><span class="line">        return  new Subscriber&lt;Object&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onCompleted() &#123;</span><br><span class="line">                lessonSixActvity.onUpdateList(notes);</span><br><span class="line">                LogUtil.Debug(&quot;onCompleted&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) &#123;</span><br><span class="line">                LogUtil.Debug(&quot;onError:&quot;+e.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(Object o) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-响应view层的增删查改操作"><a href="#3-响应view层的增删查改操作" class="headerlink" title="3 响应view层的增删查改操作"></a>3 响应view层的增删查改操作</h2><p>新建NoteDaoMiddle实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">       super.onCreate(savedInstanceState);</span><br><span class="line">       ...</span><br><span class="line">       daoSession = MyApplication.getIns().getDaoSession(this);</span><br><span class="line">       noteDaoMiddle = new NoteDaoMiddle(this,daoSession);</span><br><span class="line"></span><br><span class="line">       &apos;&apos;&apos;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>响应add search按钮<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private void addNote()&#123;</span><br><span class="line">       //如果新增为空，弹出</span><br><span class="line">       if (TextUtils.isEmpty(editText.getText()))&#123;</span><br><span class="line">           Toast.makeText(this,&quot;add不能为空&quot;,Toast.LENGTH_SHORT);</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    	&apos;&apos;&apos;</span><br><span class="line">       // 插入操作，简单到只要你创建一个 Java 对象</span><br><span class="line">       Note note = new Note(null, noteText, comment, new Date());</span><br><span class="line">       noteDaoMiddle.add(note);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">private void search(String title) &#123;</span><br><span class="line">       noteDaoMiddle.search(title);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>通过回调或者接口响应查询结果,并通知listview刷新视图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void onUpdateList(ArrayList&lt;Note&gt; notes) &#123;</span><br><span class="line">        sixAdapter.setData(notes);</span><br><span class="line">        sixAdapter.notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.codeceo.com/article/android-orm-greendao-usage.html" target="_blank" rel="external">Android ORM 框架 greenDAO 使用经验总结</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android基础：工具类]]></title>
      <url>http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文主要总结下android常用的工具类</p>
</blockquote>
<h1 id="TextUtils类，处理字符串"><a href="#TextUtils类，处理字符串" class="headerlink" title="TextUtils类，处理字符串"></a>TextUtils类，处理字符串</h1><p><code>android.text.TextUtils</code>这个类有以下功能</p>
<ul>
<li><code>public static boolean isEmpty(@Nullable CharSequence str)</code>这个方法判断字符串非null且非空，在对字符串进行判断时可以不必if(str !=null &amp;&amp; str.length() &gt; 0)这样判断。</li>
<li><code>public static CharSequence concat(CharSequence... text)</code> 字符串连接。有很多字符串，你还在用＋拼接或自己new 一个StringBuffer\StringBuilder么？其实这个方法已经帮我们做好了，用StringBuilder实现，进行字符串拼接时可以考虑使用这个方法。而且支持SpannableString。</li>
<li><code>public static boolean isDigitsOnly(CharSequence str)</code> 判断所给的字符串是否只有数字</li>
<li><code>public static boolean equals(CharSequence a, CharSequence b)</code> 判断两个字符串对象的内容是否相等，内部进行了非null判断</li>
<li><code>public static String htmlEncode(String s)</code>将html代码中的特殊字符进行转码处理</li>
</ul>
<h1 id="android-text-format-DateUtils-日期格式化工具"><a href="#android-text-format-DateUtils-日期格式化工具" class="headerlink" title="android.text.format.DateUtils 日期格式化工具"></a>android.text.format.DateUtils 日期格式化工具</h1><h1 id="android-webkit-URLUtil-URI判断工具类"><a href="#android-webkit-URLUtil-URI判断工具类" class="headerlink" title="android.webkit.URLUtil URI判断工具类"></a>android.webkit.URLUtil URI判断工具类</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[Android快速开发系列 10个常用工具类]（<a href="http://blog.csdn.net/lmj623565791/article/details/38965311）" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/38965311）</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[直播的相关技术]]></title>
      <url>http://hammercui.github.io/post/%E7%9B%B4%E6%92%AD%E7%9A%84%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>重要从四点来说直播的相关技术</p>
</blockquote>
<ul>
<li>服务器，云存储</li>
<li>手机端推流，主播</li>
<li>手机端拉流，观众</li>
<li>互动sdk，比如打赏，弹幕</li>
</ul>
<h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><p>流媒体服务器就是p2p服务器</p>
<blockquote>
<p>一般自建流媒体服务器平比较复杂，维护也麻烦，都选择现成的云存储解决方案<br>技术关键字<code>rtmp</code>推流，<code>hls</code>拉流</p>
</blockquote>
<p>上行，就是数据上传，一般有<br>RTMP，HLS推流</p>
<p>下行，播放，一般有<br>RTMP、HLS和HTTP（FLV）协议</p>
<h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>RTMP,RTSP,HLS都是流媒体协议，如果要开发一套准实时的手机音视频直播系统，需要支持iphone，android，windows phone等多款手机，最好使用hls协议，这个时候客户端播放的是切割的ts文件，它的延迟取决于切片的大小。</p>
<ul>
<li>rtmp和hls并存：rtmp一般用于pc-flash播放直播，而hls用于移动端播放</li>
<li>RTMP本质上是流协议，实时性高，RTMP的实时性在3秒之内</li>
<li>hls是apple搞出来的协议，实时性在3s左右， Apple 为了提高流播效率开发的技术，特点是将流媒体切分为若干 TS 片段（比如每10秒一段），然后通过一个扩展的 m3u 列表文件将这些 TS 片段集中起来供客户端播放器接收。比mp4适合做直播技术。</li>
</ul>
<p><a href="https://github.com/ossrs/srs/wiki/v1_CN_RTMP.PK.HTTP" target="_blank" rel="external">参考文章</a></p>
<h2 id="腾讯云视频解决方案，全方向"><a href="#腾讯云视频解决方案，全方向" class="headerlink" title="腾讯云视频解决方案，全方向"></a><a href="https://www.qcloud.com/solution/video.html" target="_blank" rel="external">腾讯云视频解决方案，全方向</a></h2><blockquote>
<p>最全的解决方案，包括服务器，客户端的sdk</p>
</blockquote>
<p>代表商</p>
<ul>
<li>龙珠直播</li>
</ul>
<p>提供游戏直播，美女主播解决方案，比如：</p>
<ul>
<li>直播提供HLS拉流/RTMP推流接入能力，快速接入游戏主播摄像头、游戏桌面、专业视频源等，并行进快速下发；通过500+CDN节点快速触及玩家；低至2秒延迟；</li>
<li>互动直播通过双向SDK，提供400ms超低延迟的实时互动能力，提供游戏直播场景中的互动能力；下行也可通过标准HLS下发进行单向直播，无需安装SDK；</li>
<li>提供推流端口，播放端的sdk<br>架构如图<br><img src="https://qzonestyle.gtimg.cn/aoi/sola/20151228190527_8KQCd9MwEL.png" alt=""></li>
</ul>
<h2 id="网易视频云，全方向"><a href="#网易视频云，全方向" class="headerlink" title="网易视频云，全方向"></a><a href="http://vcloud.163.com/live.html" target="_blank" rel="external">网易视频云，全方向</a></h2><blockquote>
<p>解决方案也很全，包括服务器，客户端的sdk，贵</p>
</blockquote>
<p>代表商<br>BoBo美女主播</p>
<ul>
<li>提供推流Android SDK， iOS SDK，Windows SDK</li>
<li>提供播放器Android SDK， iOS SDK</li>
</ul>
<h2 id="乐视云方案，手机方向"><a href="#乐视云方案，手机方向" class="headerlink" title="乐视云方案，手机方向"></a><a href="http://www.lecloud.com/mobile.html" target="_blank" rel="external">乐视云方案，手机方向</a></h2><p>产品架构图</p>
<p><img src="http://i3.letvimg.com/lc05_lecloud/201604/19/20/12/process.png" alt=""></p>
<h2 id="阿里云直播-pc方向"><a href="#阿里云直播-pc方向" class="headerlink" title="阿里云直播,pc方向"></a><a href="https://www.aliyun.com/solution/media/live?spm=5176.8009263.277601.3.j9Hr2d" target="_blank" rel="external">阿里云直播,pc方向</a></h2><p>产品架构图<br><img src="https://img.alicdn.com/tps/i4/TB1yKnMIpXXXXb5XVXXyEWcOpXX-612-454.jpg" alt=""></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>手机端推流，主要就是链接服务器，上传ts文件碎片</p>
<p>手机端拉流，主要就是下载ts文件碎片，播放的问题</p>
<p>互动sdk,参考聊天，弹幕类，主要是udp技术。</p>
<p>付费扣费sdk,主要是http技术</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android基础：Activity Window View ViewGroup]]></title>
      <url>http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9AActivity-Window-View-ViewGroup/</url>
      <content type="html"><![CDATA[<h1 id="View与ViewGroup的关系"><a href="#View与ViewGroup的关系" class="headerlink" title="View与ViewGroup的关系"></a>View与ViewGroup的关系</h1><p>Android系统中的所有UI类都是建立在View和ViewGroup这两个类的基础上的。</p>
<ul>
<li>所有View的子类成为”Widget”</li>
<li>所有ViewGroup的子类成为”Layout”</li>
<li>ViewGroup是一种特殊的View</li>
</ul>
<p>View和ViewGroup之间采用了组合设计模式，可以使得“部分-整体”同等对待。ViewGroup作为布局容器类的最上层，布局容器里面又可以有View和ViewGroup</p>
<p>如下图<br><img src="http://hi.csdn.net/attachment/201108/21/0_1313928575W9Q0.gif" alt=""></p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul>
<li>如果viewgroup有一个子view是invisible状态，viewgroup就是invisible状态</li>
</ul>
<p><img src="http://img.blog.csdn.net/20140919111037400?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFua2V0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p><img src="http://img.blog.csdn.net/20140919110917937?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFua2V0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br><img src="http://img.blog.csdn.net/20140919111133997?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFua2V0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p><img src="http://img.blog.csdn.net/20140919111154012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFua2V0cmVl/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h1 id="Activity与window"><a href="#Activity与window" class="headerlink" title="Activity与window"></a>Activity与window</h1><h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><p>在Activity中使用LayoutInflater。<br>LayoutInflater是一个用来实例化XML布局文件为View对象的类<br>LayoutInflater.infalte(R.layout.test,null)用来从指定的XML资源中填充一个新的View</p>
<ul>
<li>Activity的作用相当于人机交互界面，负责管理跟维护View与手机的操作。比如提供用户处理事件的API，如onKeyEvent, onTouchEvent等。</li>
</ul>
<h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><ul>
<li>window是一个抽象类</li>
<li>当我们调用Acitivity的 setContentView方法的时候实际上是调用的Window对象的setContentView方法，Activity中关于界 面的绘制实际上全是交给Window对象来做的</li>
</ul>
<h2 id="Activity与Window关系"><a href="#Activity与Window关系" class="headerlink" title="Activity与Window关系"></a>Activity与Window关系</h2><p>一个Activity包含了一个Window，Window才是真正代表一个窗口，也就是说Activity可以没有Window，那就相当于是Service了。在ActivityThread中也有控制Service的相关函数或许正好印证了这一点。<br> Activity和Window的第一次邂逅是在ActivityThread调用Activity的attach()函数时。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//[window]:通过PolicyManager创建window,实现callback函数,所以,当window接收到</span><br><span class="line">//外界状态改变时,会调用activity的方法,</span><br><span class="line"></span><br><span class="line">final void attach(Context context, ActivityThread aThread,</span><br><span class="line">        Instrumentation instr, IBinder token, int ident,</span><br><span class="line">        Application application, Intent intent, ActivityInfo info,</span><br><span class="line">        CharSequence title, Activity parent, String id,</span><br><span class="line">        NonConfigurationInstances lastNonConfigurationInstances,</span><br><span class="line">        Configuration config, String referrer, IVoiceInteractor voiceInteractor) &#123;</span><br><span class="line">    ....</span><br><span class="line">    mWindow = PolicyManager.makeNewWindow(this);</span><br><span class="line">    //当window接收系统发送给它的IO输入事件时,例如键盘和触摸屏事件,就可以转发给相应的Activity</span><br><span class="line">    mWindow.setCallback(this);</span><br><span class="line">    .....</span><br><span class="line">    //设置本地窗口管理器</span><br><span class="line">    mWindow.setWindowManager(</span><br><span class="line">            (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),</span><br><span class="line">            mToken, mComponent.flattenToString(),</span><br><span class="line">            (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0);</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 在attach()中，新建一个Window实例作为自己的成员变量，它的类型为PhoneWindow,这是抽象类Window的一个子类。然后设置mWindow的WindowManager。</p>
<h2 id="Window-Activity和DecorView"><a href="#Window-Activity和DecorView" class="headerlink" title="Window,Activity和DecorView"></a>Window,Activity和DecorView</h2><p>DecorView是FrameLayout的子类，它可以被认为是Android视图树的根节点视图。DecorView作为顶级View，一般情况下它内部包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分（具体情况和Android版本及主体有关），上面的是标题栏，下面的是内容栏。在Activity中通过setContentView所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是content，在代码中可以通过ViewGroup content = （ViewGroup)findViewById(R.android.id.content)来得到content对应的layout。<br> Window中有几个视图相关的比较重要的成员变量如下所示:</p>
<ul>
<li>mDecor:DecorView的实例，标示Window内部的顶级视图</li>
<li>mContentParent:setContetView所设置的布局文件就加到这个视图中</li>
<li>mContentRoot:是DecorView的唯一子视图，内部包含mContentParent,标题栏和状态栏。<br> <br>Activity中不仅持有一个Window实例，还有一个类型为View的mDecor实例。这个实例和Window中的mDecor实例有什么关系呢？它又是什么时候被创建的呢？<br> 二者其实指向同一个对象，这个对象是在Activity调用setContentView时创建的。我们都知道Activity的setContentView实际上是调用了Window的setContentView方法。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void setContentView(int layoutResID) &#123;</span><br><span class="line">    if (mContentParent == null) &#123; //[window]如何没有DecorView,那么就新建一个</span><br><span class="line">        installDecor(); //[window]</span><br><span class="line">    &#125; else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">        mContentParent.removeAllViews();</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">    //[window]第二步,将layout添加到mContentParent</span><br><span class="line">    mLayoutInflater.inflate(layoutResID, mContentParent);</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://blog.csdn.net/u012422440/article/details/51173387" target="_blank" rel="external">Android视图架构详解</a></p>
<p><a href="http://blog.csdn.net/luoshengyang/article/details/8245546" target="_blank" rel="external">Android应用程序窗口（Activity）的视图对象（View）的创建过程分析</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android基础：adapter详解]]></title>
      <url>http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9Aadapter%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="什么是adapter"><a href="#什么是adapter" class="headerlink" title="什么是adapter"></a>什么是adapter</h1><p>adapter就是适配器，适配器模式把一个类的接口转换成客户端所期待的另一种接口，从而使原本两个接口不匹配而无法在一起工作的类，能够在一起工作</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>举个栗子<br>用电源接口做例子，笔记本电脑的电源一般都是接受5V的电压，但是我们生活中的电线电压一般都是220V的输出。这个时候就出现了不匹配的状况，在软件开发中我们称之为接口不兼容，此时就需要适配器来进行一个接口转换。在软件开发中有一句话正好体现了这点：任何问题都可以加一个中间层来解决。这个层我们可以理解为这里的Adapter层，通过这层来进行一个接口转换就达到了兼容的目的。 </p>
<h1 id="ListView中的Adapter模式"><a href="#ListView中的Adapter模式" class="headerlink" title="ListView中的Adapter模式"></a>ListView中的Adapter模式</h1><p>为什么listview要用adapter呢？我们知道，作为重要的视图元素，listview展示的view千变万化，ListView需要能够显示各式各样的视图，每个人需要的显示效果各不相同，显示的数据类型，数量也不尽相同，那么如何隔离这种变化尤为重要。</p>
<p>Android的做法是增加一个Adapter层来应对变化，将ListView需要的接口抽象到Adapter对象中，这样只要用户实现了Adapter的接口，ListView就可以按照用户设定的显示效果、数量、数据来显示特定的Item View。 </p>
<p>通过代理数据集来告知ListView数据的个数( <code>getCount()</code>函数 )以及每个数据的类型( <code>getItem()</code>函数 )，最重要的是要解决Item View的输出。Item View千变万化，但终究它都是View类型，Adapter统一将Item View输出为View ( <code>getView()</code>函数 )，这样就很好的应对了Item View的可变性。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://blog.csdn.net/bboyfeiyu/article/details/43950185" target="_blank" rel="external">Android源码之ListView的适配器模式</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android基础：浅析mvc与mvp]]></title>
      <url>http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9A%E6%B5%85%E6%9E%90mvc%E4%B8%8Emvp/</url>
      <content type="html"><![CDATA[<h1 id="为什么要使用框架"><a href="#为什么要使用框架" class="headerlink" title="为什么要使用框架"></a>为什么要使用框架</h1><p>设计框架的目的：</p>
<ul>
<li>提高开发效率，尤其是协同工作</li>
<li>业务逻辑的切分，渐进式开发，提高业务的重用性，灵活性</li>
<li>测试以及问题的定位</li>
<li>日常的更新与维护</li>
</ul>
<h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p>经典的框架，view层，model层，Controller层.<br>用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。</p>
<p>在android中的实践呢？</p>
<ul>
<li>M层：适合的业务逻辑。数据库存取，网络操作，复杂算法，耗时操作</li>
<li>V层：显示数据</li>
<li>Contro层：在很多情况下activity会掺和很多Controller的事情，activity负责人机交互界面。</li>
</ul>
<p>举例：<br>Activity读取V视图层的数据（eg.读取当前EditText控件的数据），控制用户输入（eg.EditText控件数据的输入），并向Model发送数据请求（eg.发起网络请求等）。</p>
<h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><p>(1)耦合性低。所谓耦合性就是模块代码之间的关联程度。利用MVC框架使得View（视图）层和Model（模型）层可以很好的分离，这样就达到了解耦的目的，所以耦合性低，减少模块代码之间的相互影响。便于进行单元开发，单元测试<br>(2)可扩展性好。由于耦合性低，添加需求，扩展代码就可以减少修改之前的代码，降低bug的出现率。<br>(3)模块职责划分明确。主要划分层M,V,C三个模块，利于代码的维护。</p>
<h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><p>Activity中有很多关于视图UI的显示代码，因此View视图和Activity控制器并不是完全分离的，当activity类业务过多的时候，会变得难以管理和维护。<br>尤其是当ui的状态数据，跟持久化的数据混杂在一起，变得极为混乱。</p>
<h1 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h1><p>为了解决view层代码过多，引入了这套设计框架。<br>MVP从更早的MVC框架演变过来，与MVC有一定的相似性：Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。<br>如下图<br><img src="http://assets.tianmaying.com/md-image/ea995e88af236afbd8fdc4906a67e829" alt=""></p>
<p>MVP框架由3部分组成：View负责显示，Presenter负责逻辑处理，Model提供数据。在MVP模式里通常包含3个要素（加上View interface是4个）：</p>
<ul>
<li>View：负责呈现ui，与用户进行交互，如activity fragment</li>
<li>Model: 负责存储，检索，操作数据</li>
<li>Presenter：作为view跟model的桥梁，处理交互与数据逻辑。</li>
<li>View Interface:Presenter中持有的view层接口，负责给view返回消息。降低耦合，方便单元测试</li>
</ul>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>1 模型与视图完全分离，我们可以修改视图而不影响模型；<br>2 可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部；<br>3 我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁；<br>4 如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）。</p>
<h1 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h1><p><img src="http://pic001.cnblogs.com/images/2012/1/2012040113391482.jpg" alt=""></p>
<p>（最主要区别）View与Model并不直接交互，而是通过与Presenter交互来与Model间接交互。而在MVC中View可以与Model直接交互<br>通常View与Presenter是一对一的，但复杂的View可能绑定多个Presenter来处理逻辑。而Controller是基于行为的，并且可以被多个View共享，Controller可以负责决定显示哪个View<br>Presenter与View的交互是通过接口来进行的，更有利于添加单元测试。</p>
<h1 id="附赠MVVM知识"><a href="#附赠MVVM知识" class="headerlink" title="附赠MVVM知识"></a>附赠MVVM知识</h1><p>MVVM可以算是MVP的升级版，其中的VM是ViewModel的缩写，ViewModel可以理解成是View的数据模型和Presenter的合体，ViewModel和View之间的交互通过Data Binding完成，而Data Binding可以实现双向的交互，这就使得视图和控制层之间的耦合程度进一步降低，关注点分离更为彻底，同时减轻了Activity的压力。</p>
<p>MVC -&gt; MVP -&gt; MVVM 这几个软件设计模式是一步步演化发展的，MVVM 是从 MVP 的进一步发展与规范，MVP 隔离了MVC中的 M 与 V 的直接联系后，靠 Presenter 来中转，所以使用 MVP 时 P 是直接调用 View 的接口来实现对视图的操作的，这个 View 接口的东西一般来说是 showData、showLoading等等。M 与 V已经隔离了，方便测试了，但代码还不够优雅简洁，所以 MVVM 就弥补了这些缺陷。在 MVVM 中就出现的 Data Binding 这个概念，意思就是 View 接口的 showData 这些实现方法可以不写了，通过 Binding 来实现。</p>
<p>google官方已经推出了Data Binding库来写声明的layouts文件，并且用最少的代码来绑定你的app逻辑和layouts文件<br>Data Binding库不仅灵活而且广泛兼容- 它是一个support库，因此你可以在所有的Android平台最低能到Android 2.1（API等级7+）上使用它。</p>
<h2 id="三者的异同"><a href="#三者的异同" class="headerlink" title="三者的异同"></a>三者的异同</h2><p><img src="http://assets.tianmaying.com/md-image/bb8f3106230c33063ab53393dfe1876a.jpg" alt=""></p>
<p>异<br>三者的差异在于如何粘合View和Model，实现用户的交互操作以及变更通知</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://www.tianmaying.com/tutorial/AndroidMVC" target="_blank" rel="external">Android App的设计架构：MVC,MVP,MVVM与架构经验谈</a></p>
<p><a href="https://segmentfault.com/a/1190000002876984" target="_blank" rel="external">Data Binding 用户指南（Android）</a></p>
<p><a href="http://blog.csdn.net/asce1885/article/details/47080085" target="_blank" rel="external">Android DataBinding：再见Presenter，你好ViewModel！</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android最佳实践10：开源库汇总]]></title>
      <url>http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B510%EF%BC%9A%E5%BC%80%E6%BA%90%E5%BA%93%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h1 id="第一部分：工具库"><a href="#第一部分：工具库" class="headerlink" title="第一部分：工具库"></a>第一部分：工具库</h1><h2 id="依赖注入库"><a href="#依赖注入库" class="headerlink" title="依赖注入库"></a>依赖注入库</h2><h3 id="dagger：Square公司的明星项目，已被google官方采用"><a href="#dagger：Square公司的明星项目，已被google官方采用" class="headerlink" title="dagger：Square公司的明星项目，已被google官方采用"></a><a href="https://github.com/square/dagger" target="_blank" rel="external">dagger</a>：Square公司的明星项目，已被google官方采用</h3><ul>
<li>依赖注入，适用于 Android 和 Java</li>
<li>在android平台，特别适合mvp架构</li>
<li><a href="http://square.github.io/dagger/" target="_blank" rel="external">官网</a></li>
<li><a href="http://a.codekk.com/detail/Android/%E6%89%94%E7%89%A9%E7%BA%BF/Dagger%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">Dagger 源码解析</a></li>
<li><a href="http://www.jianshu.com/p/c2feb21064bb" target="_blank" rel="external">Dagger2使用</a></li>
<li><a href="http://blog.csdn.net/tiankong1206/article/details/46486401" target="_blank" rel="external">MVP+Dagger2+Retrofit实现更清晰的架构</a></li>
</ul>
<h3 id="AndroidAnnotations-Code-Diet"><a href="#AndroidAnnotations-Code-Diet" class="headerlink" title="AndroidAnnotations(Code Diet)"></a><a href="https://github.com/excilys/androidannotations" target="_blank" rel="external">AndroidAnnotations(Code Diet)</a></h3><ul>
<li>目前我正在使用的项目，不是很方便，每次要编译时生成Activity的子类_Activity</li>
<li>特点：(1) 依赖注入：包括 view，extras，系统服务，资源等等<br>(2) 简单的线程模型，通过 annotation 表示方法运行在 ui 线程还是后台线程<br>(3) 事件绑定：通过 annotation 表示 view 的响应事件，不用在写内部类<br>(4) REST 客户端：定义客户端接口，自动生成 REST 请求的实现<br>(5) 没有你想象的复杂：AndroidAnnotations 只是在在编译时生成相应子类<br>(6) 不影响应用性能：仅 50kb，在编译时完成，不会对运行时有性能影响。<br>其他：与 roboguice 的比较：roboguice 通过运行时读取 annotations 进行反射，所以可能影响应用性能，而 AndroidAnnotations 在编译时生成子类，所以对性能没有影响</li>
</ul>
<h2 id="图片缓存库"><a href="#图片缓存库" class="headerlink" title="图片缓存库"></a>图片缓存库</h2><ul>
<li>picasso</li>
<li>fresco</li>
<li>Glide</li>
</ul>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><ul>
<li>fresco facebook的明星项目，5.0以下特别流畅，但是包大。亮点是渐进式显示图片</li>
<li>picasso Square的明星项目，跟okhttp结合最好用，包最小</li>
<li>Glide是google出品的图片缓存框架</li>
</ul>
<p>总结，我选择使用Picasso，因为简单易上手。</p>
<h2 id="gradle-retrolambda-java7兼容lambda库"><a href="#gradle-retrolambda-java7兼容lambda库" class="headerlink" title="gradle-retrolambda:java7兼容lambda库"></a><a href="https://github.com/evant/gradle-retrolambda" target="_blank" rel="external">gradle-retrolambda</a>:java7兼容lambda库</h2><p><a href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B51%EF%BC%9Aretrolambda%E6%A1%86%E6%9E%B6/">使用教程</a></p>
<h2 id="rx-android-感受响应式编程魅力"><a href="#rx-android-感受响应式编程魅力" class="headerlink" title="rx-android:感受响应式编程魅力"></a><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">rx-android</a>:感受响应式编程魅力</h2><p><a href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B52%EF%BC%9Arxjava%E6%A1%86%E6%9E%B6/">使用教程</a></p>
<h2 id="Retrofit2-0-最热门的restfull规范网络请求框架"><a href="#Retrofit2-0-最热门的restfull规范网络请求框架" class="headerlink" title="Retrofit2.0:最热门的restfull规范网络请求框架"></a><a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit2.0</a>:最热门的restfull规范网络请求框架</h2><p><a href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B53%EF%BC%9Aretrofit%E6%A1%86%E6%9E%B6/">使用教程</a></p>
<h2 id="EventBus：发布-订阅的事件总线"><a href="#EventBus：发布-订阅的事件总线" class="headerlink" title="EventBus：发布 / 订阅的事件总线"></a><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a>：发布 / 订阅的事件总线</h2><p><a href="http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B55%EF%BC%9AEventBus/">使用教程</a></p>
<h2 id="高版本向低版本兼容库"><a href="#高版本向低版本兼容库" class="headerlink" title="高版本向低版本兼容库"></a>高版本向低版本兼容库</h2><h3 id="nineoldandroids-JakeWharton大神的项目"><a href="#nineoldandroids-JakeWharton大神的项目" class="headerlink" title="nineoldandroids:JakeWharton大神的项目"></a><a href="https://github.com/JakeWharton/NineOldAndroids" target="_blank" rel="external">nineoldandroids</a>:JakeWharton大神的项目</h3><ul>
<li><a href="http://a.codekk.com/detail/Android/Mr.Simple/NineOldAnimations%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">NineOldAnimations 源码解析</a></li>
<li><a href="http://nineoldandroids.com/" target="_blank" rel="external">文档介绍</a></li>
</ul>
<h1 id="第二部分-ui库"><a href="#第二部分-ui库" class="headerlink" title="第二部分 ui库"></a>第二部分 ui库</h1><h2 id="刷新ui"><a href="#刷新ui" class="headerlink" title="刷新ui"></a>刷新ui</h2><h3 id="BGARefreshLayout-Android-多种下拉刷新效果、上拉加载更多、可配置自定义头部广告位"><a href="#BGARefreshLayout-Android-多种下拉刷新效果、上拉加载更多、可配置自定义头部广告位" class="headerlink" title="BGARefreshLayout-Android:多种下拉刷新效果、上拉加载更多、可配置自定义头部广告位"></a><a href="https://github.com/bingoogolapple/BGARefreshLayout-Android" target="_blank" rel="external">BGARefreshLayout-Android</a>:多种下拉刷新效果、上拉加载更多、可配置自定义头部广告位</h3><p><img src="https://camo.githubusercontent.com/7539fed2c320aecc0d47320586e8c2ee22a2d762/687474703a2f2f37786b39646a2e636f6d312e7a302e676c622e636c6f7564646e2e636f6d2f726566726573686c61796f75742f73637265656e73686f74732f6267615f726566726573686c61796f7574322e676966" alt=""></p>
<ul>
<li>目前我正在使用的下拉刷新，上拉加载</li>
</ul>
<h3 id="Android-PullToRefresh"><a href="#Android-PullToRefresh" class="headerlink" title="Android-PullToRefresh"></a><a href="https://github.com/chrisbanes/Android-PullToRefresh" target="_blank" rel="external">Android-PullToRefresh</a></h3><p><img src="https://raw.githubusercontent.com/chrisbanes/Android-PullToRefresh/master/header_graphic.png" alt=""></p>
<ul>
<li>目前使用最广泛的强大的拉动刷新开源项目，强烈推荐使用</li>
<li>支持各种控件下拉刷新，ListView、ViewPager、WebView、ExpandableListView、GridView、ScrollView、Horizontal ScrollView、Fragment 上下左右拉动刷新</li>
<li>APP 示例：新浪微博各个页面</li>
</ul>
<h3 id="android-Ultra-Pull-To-Refresh"><a href="#android-Ultra-Pull-To-Refresh" class="headerlink" title="android-Ultra-Pull-To-Refresh"></a><a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" target="_blank" rel="external">android-Ultra-Pull-To-Refresh</a></h3><ul>
<li>star数目4991的项目，跟上一个刷新控件媲美</li>
<li>这个继承于 ViewGroup 可以包含任何 View。功能甚至比 SwipeRefreshLayout 强大。使用起来非常简单。良好的设计，如果你想定制自己的 UI 样式，非常简单，就像给 ListView 加一个 Header View 那么简单。支持 API LEVEL &gt;= 8</li>
<li><a href="http://a.codekk.com/detail/Android/Grumoon/android-Ultra-Pull-To-Refresh%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">android-Ultra-Pull-To-Refresh 源码解析</a></li>
</ul>
<h2 id="Material-Design-UI"><a href="#Material-Design-UI" class="headerlink" title="Material Design UI"></a>Material Design UI</h2><h3 id="material-dialogs"><a href="#material-dialogs" class="headerlink" title="material-dialogs"></a><a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="external">material-dialogs</a></h3><ul>
<li>各种material风格的dialog。 漂亮的的、易于使用的和可定制的Dialog API，你能够使用Material designed风格的Dialog到API 8</li>
<li>目前正在使用，文档很全面。</li>
<li><img src="https://raw.githubusercontent.com/afollestad/material-dialogs/master/art/mddemoshowcase.png" alt=""></li>
</ul>
<h2 id="仿ios的ui"><a href="#仿ios的ui" class="headerlink" title="仿ios的ui"></a>仿ios的ui</h2><h3 id="Android-PickerView-仿ios的pickview库"><a href="#Android-PickerView-仿ios的pickview库" class="headerlink" title="Android-PickerView:仿ios的pickview库"></a><a href="https://github.com/saiwu-bigkoo/Android-PickerView" target="_blank" rel="external">Android-PickerView</a>:仿ios的pickview库</h3><p>仿iOS的PickerView控件，有时间选择和选项选择并支持一二三级联动效果<br><img src="https://github.com/saiwu-bigkoo/Android-PickerView/raw/master/preview/pickerdemo.gif" alt=""></p>
<h2 id="ViewPager-、Gallery轮播图-旋转木马效果"><a href="#ViewPager-、Gallery轮播图-旋转木马效果" class="headerlink" title="ViewPager 、Gallery轮播图 旋转木马效果"></a>ViewPager 、Gallery轮播图 旋转木马效果</h2><h3 id="Android-ConvenientBanner-banner轮播图"><a href="#Android-ConvenientBanner-banner轮播图" class="headerlink" title="Android-ConvenientBanner:banner轮播图"></a><a href="https://github.com/saiwu-bigkoo/Android-ConvenientBanner" target="_blank" rel="external">Android-ConvenientBanner</a>:banner轮播图</h3><p><img src="https://github.com/saiwu-bigkoo/Android-ConvenientBanner/raw/master/preview/convenientbannerdemo.gif" alt=""></p>
<ul>
<li>目前我正在使用的控件，没有解决每次imageview重新加载的问题，导致大的图片会先出现空白。</li>
</ul>
<h3 id="LoopRotarySwitch：旋转木马"><a href="#LoopRotarySwitch：旋转木马" class="headerlink" title="LoopRotarySwitch：旋转木马"></a><a href="https://github.com/dalong982242260/LoopRotarySwitch" target="_blank" rel="external">LoopRotarySwitch</a>：旋转木马</h3><p><img src="https://github.com/dalong982242260/LoopRotarySwitch/raw/master/img/dalong.gif" alt=""></p>
<ul>
<li>目前正在使用，适用于3-4个图片，支持无线滚动。<br><strong>优点</strong></li>
<li>适用于Activity和Fragment</li>
<li>可定制大小，可监听事件，可调整旋转滚动半径</li>
</ul>
<h3 id="CarouselViewProject：画廊效果"><a href="#CarouselViewProject：画廊效果" class="headerlink" title="CarouselViewProject：画廊效果"></a><a href="https://github.com/clkasd/CarouselViewProject" target="_blank" rel="external">CarouselViewProject</a>：画廊效果</h3><p><img src="https://camo.githubusercontent.com/fc4718502ecb25f906deb73a34c2e7b465323ea0/687474703a2f2f646576656c6f70776561722e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031342f30352f6361726f7573656c312e706e67" alt=""></p>
<ul>
<li>不是很灵活，不支持无限滚动</li>
</ul>
<h3 id="3d旋转木马效果"><a href="#3d旋转木马效果" class="headerlink" title="3d旋转木马效果"></a>3d旋转木马效果</h3><p>以下三个3d旋转木马效果，都来自于这篇文章<a href="http://www.codeproject.com/Articles/146145/Android-D-Carousel" target="_blank" rel="external">Android 3D Carousel</a>,分别是不同的实现</p>
<h4 id="carousel-android-star31"><a href="#carousel-android-star31" class="headerlink" title="carousel-android:star31"></a><a href="https://github.com/ludovicroland/carousel-android" target="_blank" rel="external">carousel-android</a>:star31</h4><p><img src="https://camo.githubusercontent.com/ad7578f22aeef2180975a57c2ce291d8d22d7ec3/68747470733a2f2f7261772e6769746875622e636f6d2f6c75646f766963726f6c616e642f6361726f7573656c2d616e64726f69642f6d61737465722f73637265656e73686f74312e706e67" alt=""></p>
<p><strong>缺点</strong></p>
<ul>
<li>在Fragment中使用会出现问题。</li>
</ul>
<h4 id="Android-3D-Carousel-star4"><a href="#Android-3D-Carousel-star4" class="headerlink" title="Android-3D-Carousel:star4"></a><a href="https://github.com/panhuachao/Android-3D-Carousel#android-3d-carousel" target="_blank" rel="external">Android-3D-Carousel</a>:star4</h4><p><img src="https://github.com/panhuachao/Android-3D-Carousel/raw/master/round.gif" alt=""><br><strong>优点</strong></p>
<ul>
<li>增加了垂直滚动模式，尚未测试</li>
</ul>
<h4 id="CarrouselView-star22-中文版"><a href="#CarrouselView-star22-中文版" class="headerlink" title="CarrouselView:star22 中文版"></a><a href="https://github.com/dalong982242260/CarrouselView" target="_blank" rel="external">CarrouselView</a>:star22 中文版</h4><p><img src="https://github.com/dalong982242260/CarrouselView/raw/master/screenshot/carouselview.gif" alt=""></p>
<p><strong>优点</strong></p>
<ul>
<li>中文版，效果最佳</li>
<li>布局可以随意自定义，不受只是图片的限制。 </li>
<li>2、增加点击切换到中间位置。 </li>
<li>3、手势滑动切换。 </li>
<li>4、切换中间回调。 </li>
<li>5、自定义适配器更加方便用户设置自己需要的布局。</li>
</ul>
<h3 id="GlFancyCoverFlow-电影海报轮播图"><a href="#GlFancyCoverFlow-电影海报轮播图" class="headerlink" title="GlFancyCoverFlow:电影海报轮播图"></a><a href="https://github.com/LittleLiByte/GlFancyCoverFlow" target="_blank" rel="external">GlFancyCoverFlow</a>:电影海报轮播图</h3><p><img src="https://github.com/LittleLiByte/GlFancyCoverFlow/raw/master/GlFancyCoverFlow/res/raw/ScreenShots/device-2014-10-15-141029.png" alt=""></p>
<ul>
<li>借鉴自<a href="https://github.com/davidschreiber/FancyCoverFlow" target="_blank" rel="external">FancyCoverFlow</a></li>
<li>增加了无限滚动，更适合海报等效果</li>
<li>但是继承自GalleryView，这个类已经被google放弃了，有内存溢出的风险</li>
</ul>
<h2 id="特殊ui"><a href="#特殊ui" class="headerlink" title="特殊ui"></a>特殊ui</h2><h3 id="ExpandableLayout-控件收缩"><a href="#ExpandableLayout-控件收缩" class="headerlink" title="ExpandableLayout:控件收缩"></a><a href="https://github.com/traex/ExpandableLayout" target="_blank" rel="external">ExpandableLayout</a>:控件收缩</h3><p><img src="https://github.com/traex/ExpandableLayout/raw/master/demo.gif" alt=""></p>
<ul>
<li>目前正在使用，可以自己修改源码。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android基础：构建神器gradle]]></title>
      <url>http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9A%E6%9E%84%E5%BB%BA%E7%A5%9E%E5%99%A8gradle/</url>
      <content type="html"><![CDATA[<h1 id="什么是gradle"><a href="#什么是gradle" class="headerlink" title="什么是gradle"></a>什么是gradle</h1><p>项目自动化构建工具，用以取代xml的繁琐配置，目前大量用于android开发。<br>作用提现在以下两点</p>
<ul>
<li>首先Gradle需要找到你工程需要的东西，这些东西就是所谓的“依赖”。</li>
<li>另外Gradle需要构建和上传你工程的产出，这就是所谓的发行。</li>
</ul>
<h1 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h1><ul>
<li>了解Groovy基本语法</li>
</ul>
<p>Gradle基于Groovy语言，Groovy语法的学习，推荐官方文章Differences with Java和IBM developerWorks的<a href="http://www.ibm.com/developerworks/cn/education/java/j-groovy/j-groovy.html" target="_blank" rel="external">精通Groovy</a></p>
<ul>
<li>粗读Gradle User Guide和Gradle Plugin User Guide</li>
</ul>
<h1 id="gradle概念"><a href="#gradle概念" class="headerlink" title="gradle概念"></a>gradle概念</h1><h1 id="gradle构建android工程"><a href="#gradle构建android工程" class="headerlink" title="gradle构建android工程"></a>gradle构建android工程</h1><h1 id="如何解决重复依赖"><a href="#如何解决重复依赖" class="headerlink" title="如何解决重复依赖"></a>如何解决重复依赖</h1><h2 id="如何发现"><a href="#如何发现" class="headerlink" title="如何发现"></a>如何发现</h2><ul>
<li>方法1</li>
</ul>
<p><code>windows</code>环境下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令行执行</span><br><span class="line">gradlew -q dependencies module名称:dependencies --configuration compile</span><br></pre></td></tr></table></figure></p>
<p><code>mac os</code>环境下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令行执行</span><br><span class="line">gradle -q dependencies yourProject:dependencies --configuration compile</span><br></pre></td></tr></table></figure></p>
<ul>
<li>方法2</li>
</ul>
<p>下载gradle view插件</p>
<h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>在重复引用的依赖里，去除对引入的其他依赖</p>
<p>eg:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">compile(&apos;org.hibernate:hibernate:3.1&apos;) &#123;</span><br><span class="line">//excluding a particular transitive dependency:</span><br><span class="line">exclude module: &apos;cglib&apos; //by artifact name</span><br><span class="line">exclude group: &apos;org.jmock&apos; //by group</span><br><span class="line">exclude group: &apos;org.unwanted&apos;, module: &apos;iAmBuggy&apos; //by both name and group </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，当我们依赖本地module时，<br>eg:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"> 	compile fileTree(dir: &apos;libs&apos;, include: &apos;*.jar&apos;)</span><br><span class="line">    compile &apos;com.android.support:support-v4:23.3.0&apos;</span><br><span class="line">	···</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	···</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://www.csdn.net/article/2015-08-10/2825420" target="_blank" rel="external">Android项目中如何用好构建神器Gradle？</a></p>
<p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/Android_Studio/2015/0129/2375.html" target="_blank" rel="external">Gradle之依赖管理</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nodejs学习：2 redis的安装与使用]]></title>
      <url>http://hammercui.github.io/post/nodejs%E5%AD%A6%E4%B9%A0%EF%BC%9A2-redis%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[nodejs学习：1 express的安装与使用]]></title>
      <url>http://hammercui.github.io/post/nodejs%E5%AD%A6%E4%B9%A0%EF%BC%9A1-express%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="nodejs简介"><a href="#nodejs简介" class="headerlink" title="nodejs简介"></a>nodejs简介</h1><ul>
<li><p>nodejs能提供静态文件服务</p>
<ul>
<li>网页</li>
<li>纯文本</li>
<li>图片</li>
<li>前端JavaScript代码</li>
<li>css样式表文件</li>
<li>媒体文件</li>
<li>字体文件</li>
</ul>
</li>
<li><p>nodejs能提供http服务</p>
<ul>
<li>api接口</li>
<li>中间件</li>
</ul>
</li>
<li><p>nodejs能提供tcp(socket)服务</p>
</li>
</ul>
<h1 id="安装及启动"><a href="#安装及启动" class="headerlink" title="安装及启动"></a>安装及启动</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1 安装node软件<br>2 安装express生成模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g express-generator</span><br></pre></td></tr></table></figure></p>
<p>3 安装express<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g express</span><br></pre></td></tr></table></figure></p>
<p>4 安装nodemon调试模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure></p>
<p>5 使用模板创建nodejs工程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express [工程名]</span><br></pre></td></tr></table></figure></p>
<p>然后执行<code>npm install</code>安装第三方模块。</p>
<p>创建工程后出现如下目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+bin</span><br><span class="line"> -www  //执行脚本</span><br><span class="line">+public </span><br><span class="line">+routes </span><br><span class="line">+view     //静态页面</span><br><span class="line">-app.js   //创建express实例</span><br><span class="line">-package.json</span><br></pre></td></tr></table></figure></p>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>
<h1 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h1><h2 id="使用express的静态文件服务"><a href="#使用express的静态文件服务" class="headerlink" title="使用express的静态文件服务"></a>使用express的静态文件服务</h2><p>使用express的静态服务的中间件，直接使用<br>use方法使用中间件<br>public目录当做我们的静态文件目录<br>/直接使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br></pre></td></tr></table></figure>
<h2 id="使用express的路由"><a href="#使用express的路由" class="headerlink" title="使用express的路由"></a>使用express的路由</h2><ul>
<li>将不同的请求。分配给响应的函数</li>
<li>区分：路径，请求方法</li>
</ul>
<p>三种方法：</p>
<ul>
<li>path方式 直接get</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/login&apos;,function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>Router方式</li>
</ul>
<p>比如一组路由，都是post下面的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var Router = express.Router();</span><br><span class="line">Router.get(&apos;/add&apos;,function(req,res)&#123;</span><br><span class="line">&#125;)</span><br><span class="line">Router.get(&apos;/list&apos;,function(req,res)&#123;</span><br><span class="line">&#125;)</span><br><span class="line">app.user(&apos;post&apos;,Router);</span><br></pre></td></tr></table></figure>
<ul>
<li>route方式</li>
</ul>
<p>针对一个路由，编写不同方法的不同处理。<br>不如针对以上路由的get请求方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.route(&apos;article&apos;).get(function(req,response)</span><br><span class="line">&#123;</span><br><span class="line">&#125;).post(function(req,response))</span><br></pre></td></tr></table></figure>
<h3 id="带参数路由"><a href="#带参数路由" class="headerlink" title="带参数路由"></a>带参数路由</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.param(&apos;newsId&apos;,function(req,res,next,newsId)&#123;</span><br><span class="line">req.nresId = newsId;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&apos;/news/:newsId,function(req,response)&#123;</span><br><span class="line">req.end(&apos;newsId:&apos;+req.newsId)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android基础：常见问题集锦]]></title>
      <url>http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<h1 id="v-21-ripple配合selector，state-enabled不起作用"><a href="#v-21-ripple配合selector，state-enabled不起作用" class="headerlink" title="v-21 ripple配合selector，state_enabled不起作用"></a>v-21 ripple配合selector，state_enabled不起作用</h1><p>ripple是android L之后新增的水波纹特效，当我们的按钮增加了特效后，state_enabled=false，让按钮置为灰色，不起作用了下面贴出代码</p>
<p>drawable <code>btn_green.xml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; &gt;</span><br><span class="line">    &lt;item android:state_pressed=&quot;true&quot; android:drawable=&quot;@color/pressed&quot;&gt;&lt;/item&gt;</span><br><span class="line">    &lt;item android:state_enabled=&quot;false&quot; android:drawable=&quot;@color/dark_gray&quot;&gt;&lt;/item&gt;</span><br><span class="line">    &lt;item  android:drawable=&quot;@color/green&quot;/&gt;</span><br><span class="line">&lt;/selector&gt;</span><br></pre></td></tr></table></figure></p>
<p>drawable-21 <code>btn_green.xml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ripple xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:color=&quot;@color/pressed&quot;&gt;</span><br><span class="line">    &lt;item&gt;</span><br><span class="line">        &lt;selector &gt;</span><br><span class="line">            &lt;item android:state_enabled=&quot;true&quot; android:drawable=&quot;@color/green&quot;&gt;&lt;/item&gt;</span><br><span class="line">            &lt;item android:state_enabled=&quot;false&quot; android:drawable=&quot;@color/dark_gray&quot;&gt;&lt;/item&gt;</span><br><span class="line">        &lt;/selector&gt;</span><br><span class="line">    &lt;/item&gt;</span><br><span class="line">&lt;/ripple&gt;</span><br></pre></td></tr></table></figure></p>
<p>也就是说在新版的selector里面，没有默认状态，我们必须手动填写<code>android:state_enabled=&quot;true&quot;</code></p>
<h1 id="Activity-has-leaked-window-that-was-originally-added"><a href="#Activity-has-leaked-window-that-was-originally-added" class="headerlink" title="Activity has leaked window that was originally added"></a>Activity has leaked window that was originally added</h1><p>报错但并不crash</p>
<p>原因：</p>
<p>因为使用了Dialog，但是未在activity销毁时，调用dismiss（）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react基础：react0.14.7+webpack开发生产环境的区别]]></title>
      <url>http://hammercui.github.io/post/react%E5%9F%BA%E7%A1%80%EF%BC%9Areact-webpack%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA2%EF%BC%9A%E5%BC%80%E5%8F%91%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为在开发环境使用了webpack的动态加载，所以在正式部署的生产环境，配置文件要做相应的调整。</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><blockquote>
<p>首先贴出我的文件目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+ 工程名</span><br><span class="line">  + app        //开发文件目录</span><br><span class="line">     - mian.js //js入口</span><br><span class="line">  + build      //生产环境打包地址</span><br><span class="line">     - build.js //打包之后的文件</span><br><span class="line">     - index.html</span><br><span class="line">  + dev         //开发环境打包地址</span><br><span class="line">     - dev.js  //打包之后的文件</span><br><span class="line">     - index.html </span><br><span class="line">  + webpack.config.js   //开发配置文件</span><br><span class="line">  + webpack.config.prod.js  //生产配置文件</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="packkage-json文件"><a href="#packkage-json文件" class="headerlink" title="packkage.json文件"></a>packkage.json文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;7pluszhifu&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;7+的付费工程&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;./index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;webpack --config webpack.config.prod.js -p --content-base build&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;webpack-dev-server --devtool eval --progress --colors --hot --content-base dev&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;hammercui&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line"></span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-runtime&quot;: &quot;^6.5.0&quot;,</span><br><span class="line">    &quot;react&quot;: &quot;^0.14.7&quot;,</span><br><span class="line">    &quot;react-dom&quot;: &quot;^0.14.7&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;amazeui-react&quot;: &quot;^1.0.1&quot;,</span><br><span class="line">    &quot;babel-core&quot;: &quot;^6.7.4&quot;,</span><br><span class="line">    &quot;babel-loader&quot;: &quot;^6.2.4&quot;,</span><br><span class="line">    &quot;babel-preset-es2015&quot;: &quot;^6.6.0&quot;,</span><br><span class="line">    &quot;babel-preset-react&quot;: &quot;^6.5.0&quot;,</span><br><span class="line">    &quot;css-loader&quot;: &quot;^0.23.1&quot;,</span><br><span class="line">    &quot;material-ui&quot;: &quot;^0.15.0-alpha.2&quot;,</span><br><span class="line">    &quot;react&quot;: &quot;^0.14.7&quot;,</span><br><span class="line">    &quot;react-dom&quot;: &quot;^0.14.7&quot;,</span><br><span class="line">    &quot;react-hot-loader&quot;: &quot;^1.3.0&quot;,</span><br><span class="line">    &quot;react-tap-event-plugin&quot;: &quot;^0.2.2&quot;,</span><br><span class="line">    &quot;style-loader&quot;: &quot;^0.13.1&quot;,</span><br><span class="line">    &quot;url-loader&quot;: &quot;^0.5.7&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^1.12.14&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^1.14.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="开发环境配置文件webpack-config-js"><a href="#开发环境配置文件webpack-config-js" class="headerlink" title="开发环境配置文件webpack.config.js"></a>开发环境配置文件webpack.config.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by hammer on 2016/3/26.</span><br><span class="line"> * 配置的打包文件</span><br><span class="line"> */</span><br><span class="line">var webpack = require(&apos;webpack&apos;);</span><br><span class="line">var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&apos;common&apos;,&apos;common.js&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">var node_modules = path.resolve(__dirname, &apos;node_modules&apos;);</span><br><span class="line">var pathToReact = path.resolve(node_modules, &apos;react/dist/react.min.js&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    //插件项</span><br><span class="line">    plugins: [</span><br><span class="line">        //commonsPlugin,</span><br><span class="line">        new webpack.NoErrorsPlugin()</span><br><span class="line">    ],</span><br><span class="line">    //页面入口文件配置</span><br><span class="line">    //entry: &#123;mian : &apos;./app/main.js&apos;&#125;,</span><br><span class="line">    entry:[</span><br><span class="line">        &apos;webpack/hot/dev-server&apos;,</span><br><span class="line">        path.resolve(__dirname,&apos;app/main.js&apos;)</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    //入口文件输出配置</span><br><span class="line">    //output: &#123;path: __dirname+&apos;_build_&apos;, filename: &apos;[name].js&apos;&#125;</span><br><span class="line">    output:&#123;</span><br><span class="line">        path: path.resolve(__dirname,&apos;dev&apos;),</span><br><span class="line">        filename: &apos;dev.js&apos;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        inline: true,</span><br><span class="line">        port: 7777</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    module: &#123;</span><br><span class="line">        //加载器配置</span><br><span class="line">        loaders: [</span><br><span class="line">            //LESS文件先通过less-load处理成css，然后再通过css-loader加载成css模块，最后由style-loader加载器对其做最后的处理，</span><br><span class="line">            // 从而运行时可以通过style标签将其应用到最终的浏览器环境</span><br><span class="line">            &#123;test: /\.less/, loader: &apos;style-loader!css-loader!less-loader&apos;&#125;,</span><br><span class="line">            //.css 文件使用 style-loader 和 css-loader 来处理</span><br><span class="line">            &#123; test: /\.css$/, loader: &apos;style-loader!css-loader&apos; &#125;,</span><br><span class="line">            //.js 文件使用 jsx-loader 来编译处理 jsx-loader可以添加?harmony参数使其支持ES6语法</span><br><span class="line">            &#123; test: /\.js$/,</span><br><span class="line">                exclude: /node_modules/,</span><br><span class="line">                loader: &apos;babel&apos;,</span><br><span class="line">                query:&#123;</span><br><span class="line">                    presets:[&apos;es2015&apos;,&apos;react&apos;]</span><br><span class="line">                &#125; //备注：es2015用于支持ES6语法，react用于解决render()报错的问题</span><br><span class="line">            &#125;,</span><br><span class="line">            //.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理</span><br><span class="line">            &#123; test: /\.scss$/, loader: &apos;style!css!sass?sourceMap&apos;&#125;,</span><br><span class="line">            //图片文件使用 url-loader 来处理，小于8kb的直接转为base64</span><br><span class="line">            &#123; test: /\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos;&#125;</span><br><span class="line">        ],</span><br><span class="line">        noParse: [pathToReact]</span><br><span class="line">    &#125;,</span><br><span class="line">    //其它解决方案配置</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        //查找module的话从这里开始查找</span><br><span class="line">        //root: &apos;E:/github/flux-example/app&apos;, //绝对路径</span><br><span class="line">        //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</span><br><span class="line">        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.json&apos;, &apos;.scss&apos;],</span><br><span class="line">        //模块别名定义，方便后续直接引用别名，无须多写长长的地址</span><br><span class="line">        alias: &#123;</span><br><span class="line">            AppStore : &apos;js/stores/AppStores.js&apos;,</span><br><span class="line">            ActionType : &apos;js/actions/ActionType.js&apos;,</span><br><span class="line">            AppAction : &apos;js/actions/AppAction.js&apos;,</span><br><span class="line">            //&apos;react&apos;: pathToReact,</span><br><span class="line">           // &apos;react-dom&apos;:pathToReactDom,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="生产环境配置文件webpack-config-prod-js"><a href="#生产环境配置文件webpack-config-prod-js" class="headerlink" title="生产环境配置文件webpack.config.prod.js"></a>生产环境配置文件webpack.config.prod.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by hammer on 2016/4/4.</span><br><span class="line"> * 生产环境配置文件</span><br><span class="line"> */</span><br><span class="line">var webpack = require(&apos;webpack&apos;);</span><br><span class="line">var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&apos;common&apos;,&apos;common.js&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">var node_modules = path.resolve(__dirname, &apos;node_modules&apos;);</span><br><span class="line">var pathToReact = path.resolve(node_modules, &apos;react/dist/react.min.js&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    //插件项</span><br><span class="line">    plugins: [</span><br><span class="line">        //commonsPlugin,</span><br><span class="line">        new webpack.NoErrorsPlugin()</span><br><span class="line">    ],</span><br><span class="line">    //页面入口文件配置</span><br><span class="line">    //entry: &#123;mian : &apos;./app/main.js&apos;&#125;,</span><br><span class="line">    entry:[</span><br><span class="line">        path.resolve(__dirname,&apos;app/main.js&apos;)</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    //入口文件输出配置</span><br><span class="line">    //output: &#123;path: __dirname+&apos;_build_&apos;, filename: &apos;[name].js&apos;&#125;</span><br><span class="line">    output:&#123;</span><br><span class="line">        path: path.resolve(__dirname,&apos;build&apos;),</span><br><span class="line">        filename: &apos;build.js&apos;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    module: &#123;</span><br><span class="line">        //加载器配置</span><br><span class="line">        loaders: [</span><br><span class="line">            //LESS文件先通过less-load处理成css，然后再通过css-loader加载成css模块，最后由style-loader加载器对其做最后的处理，</span><br><span class="line">            // 从而运行时可以通过style标签将其应用到最终的浏览器环境</span><br><span class="line">            &#123;test: /\.less/, loader: &apos;style-loader!css-loader!less-loader&apos;&#125;,</span><br><span class="line">            //.css 文件使用 style-loader 和 css-loader 来处理</span><br><span class="line">            &#123; test: /\.css$/, loader: &apos;style-loader!css-loader&apos; &#125;,</span><br><span class="line">            //.js 文件使用 jsx-loader 来编译处理 jsx-loader可以添加?harmony参数使其支持ES6语法</span><br><span class="line">            &#123; test: /\.js$/,</span><br><span class="line">                exclude: /node_modules/,</span><br><span class="line">                loader: &apos;babel&apos;,</span><br><span class="line">                query:&#123;</span><br><span class="line">                    presets:[&apos;es2015&apos;,&apos;react&apos;]</span><br><span class="line">                &#125; //备注：es2015用于支持ES6语法，react用于解决render()报错的问题</span><br><span class="line">            &#125;,</span><br><span class="line">            //.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理</span><br><span class="line">            &#123; test: /\.scss$/, loader: &apos;style!css!sass?sourceMap&apos;&#125;,</span><br><span class="line">            //图片文件使用 url-loader 来处理，小于8kb的直接转为base64</span><br><span class="line">            &#123; test: /\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos;&#125;</span><br><span class="line">        ],</span><br><span class="line">        noParse: [pathToReact]</span><br><span class="line">    &#125;,</span><br><span class="line">    //其它解决方案配置</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        //查找module的话从这里开始查找</span><br><span class="line">        //root: &apos;E:/github/flux-example/app&apos;, //绝对路径</span><br><span class="line">        //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</span><br><span class="line">        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.json&apos;, &apos;.scss&apos;],</span><br><span class="line">        //模块别名定义，方便后续直接引用别名，无须多写长长的地址</span><br><span class="line">        alias: &#123;</span><br><span class="line">            AppStore : &apos;js/stores/AppStores.js&apos;,</span><br><span class="line">            ActionType : &apos;js/actions/ActionType.js&apos;,</span><br><span class="line">            AppAction : &apos;js/actions/AppAction.js&apos;,</span><br><span class="line">            //&apos;react&apos;: pathToReact,</span><br><span class="line">            // &apos;react-dom&apos;:pathToReactDom,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="打包生成js文件"><a href="#打包生成js文件" class="headerlink" title="打包生成js文件"></a>打包生成js文件</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>执行<code>npm run dev</code><br>然后浏览器输入<code>http：//localhost：7777/</code></p>
<h2 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h2><p>执行<code>npm run build</code>，会在build目录生成<code>build.js</code>文件</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android最佳实践6：android studio使用]]></title>
      <url>http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B56%EF%BC%9Aandroid-studio%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>android studio版本号：2.1.5 preview<br>jdk 1.8<br>sdk: 6.0</p>
</blockquote>
<h1 id="开启-instant-run支持"><a href="#开启-instant-run支持" class="headerlink" title="开启 instant run支持"></a>开启 instant run支持</h1><p>这个类似于swift的热加载，大大改善开发效率<br>setting-&gt;Build,Execution,Deployment -&gt;Instant Run<br><img src="http://7xrf0l.com1.z0.glb.clouddn.com/16-4-1/12490656.jpg" alt=""></p>
<h1 id="开启java8的支持"><a href="#开启java8的支持" class="headerlink" title="开启java8的支持"></a>开启java8的支持</h1><p>android studio从2.1开启改善了对java8的支持，好开森，可以放弃gradle-retrolambda了<br>re<br>参考地址在 <a href="http://luckymin.com/2016/03/16/2016031610_%E5%9C%A8AndroidStudio%E4%B8%AD%E6%94%AF%E6%8C%81Java8/" target="_blank" rel="external">Android Studio 中支持 Java 8</a></p>
<p>app.gradle文件增加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">···</span><br><span class="line">	defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">	//要想使用java8，必须使用jack编译</span><br><span class="line">    jackOptions &#123;</span><br><span class="line">      enabled true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外别忘了下载并修改buildTollersion 24.0.rc2</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>现阶段<br> <code>com.android.tools.build:gradle:2.1.0-alpha</code><br> <code>buildToolsVersion &quot;24rc2&quot;</code><br>build gradle时还是比较卡的，不推荐尝鲜，我尝试了一下又换回<br>gradle-retrolambda了</p>
<h1 id="支持instant和不支持instant的地方"><a href="#支持instant和不支持instant的地方" class="headerlink" title="支持instant和不支持instant的地方"></a>支持instant和不支持instant的地方</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native基础：组件生命周期]]></title>
      <url>http://hammercui.github.io/post/react-native%E5%9F%BA%E7%A1%80%EF%BC%9A%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://fraserxu.me/2014/08/31/react-component-lifecycle/" target="_blank" rel="external">React入门教程 - 组件生命周期</a></p>
<ul>
<li><code>componentWillMount（）</code>：<strong>组件加载</strong>。</li>
</ul>
<p><code>componentWillMount</code>会在组件<code>render()</code>之前执行，永远只执行一次。类似于Android的<code>onCreat</code></p>
<ul>
<li><code>componentDidMount()</code>:<strong>组件加载</strong>。</li>
</ul>
<p>这个方法在组件加载之后执行，这时组件已经生成了对应的DOM结构，可以通过<code>geDOMNode()</code>来进行访问。如果你想和其他JavaScript框架一起使用，可以在这个方法中执行setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)。</p>
<ul>
<li><code>componentWillReceiveProps（object nextProps）</code>：<strong>组件更新</strong>。</li>
</ul>
<p>这个方法在初始化render时不会被调用。旧的props可以通过this.props来获取。在这个函数内调用this.setState()方法不会增加一次新的render.</p>
<ul>
<li><code>boolean shouldComponentUpdate(object nextProps, object nextState)</code>：<strong>组件更新</strong>。</li>
</ul>
<p>返回一个布尔值。在组件接收到新的props或者state时被执行。在初始化时或者使用<code>forceUpdate</code>时不被执行。可以在你确认不需要更新组件时使用。</p>
<ul>
<li><code>componentWillUpdate(object nextProps, object nextState)</code>:<strong>组件更新</strong>.</li>
</ul>
<p>在组件接收到新的props或者state但还没有render时被执行。在初始化时不会被执行。</p>
<p>一般用在组件发生更新之前。</p>
<ul>
<li><code>componentDidUpdate(object prevProps, object prevState)</code>:<strong>组件更新</strong>.</li>
</ul>
<p>在组件完成更新后立即执行。在初始化时不会被执行。一般会在组件完成更新后被使用。例如清除notification文字等操作。</p>
<ul>
<li><code>componentWillUnmount()</code>:<strong>组件Unmounting</strong>.</li>
</ul>
<p>在组件从DOM unmount后立即执行.主要用来执行一些必要的清理任务。例如清除setTimeout等函数，或者任意的在componentDidMount创建的DOM元素。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react基础：react-web项目ui的选择]]></title>
      <url>http://hammercui.github.io/post/react%E5%9F%BA%E7%A1%80%EF%BC%9Areact-web%E9%A1%B9%E7%9B%AE%E9%80%89%E6%8B%A9ui/</url>
      <content type="html"><![CDATA[<h1 id="app项目选择material-ui"><a href="#app项目选择material-ui" class="headerlink" title="app项目选择material-ui"></a>app项目选择<a href="https://github.com/callemall/material-ui/blob/master/ROADMAP.md" target="_blank" rel="external">material-ui</a></h1><blockquote>
<p>目前我正在使用的ui框架，google material design的设计语言。github的stars有14839个，很值得信赖</p>
</blockquote>
<p>官网地址：<a href="http://www.material-ui.com/v0.15.0-alpha.1/#/customization/themes" target="_blank" rel="external">http://www.material-ui.com/v0.15.0-alpha.1/#/customization/themes</a></p>
<h1 id="web项目的选择ant-design"><a href="#web项目的选择ant-design" class="headerlink" title="web项目的选择ant.design"></a>web项目的选择<a href="http://ant.design/" target="_blank" rel="external">ant.design</a></h1><blockquote>
<p>淘宝的前端团队折腾出来的产品，评价不错，还未使用。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react基础：react0.14.7+webpack快速搭建web项目]]></title>
      <url>http://hammercui.github.io/post/react%E5%9F%BA%E7%A1%80%EF%BC%9Areact-webpack%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="方法1-一一安装"><a href="#方法1-一一安装" class="headerlink" title="方法1 一一安装"></a>方法1 一一安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install react react-dom babel-preset-react --save-dev</span><br><span class="line">npm install babel-preset-es2015 --save-dev</span><br><span class="line">npm install webpack --save-dev</span><br><span class="line">npm install webpack-dev-server --save-dev</span><br><span class="line">npm install babel-core --save-dev</span><br><span class="line">npm install babel-loader --save-dev</span><br></pre></td></tr></table></figure>
<h2 id="方法2-批量安装"><a href="#方法2-批量安装" class="headerlink" title="方法2 批量安装"></a>方法2 批量安装</h2><p>package.json添加如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> &quot;dependencies&quot;: &#123;</span><br><span class="line">   &quot;babel-runtime&quot;: &quot;^6.5.0&quot;,</span><br><span class="line">   &quot;react&quot;: &quot;^0.14.7&quot;,</span><br><span class="line">   &quot;react-dom&quot;: &quot;^0.14.7&quot;</span><br><span class="line"> &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &quot;devDependencies&quot;: &#123;</span><br><span class="line">&quot;amazeui-react&quot;: &quot;^1.0.1&quot;,</span><br><span class="line">   &quot;babel-core&quot;: &quot;^6.7.4&quot;,</span><br><span class="line">   &quot;babel-loader&quot;: &quot;^6.2.4&quot;,</span><br><span class="line">   &quot;babel-preset-es2015&quot;: &quot;^6.6.0&quot;,</span><br><span class="line">   &quot;babel-preset-react&quot;: &quot;^6.5.0&quot;,</span><br><span class="line">   &quot;css-loader&quot;: &quot;^0.23.1&quot;,</span><br><span class="line">   &quot;material-ui&quot;: &quot;^0.15.0-alpha.2&quot;,</span><br><span class="line">   &quot;react&quot;: &quot;^0.14.7&quot;,</span><br><span class="line">   &quot;react-dom&quot;: &quot;^0.14.7&quot;,</span><br><span class="line">   &quot;react-hot-loader&quot;: &quot;^1.3.0&quot;,</span><br><span class="line">   &quot;react-tap-event-plugin&quot;: &quot;^0.2.2&quot;,</span><br><span class="line">   &quot;style-loader&quot;: &quot;^0.13.1&quot;,</span><br><span class="line">   &quot;url-loader&quot;: &quot;^0.5.7&quot;,</span><br><span class="line">   &quot;webpack&quot;: &quot;^1.12.14&quot;,</span><br><span class="line">   &quot;webpack-dev-server&quot;: &quot;^1.14.1&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>然后执行<code>npn install</code></p>
<h1 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h1><p>工程截图<br><img src="http://7xrf0l.com1.z0.glb.clouddn.com/16-3-26/29969857.jpg" alt=""><br>在工程目录下新建<code>webpack.config.js</code>文件，内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by hammer on 2016/3/26.</span><br><span class="line"> * 配置的打包文件</span><br><span class="line"> */</span><br><span class="line">var webpack = require(&apos;webpack&apos;);</span><br><span class="line">//var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&apos;common.js&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">console.log(__dirname);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    //插件项</span><br><span class="line">    plugins: [</span><br><span class="line">		//commonsPlugin,</span><br><span class="line">		new webpack.NoErrorsPlugin()</span><br><span class="line">	1],</span><br><span class="line">    //页面入口文件配置</span><br><span class="line">    //entry: &#123;mian : &apos;./app/main.js&apos;&#125;,</span><br><span class="line">    entry:path.resolve(__dirname,&apos;./app/main.js&apos;),</span><br><span class="line">    //入口文件输出配置</span><br><span class="line">    //output: &#123;path: __dirname+&apos;_build_&apos;, filename: &apos;[name].js&apos;&#125;</span><br><span class="line">    output:&#123;</span><br><span class="line">        path: path.resolve(__dirname,&apos;./build&apos;),</span><br><span class="line">        filename: &apos;build.js&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        //加载器配置</span><br><span class="line">        loaders: [</span><br><span class="line">            //LESS文件先通过less-load处理成css，然后再通过css-loader加载成css模块，最后由style-loader加载器对其做最后的处理，</span><br><span class="line">            // 从而运行时可以通过style标签将其应用到最终的浏览器环境</span><br><span class="line">            &#123;test: /\.less/, loader: &apos;style-loader!css-loader!less-loader&apos;&#125;,</span><br><span class="line">            //.css 文件使用 style-loader 和 css-loader 来处理</span><br><span class="line">            &#123; test: /\.css$/, loader: &apos;style-loader!css-loader&apos; &#125;,</span><br><span class="line">            //.js 文件使用 jsx-loader 来编译处理 jsx-loader可以添加?harmony参数使其支持ES6语法</span><br><span class="line">            &#123; test: /\.js$/,</span><br><span class="line">                exclude: /node_modules/,</span><br><span class="line">                loader: &apos;babel&apos;,</span><br><span class="line">                query:&#123;</span><br><span class="line">                    presets:[&apos;es2015&apos;,&apos;react&apos;]</span><br><span class="line">                &#125; //备注：es2015用于支持ES6语法，react用于解决render()报错的问题</span><br><span class="line">            &#125;,</span><br><span class="line">            //.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理</span><br><span class="line">            &#123; test: /\.scss$/, loader: &apos;style!css!sass?sourceMap&apos;&#125;,</span><br><span class="line">            //图片文件使用 url-loader 来处理，小于8kb的直接转为base64</span><br><span class="line">            &#123; test: /\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    //其它解决方案配置</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        //查找module的话从这里开始查找</span><br><span class="line">        //root: &apos;E:/github/flux-example/app&apos;, //绝对路径</span><br><span class="line">        //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</span><br><span class="line">        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.json&apos;, &apos;.scss&apos;],</span><br><span class="line">        //模块别名定义，方便后续直接引用别名，无须多写长长的地址</span><br><span class="line">        alias: &#123;</span><br><span class="line">            AppStore : &apos;js/stores/AppStores.js&apos;,</span><br><span class="line">            ActionType : &apos;js/actions/ActionType.js&apos;,</span><br><span class="line">            AppAction : &apos;js/actions/AppAction.js&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>执行<code>webpack</code>命令进行打包，打包完成就会在build目录出现build.js文件，编译成功。</p>
<h1 id="编译并启动"><a href="#编译并启动" class="headerlink" title="编译并启动"></a>编译并启动</h1><p>修改<code>package.json</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;,</span><br><span class="line">	&quot;dev&quot;: &quot;webpack-dev-server --devtool eval --progress --colors --hot --content-base build&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>index.html文件如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;build.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>可修改服务的端口号<code>webpac.config.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">       inline: true,</span><br><span class="line">       port: 7777</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></p>
<p>运行<code>npm run dev</code><br>在浏览器打开<a href="http://localhost:7777预览" target="_blank" rel="external">http://localhost:7777预览</a></p>
<h1 id="启用webpack-dev-server进行动态开发"><a href="#启用webpack-dev-server进行动态开发" class="headerlink" title="启用webpack-dev-server进行动态开发"></a>启用webpack-dev-server进行动态开发</h1><p>1 在配置中增加一个入口点,修改<code>webpack.config.js</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">entry:[</span><br><span class="line">        &apos;webpack/hot/dev-server&apos;,</span><br><span class="line">        path.resolve(__dirname,&apos;app/main.js&apos;)</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure></p>
<p>2 修改inedx.html文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id = &quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;http://localhost:7777/webpack-dev-server.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;build.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>这样可以通过</p>
<p>运行<code>npm run dev</code>进入开发模式，可以快速编辑直接预览</p>
<h1 id="优化重合并"><a href="#优化重合并" class="headerlink" title="优化重合并"></a>优化重合并</h1><p>你可能注意到在引入 React JS 到你的项目之后，给你的应用重新合并会花费太多的时间。在开发环境中，最理想的是编译最多 200 到 800 毫秒的速度，取决于你在开发的应用。<br>在开发环境中使用压缩文件<br>为了不让 Webpack 去遍历 React JS 及其依赖，你可以在开发中重写它的行为。<br>修改<code>webpack.config.js</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">+ var node_modules = path.resolve(__dirname, &apos;node_modules&apos;);</span><br><span class="line">+ var pathToReact = path.resolve(node_modules, &apos;react/dist/react.min.js&apos;);</span><br><span class="line"></span><br><span class="line">config = &#123;</span><br><span class="line">    entry: [&apos;webpack/hot/dev-server&apos;, path.resolve(__dirname, &apos;app/main.js&apos;)],</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">         + &apos;react&apos;: pathToReact</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, &apos;build&apos;),</span><br><span class="line">        filename: &apos;bundle.js&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        loaders: [&#123;</span><br><span class="line">            test: /\.jsx?$/,</span><br><span class="line">            loader: &apos;babel&apos;</span><br><span class="line">        &#125;],</span><br><span class="line">        noParse: [pathToReact]</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports = config;</span><br></pre></td></tr></table></figure></p>
<h1 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h1><h2 id="1-Uncaught-ReferenceError-webpackJsonp-is-not-defined"><a href="#1-Uncaught-ReferenceError-webpackJsonp-is-not-defined" class="headerlink" title="1 Uncaught ReferenceError: webpackJsonp is not defined"></a>1 Uncaught ReferenceError: webpackJsonp is not defined</h2><p>使用CommonsChunkPlugin生成了公共文件，但是未使用<br>添加</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://segmentfault.com/a/1190000003768578" target="_blank" rel="external">初学webpack与react</a>,这个是我认为最好的教程。</p>
<p><a href="https://segmentfault.com/a/1190000002767365#articleHeader7" target="_blank" rel="external">轻松入门React和Webpack</a></p>
<p><a href="http://www.w2bc.com/Article/50764" target="_blank" rel="external">一小时包教会 —— webpack 入门指南</a></p>
<p><a href="http://www.zplan.net/news.php?id=287" target="_blank" rel="external">react新版本与babel新版本的兼容问题:Module build failed: SyntaxError:React.render(<br>Hello</a><br><a href="http://www.jianshu.com/p/418e48e0cef1" target="_blank" rel="external">React+Webpack快速上手指南</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react基础：npm如何使用淘宝镜像]]></title>
      <url>http://hammercui.github.io/post/react%E5%9F%BA%E7%A1%80%EF%BC%9Anpm%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>对于不能翻墙的同学，npm加载会变得相当难受，可以采用<a href="http://npm.taobao.org/" target="_blank" rel="external">淘宝的npm镜像</a>进行加速。</p>
</blockquote>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure>
<h2 id="持久使用"><a href="#持久使用" class="headerlink" title="持久使用"></a>持久使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">// 配置后可通过下面方式来验证是否成功</span><br><span class="line">npm config get registry</span><br><span class="line">// 或</span><br><span class="line">npm info express</span><br></pre></td></tr></table></figure>
<h2 id="通过cnpm使用"><a href="#通过cnpm使用" class="headerlink" title="通过cnpm使用"></a>通过cnpm使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">// 使用</span><br><span class="line">cnpm install express</span><br></pre></td></tr></table></figure>
<p>以后需要通过npm安装的，使用cnpm安装就行</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6学习：常用操作函数]]></title>
      <url>http://hammercui.github.io/post/ES6%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li>ReactNative中文社区的<a href="http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8" target="_blank" rel="external">React/React Native 的ES5 ES6写法对照表</a></li>
<li><a href="https://segmentfault.com/a/1190000003857670?_ea=396445" target="_blank" rel="external">拥抱ES6之数组扩展</a></li>
<li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">阮一峰的es6入门</a></li>
</ul>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>数组，常用map进行遍历</p>
<p>新建</p>
<p><code>var array = new Array();</code></p>
<p>或者</p>
<p><code>var array = [&quot;1111&quot;,&quot;22222&quot;]</code></p>
<ul>
<li><code>array.lenght</code>:数组长度</li>
<li><code>array.isArray</code>:判断一个对象是否是数组</li>
</ul>
<p><strong><code>Array.from</code></strong> </p>
<p>这个方法作用是将一个 ArrayLike 对象或者 Iterable 对象转换成一个 Array ，本文只讨论 ArrayLike 对象相关内容。<br>比如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//把一个字符串转换成数组对象</span><br><span class="line">var Array.from(“qwert”)</span><br><span class="line">//[&quot;q&quot;,&quot;w&quot;,&quot;e&quot;,&quot;r&quot;,&quot;t&quot;]</span><br></pre></td></tr></table></figure>
<p><strong><code>Array.map</code></strong></p>
<p>用来将数组转换为另外一个数组</p>
<p>基本用法跟forEach方法类似：</p>
<p><code>array.map(callback,[ thisObject]);</code></p>
<p>callback的参数也类似：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[].map(function(value, index, array) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    return Object</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>但是map更多的是用来返回对象<br><code>callback</code>需要有return值,return值就相当于foreach运算之后的返回值。所以常用于循环遍历数组，返回<view>对象，也就是react的render方法里，比如以下代码用法：</view></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var array = [&quot;我&quot;,&quot;你&quot;]</span><br><span class="line">render()&#123;</span><br><span class="line">return(</span><br><span class="line">	array.map((str,index)==&gt;&#123;</span><br><span class="line">		&lt;View&gt;&#123;str&#125;&lt;/View&gt;</span><br><span class="line">	&#125;)</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><code>Array.concat()</code></strong></p>
<p>方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = Array.of(1, 2, 3);</span><br><span class="line">var resArr = arr.concat(4);</span><br><span class="line">arr // [ 1, 2, 3 ]</span><br><span class="line">resArr // [ 1, 2, 3, 4 ]</span><br></pre></td></tr></table></figure>
<p><strong><code>Array.join()</code></strong></p>
<p>方法用于把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行分隔的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = Array.of(1, 2, 3);</span><br><span class="line">var resStr = arr.join(&quot;,&quot;);</span><br><span class="line">arr // [ 1, 2, 3 ]</span><br><span class="line">resStr // 1,2,3</span><br></pre></td></tr></table></figure>
<p><strong>Array.pop()</strong></p>
<p>方法用于删除并返回数组的最后一个元素。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = Array.of(1, 2, 3);</span><br><span class="line">var resEle = arr.pop();</span><br><span class="line">arr // [ 1, 2 ]</span><br><span class="line">resEle // 3</span><br></pre></td></tr></table></figure>
<p><strong><code>Array.push()</code></strong></p>
<p>方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = Array.of(1, 2, 3);</span><br><span class="line">var resLen = arr.push(&apos;a&apos;);</span><br><span class="line">arr // [ 1, 2, 3, &apos;a&apos; ]</span><br><span class="line">resLen // 4</span><br></pre></td></tr></table></figure>
<p><strong><code>Array.sort()</code></strong></p>
<p>方法用于对数组的元素进行排序。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//按照整数数值比较</span><br><span class="line">var arr = Array.of(3, 11, 8);</span><br><span class="line">var res = arr.sort((a, b) =&gt; a - b);</span><br><span class="line">arr // [ 11, 3, 8 ]</span><br><span class="line">res // [ 3, 8, 11 ]</span><br></pre></td></tr></table></figure>
<p><strong><code>Array.fliter()</code></strong></p>
<p>使用指定的函数测试所有元素，并返回一个包含所有测试通过的元素的数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var new_arrary = arr.filter(callback[, thisArg])</span><br></pre></td></tr></table></figure>
<p>callback函数：<br>用来测试数组每个元素的函数，参数是（element，index，array），返回true表示用过测试，保留，false表示不保留</p>
<p>thisArg：<br>可选。执行 callback 时的用于 this 的值。</p>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise</p>
<p>1 简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果.</p>
<p>2 语法上，promise是一个对象，可以获取异步操作的消息。有三种状态：Pending(进行总)，Resolved（已完成），Rejected（已失败）.<br>3 Promise构造函数接受一个函数作为参数。该函数的两个参数是resolve方法和reject方法。</p>
<h2 id="Sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h2><p>es7新增特性，结合或者Promise使用，表达一个异步操作，内部函数体内。<code>awite function()</code>操作为要等待的操作，类似于c#的yield，之后的awite操作执行完毕，后面的代码段才执行</p>
<p>## </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native android实战：5 ListView构建信息流]]></title>
      <url>http://hammercui.github.io/post/react-native-android%E5%AE%9E%E6%88%98%EF%BC%9AlistView%E6%9E%84%E5%BB%BA%E4%BF%A1%E6%81%AF%E6%B5%81/</url>
      <content type="html"><![CDATA[<h2 id="需要掌握的基础语法"><a href="#需要掌握的基础语法" class="headerlink" title="需要掌握的基础语法"></a>需要掌握的基础语法</h2><ul>
<li>1 使用 fetch</li>
</ul>
<p>fetch是一个更好的网络API，它由标准委员会提出，并已经在Chrome中实现。它在React Native中也默认可以使用。</p>
<ul>
<li>2 使用promise</li>
</ul>
<h1 id="ScrollView的使用"><a href="#ScrollView的使用" class="headerlink" title="ScrollView的使用"></a>ScrollView的使用</h1><h1 id="ListView使用"><a href="#ListView使用" class="headerlink" title="ListView使用"></a>ListView使用</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android基础：applicationId与packageName的区别]]></title>
      <url>http://hammercui.github.io/post/android%E5%9F%BA%E7%A1%80%EF%BC%9AapplicationId%E4%B8%8EpackageName%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<blockquote>
<p><code>applicationId</code>：在Android系统中应用的<code>applicationId</code>作为应用的唯一标识，就像人的身份证号一样，在一个Android设备中所有的应用程序的<code>applicationId</code>都是唯一的。</p>
</blockquote>
<h1 id="eclipse版本"><a href="#eclipse版本" class="headerlink" title="eclipse版本"></a>eclipse版本</h1><p><code>package name</code>：在用Eclipse构建的Android项目中，使用包名(Package Name)作为应用的唯一标识（<code>applicationId</code>）。可以说在Eclipse下<code>applicationId</code>=<code>package name</code>。所以Eclipse构建的Android项目包名必须唯一，一个包名代表一个应用，不允许两个应用使用同样的包名。包名主要用于系统识别应用，几乎不会被最终用户看到。</p>
<h1 id="androidStudo版本"><a href="#androidStudo版本" class="headerlink" title="androidStudo版本"></a>androidStudo版本</h1><p>在用Android studio构建的Android项目中可以为应用配置<code>applicationId</code>·，配置的<code>applicationId</code>可以不和<code>package name</code>一样。由此可以看来用Android studio构建的Android项目<code>package name</code>不一定是应用程序的标识。这一点很重要，开发者一定要记住。比如你在使用第三方SDK开发时，如百度地图，需要你来设置Android SDK安全码，在设置安全码时需要用到应用程序的包名，这个包名指的是<code>applicationId</code>。</p>
<p><strong>注意</strong>：识别.R跟Activity文件的路径还是packageName,这个是唯一的</p>
<h2 id="解耦方案"><a href="#解耦方案" class="headerlink" title="解耦方案"></a>解耦方案</h2><ul>
<li><code>application id</code> 对应 apk 中 manifest 定义的应用包名，同时用于设备以及 Google Play 的应用唯一标识。</li>
<li><code>package</code> 用于在源码中引用 R 类以及解析注册相关的 activity/service，对应 Java 的包名概念。</li>
</ul>
<p>我们在AndroidManifest.xml定义一个包名，这个是唯一的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    package=&quot;com.hammercui.app.react&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>我们在<code>app.gradle</code>文件使用Gradle DSL 方法来为不同的 flavor 和 build type 定义不同的 applicationId：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">···</span><br><span class="line">productFlavors &#123;</span><br><span class="line">        pro &#123;</span><br><span class="line">            applicationId = &quot;com.hammercui.app.pro&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        free &#123;</span><br><span class="line">            applicationId = &quot;com.hammercui.app.free&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            applicationIdSuffix &quot;.debug&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://chaosleong.gitbooks.io/gradle-for-android/content/appendix/applicationid_versus_packagename.html" target="_blank" rel="external">Gradle Android Plugin中文手册</a></p>
<p><a href="http://siroccoicode.club/?p=574" target="_blank" rel="external">applicationID和packageName的区别</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native基础：热更新]]></title>
      <url>http://hammercui.github.io/post/react-native%E5%9F%BA%E7%A1%80%EF%BC%9A%E7%83%AD%E6%9B%B4%E6%96%B0/</url>
      <content type="html"><![CDATA[<h1 id="已知的热更新方案"><a href="#已知的热更新方案" class="headerlink" title="已知的热更新方案"></a>已知的热更新方案</h1><ul>
<li><p><a href="https://github.com/Microsoft/react-native-code-push" target="_blank" rel="external">CodePush</a> ,我在使用的方案，同时支持android跟ios，可以点击查看我的详细教程<a href="http://hammercui.github.io/post/react-native-android%E5%AE%9E%E6%88%98%EF%BC%9A4-CodePush/">react-native-android实战：4 CodePush使用</a></p>
</li>
<li><p><a href="http://blog.csdn.net/kid1986513/article/details/50337083" target="_blank" rel="external">React Native for Android 热部署图片自定义方案</a></p>
</li>
<li><p><a href="React-Native Android 热更新">React-Native Android 热更新</a>,这个方案对反射的方案做了补充</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[购物清单]]></title>
      <url>http://hammercui.github.io/post/%E8%B4%AD%E7%89%A9%E6%B8%85%E5%8D%95/</url>
      <content type="html"><![CDATA[<h1 id="家用电器"><a href="#家用电器" class="headerlink" title="家用电器"></a>家用电器</h1><h2 id="洗衣机"><a href="#洗衣机" class="headerlink" title="洗衣机"></a>洗衣机</h2><table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>价格</th>
<th>个人评价</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://product.suning.com/0000000000/128927868.html" target="_blank" rel="external">海尔滚筒洗衣机XQG80-BX12636</a></td>
<td>滚筒</td>
<td>2899</td>
<td>担心小孩，次要考虑</td>
</tr>
<tr>
<td><a href="http://product.suning.com/0000000000/126705291.html" target="_blank" rel="external">海尔洗衣机XQS70-Z1626</a></td>
<td>波轮</td>
<td>2599</td>
<td>这个不错，防缠绕</td>
</tr>
</tbody>
</table>
<h2 id="冰箱"><a href="#冰箱" class="headerlink" title="冰箱"></a>冰箱</h2><table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>价格</th>
<th>个人评价</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://product.suning.com/0000000000/127894615.html" target="_blank" rel="external">海尔冰箱BCD-248WDPM</a></td>
<td>双开门</td>
<td>2288</td>
<td>风冷无霜</td>
</tr>
<tr>
<td><a href="http://product.suning.com/0000000000/127356379.html" target="_blank" rel="external">海尔冰箱BCD-251WDBD</a></td>
<td>双开门</td>
<td>2699</td>
<td>风冷无霜</td>
</tr>
<tr>
<td><a href="http://product.suning.com/0000000000/123397587.html" target="_blank" rel="external">美菱冰箱BCD-220L3BX芙蓉红</a></td>
<td>三开门</td>
<td>1699</td>
<td>红色，其他无特点</td>
</tr>
</tbody>
</table>
<h2 id="电视"><a href="#电视" class="headerlink" title="电视"></a>电视</h2><table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>价格</th>
<th>个人评价</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://product.suning.com/0000000000/128582435.html" target="_blank" rel="external">三星(SAMSUNG) UA58J50SWAJXXZ</a></td>
<td>58英寸 全高清 LED液晶电视</td>
<td>4599</td>
<td>首选项，放弃4k</td>
</tr>
<tr>
<td><a href="http://product.suning.com/0000000000/126643209.html" target="_blank" rel="external">夏普(SHARP) LCD-55S3A</a></td>
<td>55英寸</td>
<td>4999</td>
<td>4K超高清 智能网络 液晶电视</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native-android实战：4 CodePush使用]]></title>
      <url>http://hammercui.github.io/post/react-native-android%E5%AE%9E%E6%88%98%EF%BC%9A4-CodePush/</url>
      <content type="html"><![CDATA[<h1 id="CodePush简介"><a href="#CodePush简介" class="headerlink" title="CodePush简介"></a>CodePush简介</h1><p><a href="http://microsoft.github.io/code-push/" target="_blank" rel="external">CodePush</a> 是微软开发的，可以实时更新 React Native 和 Cordova 应用。</p>
<p>CodePush 是提供给 React Native 和 Cordova 开发者直接部署移动应用更新给用户设备的云服务。CodePush 作为一个中央仓库，开发者可以推送更新到 (JS, HTML, CSS and images)，应用可以从客户端 SDKs 里面查询更新。CodePush 可以让应用有更多的可确定性，也可以让你直接接触用户群。在修复一些小问题和添加新特性的时候，不需要经过二进制打包，可以直接推送代码进行实时更新。</p>
<p>CodePush 可以进行实时的推送代码更新：</p>
<ul>
<li>直接对用户部署代码更新</li>
<li>管理 Alpha，Beta 和生产环境应用</li>
<li>支持 Cordova 和 React Native </li>
</ul>
<p><strong>CodePush的react-native版本是<a href="https://github.com/Microsoft/react-native-code-push" target="_blank" rel="external">react-native-code-push</a></strong></p>
<h1 id="JavaScript-API"><a href="#JavaScript-API" class="headerlink" title="JavaScript API"></a>JavaScript API</h1><ul>
<li>checkForUpdate</li>
<li>getCurrentPackage</li>
<li>notifyApplicationReady</li>
<li>restartApp </li>
<li>sync</li>
</ul>
<h2 id="codePush-checkForUpdate"><a href="#codePush-checkForUpdate" class="headerlink" title="codePush.checkForUpdate"></a>codePush.checkForUpdate</h2><p>询问<code>code push</code> 服务器是否app有新的版本</p>
<p><code>codePush.checkForUpdate(deploymentKey: String = null): Promise&lt;RemotePackage&gt;;</code></p>
<p>该方法返回Promise，有如下两种值：</p>
<ol>
<li>null 没有更新</li>
<li>A RemotePackage instance</li>
</ol>
<p>举例用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">codePush.checkForUpdate()</span><br><span class="line">.then((update) =&gt; &#123;</span><br><span class="line">    if (!update) &#123;</span><br><span class="line">        console.log(&quot;The app is up to date!&quot;); </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        console.log(&quot;An update is available! Should we download it?&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="codePush-getCurrentPackage"><a href="#codePush-getCurrentPackage" class="headerlink" title="codePush.getCurrentPackage"></a><code>codePush.getCurrentPackage</code></h2><p>获得当前已安装更新的元数据（比如描述，安装时间，大小）<br>举例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">codePush.getCurrentPackage()</span><br><span class="line">.then((update) =&gt; &#123;</span><br><span class="line">    // If the current app &quot;session&quot; represents the first time</span><br><span class="line">    // this update has run, and it had a description provided</span><br><span class="line">    // with it upon release, let&apos;s show it to the end user</span><br><span class="line">    if (update.isFirstRun &amp;&amp; update.description) &#123;</span><br><span class="line">        // Display a &quot;what&apos;s new?&quot; modal</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="codePush-notifyApplicationReady"><a href="#codePush-notifyApplicationReady" class="headerlink" title="codePush.notifyApplicationReady"></a><code>codePush.notifyApplicationReady</code></h2><p>通知CodePush进程，一个更新安装好了。当你检查并安装更新，（比如没有使用sync方法去handle的时候），这个方法必须被调用。否则CodePush会认为update失败，并rollback当前版本，在app重启时。</p>
<p>当使用<code>sync</code>方法时，不需要调用本方法，因为<code>sync</code>会自动调用，</p>
<h2 id="codePush-restartApp"><a href="#codePush-restartApp" class="headerlink" title="codePush.restartApp"></a><code>codePush.restartApp</code></h2><p>立即重启app.</p>
<p>当以下情况时，这个方式是很有用的。：</p>
<ol>
<li>app 当 调用 <code>sync</code> or <code>LocalPackage.install</code> 方法时，指定的 install mode 是 <code>ON_NEXT_RESTART</code> or <code>ON_NEXT_RESUME</code>时 . 这两种情况都是当app重启或resume时，更新内容才能被看到。</li>
<li>You have an app-specific user event (e.g. the end user navigated back to the app’s home route) that allows you to apply the update in an unobtrusive way, and potentially gets the update in front of the end user sooner then waiting until the next restart or resume.</li>
</ol>
<p>因为强制重启，能马上显示更新内容嘛！</p>
<h2 id="codePush-sync"><a href="#codePush-sync" class="headerlink" title="codePush.sync"></a><code>codePush.sync</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codePush.sync(options: Object, syncStatusChangeCallback: function(syncStatus: Number), downloadProgressCallback: function(progress: DownloadProgress)): Promise&lt;Number&gt;;</span><br></pre></td></tr></table></figure>
<p>允许检查更新，下载并安装，都在一个方法中。除非你需要自定义UI开表现。我们建议开发者在整合CodePush时，使用这个函数。<br>checkForUpdate方法只能检查更新，接下来怎么做要自己写。而该方法更新，下载，安装都能处理。该方法提供了两种模式</p>
<ul>
<li><code>Silent mode</code>（默认的模式），</li>
</ul>
<p>它会自动下载可用更新，并在下次重启应用时应用它们（比如操作系统或用户杀死进程，或者重新启动设备） 。这样一来，整个更新是“沉默”给最终用户，因为用户看不到任何更新提示。</p>
<ul>
<li><code>Active mode</code></li>
</ul>
<p>当有可用的更新，提示用户是否允许下载，然后立即应用此更新。一旦选择了强制通知用户来手动更新，以后每次更新都会强制通知。个人感觉这种方式最合理</p>
<p><code>sync</code>方法，有以下设置属性</p>
<ul>
<li><code>deploymentKey</code> （String）： 部署key，用来区分不同的app,在<code>Info.plist</code>(Ios)和<code>MianActivity.java</code>(Android)修改，当然你也可以在JavaScript里填写，这样我们能动态的修改key</li>
<li><code>installMode</code> (codePush.InstallMode)： 非强制更新，默认<code>codePush.InstallMode.ON_NEXT_RESTART</code></li>
<li><code>mandatoryInstallMode</code> (codePush.InstallMode):强制更新,默认<code>codePush.InstallMode.IMMEDIATE</code></li>
<li><code>minimumBackgroundDuration</code> (Number):</li>
<li><p><code>updateDialog</code> (UpdateDialogOptions) :可选的，更新的对话框，默认是null,包含以下属性</p>
<ul>
<li><p><code>appendReleaseDescription</code> (Boolean) - 是否显示更新description，默认false</p>
</li>
<li><p><code>descriptionPrefix</code> (String) - 更新说明的前缀。 默认是” Description: “</p>
</li>
<li><p><code>mandatoryContinueButtonLabel</code> (String) - 强制更新的按钮文字. 默认 to “Continue”.</p>
</li>
<li><p><code>mandatoryUpdateMessage</code> (String) - 强制更新时，更新通知. Defaults to “An update is available that must be installed.”.</p>
</li>
<li><p><code>optionalIgnoreButtonLabel</code> (String) - 非强制更新时，取消按钮文字. Defaults to “Ignore”.</p>
</li>
<li><p><code>optionalInstallButtonLabel</code> (String) - 非强制更新时，确认文字. Defaults to “Install”.</p>
</li>
<li><p><code>optionalUpdateMessage</code> (String) - 非强制更新时，更新通知. Defaults to “An update is available. Would you like to install it?”.</p>
</li>
<li><p><code>title</code> (String) - 要显示的更新通知的标题. Defaults to “Update available”.</p>
</li>
</ul>
</li>
</ul>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// Prompt the user when an update is available</span><br><span class="line">// and then display a &quot;downloading&quot; modal </span><br><span class="line">codePush.sync(&#123; updateDialog: true &#125;, (status) =&gt; &#123;</span><br><span class="line">    switch (status) &#123;</span><br><span class="line">        case codePush.SyncStatus.DOWNLOADING_PACKAGE:</span><br><span class="line">            // Show &quot;downloading&quot; modal</span><br><span class="line">            break;</span><br><span class="line">        case codePush.SyncStatus.INSTALLING_UPDATE:</span><br><span class="line">            // Hide &quot;downloading&quot; modal</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/Microsoft/react-native-code-push/blob/master/Examples/CodePushDemoApp/crossplatformdemo.js#L68" target="_blank" rel="external">再贴一个官方demo地址</a></p>
<h1 id="实战应用"><a href="#实战应用" class="headerlink" title="实战应用"></a>实战应用</h1><h2 id="Service部署"><a href="#Service部署" class="headerlink" title="Service部署"></a>Service部署</h2><h3 id="安装CodePush-CLI"><a href="#安装CodePush-CLI" class="headerlink" title="安装CodePush CLI"></a>安装CodePush CLI</h3><p><code>npm install -g code-push-cli</code></p>
<p>可以输入<code>code-push -v</code>查看版本号</p>
<h3 id="创建CodePush-账号"><a href="#创建CodePush-账号" class="headerlink" title="创建CodePush 账号"></a>创建CodePush 账号</h3><p>在发布一个更新前，必须有账号。</p>
<ul>
<li>终端输入<code>code-push register</code>,执行后弹出<a href="https://codepush-management.azurewebsites.net/auth/register?hostname=DESKTOP-3PVIHT6，" target="_blank" rel="external">https://codepush-management.azurewebsites.net/auth/register?hostname=DESKTOP-3PVIHT6，</a></li>
<li>选择输入微软账号或者github账号，选择Authorize application。然后注册成功，获得一个token。</li>
<li>token输入到控制台，显示<br><img src="http://7xrf0l.com1.z0.glb.clouddn.com/16-3-18/11301899.jpg" alt=""></li>
<li>登录 <code>code-push login</code></li>
<li>注销 <code>code-push loout</code></li>
<li>列出登录的token<code>code-push access-key ls</code></li>
<li>删除某个access-key <code>code-push access-key rm &lt;accessKey&gt;</code></li>
</ul>
<h3 id="注册一个app"><a href="#注册一个app" class="headerlink" title="注册一个app"></a>注册一个app</h3><p>常用命令,只有下面几个：</p>
<ul>
<li><code>access-key</code>    View and delete active user sessions</li>
<li><code>app</code>         View and manage your CodePush-enabled apps</li>
<li><code>collaborator</code>   View and manage collaborators for a given app</li>
<li><code>deployment</code>     View and manage the deployments for your apps</li>
<li><code>login</code>         Authenticate with the CodePush server in order to begin managing your apps</li>
<li><code>logout</code>       Log out of the current session</li>
<li><code>promote</code>      Promote the package from one deployment of your app to another</li>
<li><code>register</code>       Register a new account with the CodePush server</li>
<li><code>release</code>       Release a new version of your app to a specific deployment</li>
<li><code>release-react</code> Release a new version of your React Native app to a specific deployment</li>
<li><code>rollback</code>       Performs a rollback on the latest package of a specific deployment</li>
</ul>
<p>选项：</p>
<ul>
<li>-v, –version  显示版本号  [boolean]</li>
</ul>
<p>比如</p>
<ul>
<li>查看当前部署的app: <code>code-push app ls</code></li>
<li>添加一个app:  <code>code-push app add Zlot_react</code></li>
</ul>
<h3 id="部署已经注册的app"><a href="#部署已经注册的app" class="headerlink" title="部署已经注册的app"></a>部署已经注册的app</h3><ul>
<li>部署: <code>code-push deployment add app名字 部署名</code></li>
<li>重命名部署名： <code>code-push deployment rename app名字 旧部署名 新部署名</code></li>
<li>删除部署名字:  <code>code-push deployment rm app名字 部署名字</code></li>
<li>列表部署名字: <code>code-push deployment ls app名字</code></li>
<li>查看部署的key: <code>code-push deployment ls app名 -k</code></li>
<li>查看release 的历史版本<br><code>code-push deployment history appName deploymentName</code></li>
</ul>
<p><strong>注意：默认的部署名是staging，所以staging的key值就是我们的deployment key</strong></p>
<h2 id="react-native-code-push插件安装"><a href="#react-native-code-push插件安装" class="headerlink" title="react-native-code-push插件安装"></a>react-native-code-push插件安装</h2><p>需要有git环境，并在app工程目录控制台输入</p>
<p><code>npm install react-native-code-push --save</code></p>
<p>安装成功在package.json会看到</p>
<p><code>&quot;react-native-code-push&quot;: &quot;^1.8.0-beta&quot;,</code></p>
<h2 id="android配置"><a href="#android配置" class="headerlink" title="android配置"></a>android配置</h2><ul>
<li>编辑android/setting.gradle文件，添加</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include &apos;:app&apos;, &apos;:react-native-code-push&apos;</span><br><span class="line">project(&apos;:react-native-code-push&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/react-native-code-push/android/app&apos;)</span><br></pre></td></tr></table></figure>
<ul>
<li>编辑android/app/builde.gradle文件，添加依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile project(&apos;:react-native-code-push&apos;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>android react-native v0.18.0+</strong></p>
<blockquote>
<p>此种配置方法仅仅适用react-native 0.18版本及其以上。而且是android studio环境</p>
</blockquote>
<ul>
<li>修改<code>MainActivity.java</code>文件,添加CodePush包</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 1. Import the plugin class</span><br><span class="line">import com.microsoft.codepush.react.CodePush;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class MainActivity extends ReactActivity &#123;</span><br><span class="line">    // 2. Define a private field to hold the CodePush runtime instance</span><br><span class="line">    private CodePush _codePush;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    // 3. Override the getJSBundleFile method in order to let</span><br><span class="line">    // the CodePush runtime determine where to get the JS</span><br><span class="line">    // bundle location from on each app start</span><br><span class="line">    @Override</span><br><span class="line">    protected String getJSBundleFile() &#123;</span><br><span class="line">        return this._codePush.getBundleUrl(&quot;index.android.bundle&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected List&lt;ReactPackage&gt; getPackages() &#123;</span><br><span class="line">        // 4. Instantiate an instance of the CodePush runtime, using the right deployment key. If you don&apos;t</span><br><span class="line">        // already have it, you can run &quot;code-push deployment ls &lt;appName&gt; -k&quot; to retrieve your key.</span><br><span class="line">        this._codePush = new CodePush(&quot;0dsIDongIcoH0mqAmoR0CYb5FhBZNy1w4Bf-l&quot;, this, BuildConfig.DEBUG);</span><br><span class="line"></span><br><span class="line">        // 5. Add the CodePush package to the list of existing packages</span><br><span class="line">        return Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">            new MainReactPackage(), this._codePush.getReactPackage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>确定在<code>android/app/build.gradle</code>文件有<code>android.defaultConfig.versionName</code>属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        versionName &quot;1.0.0&quot;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h2><ul>
<li>导入CodePush的JavaScript组件</li>
</ul>
<p><code>import codePush from &quot;react-native-code-push&quot;;</code></p>
<ul>
<li>在在每个app启动时，在生命周期的<code>componentDidMount</code>阶段调用<code>sync</code>,来开启一个后台的更新。</li>
</ul>
<p><code>codePush.sync();</code></p>
<h3 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a>设计方案</h3><ul>
<li><code>isMandatory === true</code>强制更新，采用弹出model框提醒的方式</li>
</ul>
<ul>
<li><code>isMandatory === false</code>非强制更新，采用静默安装的方式</li>
</ul>
<p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    codePush.sync(&#123;</span><br><span class="line">      updateDialog: false,</span><br><span class="line">      installMode: codePush.InstallMode.ON_NEXT_RESUME,</span><br><span class="line">      deploymentKey: CODE_PUSH_PRODUCTION_KEY,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p>
<h2 id="app如何更新（JavaScript-image）"><a href="#app如何更新（JavaScript-image）" class="headerlink" title="app如何更新（JavaScript+image）"></a>app如何更新（JavaScript+image）</h2><blockquote>
<p>注意：从react-native v0.19.0开始支持android更新assets资源，并且需要CodePush v1.7.0。所以你需要升级你的react-native跟CodePush。</p>
</blockquote>
<p>确保在工程目录,新建release文件夹,如下</p>
<h3 id="package命令"><a href="#package命令" class="headerlink" title="package命令"></a>package命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">react-native bundle </span><br><span class="line">--platform ios 选择平台</span><br><span class="line">--entry-file index.ios.js  选择启动项</span><br><span class="line">--bundle-output ./release/main.jsbundle  选择打包js输出文件</span><br><span class="line">--assets-dest ./release \  选择资源输出目录</span><br><span class="line">--dev false  是否调试</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Android版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native bundle --platform android --entry-file index.android.js --bundle-output ./release/main.jsbundle  --assets-dest ./release --dev false</span><br></pre></td></tr></table></figure>
</li>
<li><p>ios版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native bundle --platform ios --entry-file index.ios.js --bundle-output ./release/main.jsbundle  --assets-dest ./release --dev false</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="release命令"><a href="#release命令" class="headerlink" title="release命令"></a>release命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">code-push release &lt;appName&gt; &lt;updateContents&gt; &lt;targetBinaryVersion&gt;</span><br><span class="line">[--deploymentName &lt;deploymentName&gt;]</span><br><span class="line">[--description &lt;description&gt;]</span><br><span class="line">[--mandatory]</span><br></pre></td></tr></table></figure>
<p>mandatory ：是否强制更新。</p>
<p><strong>注意：targetBinaryVersion指的是当前的app版本，比如客户端是1.0.0，如果我们要更新客户端，targetBinaryVersion也要是1.0.0，表示是1.0.0版本的更新，跟native的更新不太一样。这是我们第一次经常犯的错误大家不要搞混了。</strong></p>
<ul>
<li>Android版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-push release Zlot ./release 1.0.0 --description &quot;这是一个1.0.0版本的更新&quot; --mandatory true</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="1-更新不成功，报but-it-is-being-ignored-due-to-having-been-previously-rolled-back"><a href="#1-更新不成功，报but-it-is-being-ignored-due-to-having-been-previously-rolled-back" class="headerlink" title="1 更新不成功，报but it is being ignored due to having been previously rolled back."></a>1 更新不成功，报<code>but it is being ignored due to having been previously rolled back.</code></h2><p>问题原因：客户端版本1.0.0，然后release的版本是1.0.1，所以检测的时候发现不了1.0.0版本的更新。</p>
<p>因此我们也建议，js的更新采用静默更新，native的更新，做出提示。</p>
<p><strong>注意：targetBinaryVersion指的是当前的app版本，比如客户端是1.0.0，如果我们要更新客户端，targetBinaryVersion也要是1.0.0，表示是1.0.0版本的更新，跟native的更新不太一样。这是我们第一次经常犯的错误大家不要搞混了。</strong></p>
<h2 id="2-CodePush-An-update-is-available-but-it-is-being-ignored-due-to-having-been-previously-rolled-back"><a href="#2-CodePush-An-update-is-available-but-it-is-being-ignored-due-to-having-been-previously-rolled-back" class="headerlink" title="2 [CodePush] An update is available, but it is being ignored due to having been previously rolled back."></a>2 <code>[CodePush] An update is available, but it is being ignored due to having been previously rolled back.</code></h2><p>解决方案：一般这种情况是在，我们自定义model，展示更新过程，并监听了安装完成，比如这个<a href="https://github.com/Microsoft/react-native-code-push/blob/master/Examples/CodePushDemoApp/crossplatformdemo.js" target="_blank" rel="external">demo</a>,我这这里忘了在<code>componentDidMount()</code>方法里添加<code>CodePush.notifyApplicationReady();</code>，就一直报这个错误。添加上就ok了</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://blog.csdn.net/oiken/article/details/50279871" target="_blank" rel="external">使用CodePush热更新ReactNative JS代码</a></p>
<p><a href="https://github.com/Microsoft/react-native-code-push#releasing-updates-javascript--images" target="_blank" rel="external">react-native-code-push官方文档</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android最佳实践(中英文)]]></title>
      <url>http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%AD%E8%8B%B1%E6%96%87%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="转载-android最佳实践"><a href="#转载-android最佳实践" class="headerlink" title="转载 android最佳实践"></a>转载 android最佳实践</h1><p><a href="http://blog.csdn.net/asce1885/article/details/43699715" target="_blank" rel="external">转载中文版</a></p>
<p><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">转载英文版github地址</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native android实战：3 与原生模块混合开发]]></title>
      <url>http://hammercui.github.io/post/react-native-android%E5%AE%9E%E6%88%98%EF%BC%9A3%E4%B8%8E%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><blockquote>
<p>封装好java模块供JavaScript调用，比如我们用js实现不了的控件或模块，可以通过java实现并封装，供JavaScript使用。</p>
</blockquote>
<h2 id="java模块的封装"><a href="#java模块的封装" class="headerlink" title="java模块的封装"></a>java模块的封装</h2><p>java模块新建LogModule类，继承自ReactContextBaseJavaModule，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class LogModule extends ReactContextBaseJavaModule &#123;</span><br><span class="line"></span><br><span class="line">    private static final String MODULE_NAME= &quot;Log&quot;;</span><br><span class="line">	//构造函数</span><br><span class="line">    public LogModule(ReactApplicationContext reactContext) &#123;</span><br><span class="line">        super(reactContext);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	//字符串是JavaScript调用模块的名字</span><br><span class="line">    @Override</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return MODULE_NAME;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //暴露给JavaScript端的方法</span><br><span class="line">    @ReactMethod</span><br><span class="line">    public void d(String tag,String msg)</span><br><span class="line">    &#123;</span><br><span class="line">        Log.d(tag,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新建module注册类,实现自ReactPackage，把module注册如package<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class MyAppReactPackage implements ReactPackage &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123;</span><br><span class="line"></span><br><span class="line">            List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;();</span><br><span class="line">            //add Log模块</span><br><span class="line">            modules.add(new LogModule(reactContext));</span><br><span class="line">            //add DBlocal模块</span><br><span class="line">            modules.add(new DBlocalModule(reactContext));</span><br><span class="line">            return modules;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;</span><br><span class="line">        return Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123;</span><br><span class="line">        return Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注册包，在MainActivity中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected List&lt;ReactPackage&gt; getPackages() &#123;</span><br><span class="line">        return Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">            new MainReactPackage()</span><br><span class="line">          +  , new VectorIconsPackage()</span><br><span class="line">          +      ,new MyAppReactPackage()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="js调用封装的java"><a href="#js调用封装的java" class="headerlink" title="js调用封装的java"></a>js调用封装的java</h2><p>我们把需要自定义的java模块，统一管理，放在NativeBrigde.android.js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//log模块</span><br><span class="line">var RCTLog = NativeModules.Log;</span><br><span class="line">var Log = &#123;</span><br><span class="line">    d: function (tag: string, msg: string): void &#123;</span><br><span class="line">        console.log(tag,msg);</span><br><span class="line">        RCTLog.d(tag, msg);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">module .exports =&#123;Log,DBlocal&#125;;</span><br></pre></td></tr></table></figure></p>
<p>需要调用的时候<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var &#123;Log,DBlocal&#125; =  require(&apos;../AnComponent/NativeBridge&apos;);`</span><br><span class="line">Log.d(&apos;hehe&apos;,&quot;我是打印输出&quot;);</span><br></pre></td></tr></table></figure></p>
<h2 id="js向java传参"><a href="#js向java传参" class="headerlink" title="js向java传参"></a>js向java传参</h2><p>下面的参数类型在@ReactMethod注明的方法中，会被直接映射到它们对应的JavaScript类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Boolean -&gt; Bool</span><br><span class="line">Integer -&gt; Number</span><br><span class="line">Double -&gt; Number</span><br><span class="line">Float -&gt; Number</span><br><span class="line">String -&gt; String</span><br><span class="line">Callback -&gt; function</span><br><span class="line">ReadableMap -&gt; Object</span><br><span class="line">ReadableArray -&gt; Array</span><br></pre></td></tr></table></figure>
<h2 id="java执行结果回传给js"><a href="#java执行结果回传给js" class="headerlink" title="java执行结果回传给js"></a>java执行结果回传给js</h2><h3 id="1-回调"><a href="#1-回调" class="headerlink" title="1 回调"></a>1 <strong>回调</strong></h3><p>java层需要把结果传递给js，答案就是回调，最典型的一个场景就是javascript层调用java层的网络请求方法，java层拿到网络数据后需要将结果返回给javascript层</p>
<p>为了测试我们在已建好的模块新增方法,invoke回调的参数是无类型，无个数限制的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ReactMethod</span><br><span class="line">    public void getValue(String key,final Callback callback)&#123;</span><br><span class="line">        callback.invoke(&quot;我是结果&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>JavaScript中的使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//从本地数据库取值</span><br><span class="line">DBlocal.getValue(&apos;test&apos;,(result)=&gt;&#123;</span><br><span class="line">    Log.d(&apos;hehe&apos;,result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在android studio控制台可以看到结果<br><img src="http://7xrf0l.com1.z0.glb.clouddn.com/16-3-11/46348245.jpg" alt=""></p>
<h3 id="2-事件监听调用"><a href="#2-事件监听调用" class="headerlink" title="2 事件监听调用"></a>2 <strong>事件监听调用</strong></h3><p>还可以用事件调用JavaScript层，假设调用了java层方法后，我们希望发送一个事件给javascript，在javascript层再次进行打印输出。</p>
<p>java端</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@ReactMethod</span><br><span class="line">    public void d(String tag,String msg)&#123;</span><br><span class="line">        Log.d(tag, msg);</span><br><span class="line">        //发送事件给javascript层</span><br><span class="line">        WritableMap params = Arguments.createMap();</span><br><span class="line">        params.putString(&quot;TAG&quot;,tag);</span><br><span class="line">        params.putString(&quot;MSG&quot;,msg);</span><br><span class="line">        getReactApplicationContext()</span><br><span class="line">                .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)</span><br><span class="line">                .emit(&quot;logInConsole&quot;, params);//对应的javascript层的事件名为logInConsole，注册该事件即可进行回调</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>而对应的log.js并不需要做什么修改，我们只需要在想获得该事件的地方注册事件即可，比如我们想在主界面接收该事件，则在index.android.js中进行注册。</p>
<p>JavaScript端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount:function()&#123;</span><br><span class="line">    Log.d(&quot;tag&quot;,&quot;tag&quot;);//调用java层log方法，之后就会回调对应的事件（前提是注册了事件）</span><br><span class="line">    //直接使用DeviceEventEmitter进行事件注册</span><br><span class="line">    DeviceEventEmitter.addListener(&apos;logInConsole&apos;,(e)=&gt;&#123;</span><br><span class="line">       console.log(e);</span><br><span class="line">    &#125;); //记得在UnDidMount里卸载事件</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://blog.csdn.net/sbsujjbcy/article/details/49953041" target="_blank" rel="external">Android React Native使用原生模块</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native基础：Image资源适配]]></title>
      <url>http://hammercui.github.io/post/react-native%E5%9F%BA%E7%A1%80%EF%BC%9AImage%E8%B5%84%E6%BA%90%E9%80%82%E9%85%8D/</url>
      <content type="html"><![CDATA[<h1 id="判断设备的dpi"><a href="#判断设备的dpi" class="headerlink" title="判断设备的dpi"></a>判断设备的dpi</h1><p>通关官方文档我们了解到，尽量建立统一的image读取路径，便于管理，我们都知道ios的图片资源通过@2x,@3x自动适配,react-native也使用了这一方法。</p>
<p>官方的<a href="http://reactnative.cn/docs/0.21/pixelratio.html#content" target="_blank" rel="external">PixelRatio</a>告诉我们如何获得dpi</p>
<p>static get() </p>
<p>具体用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var bat = PixelRatio.get();</span><br></pre></td></tr></table></figure></p>
<p>返回设备的像素密度，例如：</p>
<ul>
<li>PixelRatio.get() === 1  <ol>
<li>mdpi Android 设备 (160 dpi)</li>
</ol>
</li>
<li>PixelRatio.get() === 1.5<ol>
<li>hdpi Android 设备 (240 dpi)</li>
</ol>
</li>
<li>PixelRatio.get() === 2 <ol>
<li>iPhone 4, 4S</li>
<li>iPhone 5, 5c, 5s</li>
<li>iPhone 6</li>
<li>xhdpi Android 设备 (320 dpi)</li>
</ol>
</li>
<li>PixelRatio.get() === 3<ol>
<li>iPhone 6 plus</li>
<li>xxhdpi Android 设备 (480 dpi)</li>
</ol>
</li>
<li>PixelRatio.get() === 3.5<ol>
<li>Nexus 6</li>
</ol>
</li>
</ul>
<h1 id="创建不同像素密度的资源"><a href="#创建不同像素密度的资源" class="headerlink" title="创建不同像素密度的资源"></a>创建不同像素密度的资源</h1><p>学习官方文档<a href="http://reactnative.cn/docs/0.21/images.html#content" target="_blank" rel="external">Image</a>可知。<br>我们在src路径存放<code>nav_back@2x.png</code> <code>nav_back@2x.png</code>,加载时调用</p>
<p><code>require(&#39;../src/nav_back.png&#39;)</code></p>
<h1 id="常见的bug"><a href="#常见的bug" class="headerlink" title="常见的bug"></a>常见的bug</h1><h2 id="1-打包apk时报错-Error-Don’t-know-which-android-drawable-suffix-to-use-for-asset"><a href="#1-打包apk时报错-Error-Don’t-know-which-android-drawable-suffix-to-use-for-asset" class="headerlink" title="1 打包apk时报错 Error: Don’t know which android drawable suffix to use for asset:"></a>1 打包apk时报错 Error: Don’t know which android drawable suffix to use for asset:</h2><p><img src="http://7xrf0l.com1.z0.glb.clouddn.com/16-3-10/52551021.jpg" alt=""></p>
<p>参考<a href="https://github.com/facebook/react-native/pull/4527/files" target="_blank" rel="external">github</a></p>
<p>参考<a href="http://stackoverflow.com/questions/35852016/rect-native-drawable-error-when-building-the-android-app" target="_blank" rel="external">stackflow</a></p>
<p>我们知道打开local-cli/bundle/assetPathUtils.js文件可以看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function getAndroidAssetSuffix(scale) &#123;</span><br><span class="line">      switch (scale) &#123;</span><br><span class="line">            case 0.75: return &apos;ldpi&apos;;</span><br><span class="line">               case 1: return &apos;mdpi&apos;;</span><br><span class="line">                case 1.5: return &apos;hdpi&apos;;</span><br><span class="line">                case 2: return &apos;xhdpi&apos;;</span><br><span class="line">                case 3: return &apos;xxhdpi&apos;;</span><br><span class="line">                case 4: return &apos;xxxhdpi&apos;;</span><br><span class="line">              &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>而我们创建的资源有@3.5x,应该去掉,去掉之后打包就成功了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native android实战：2 打包apk]]></title>
      <url>http://hammercui.github.io/post/react-native-android%E5%AE%9E%E6%88%98%EF%BC%9A2-%E6%89%93%E5%8C%85apk/</url>
      <content type="html"><![CDATA[<h1 id="为什么要打包"><a href="#为什么要打包" class="headerlink" title="为什么要打包"></a>为什么要打包</h1><p>APP 运行的时候不应再从 Debug Server 获取资源。分发应用时 JS 资源应该被打包到 APP 中。<br>另外对外发布的安装包，资源中的业务代码的混淆也是必须的。</p>
<h1 id="如何打包"><a href="#如何打包" class="headerlink" title="如何打包"></a>如何打包</h1><p>1 创建keystore，使用eclipse，android studio都行</p>
<p>2 拷贝keystore到路径android\app\下</p>
<p>3 修改<code>android\app\build.gradle</code>文件<br> 添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> android &#123;</span><br><span class="line"></span><br><span class="line">    + signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            storeFile file(&quot;keystore文件名&quot;)</span><br><span class="line">            storePassword &quot;密码&quot;</span><br><span class="line">            keyAlias &quot;&quot;</span><br><span class="line">            keyPassword &quot;密码&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled enableProguardInReleaseBuilds</span><br><span class="line">            proguardFiles getDefaultProguardFile(&quot;proguard-android.txt&quot;), &quot;proguard-rules.pro&quot;</span><br><span class="line">            + signingConfig signingConfigs.release</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4 在工程目录，运行命令行开始打包</p>
<p><code>cd android &amp;&amp; ./gradlew assembleRelease</code></p>
<h1 id="bug的处理"><a href="#bug的处理" class="headerlink" title="bug的处理"></a>bug的处理</h1><h2 id="1打包资源bug"><a href="#1打包资源bug" class="headerlink" title="1打包资源bug"></a>1打包资源bug</h2><p>解决方法常见我的blog<a href="http://hammercui.github.io/post/react-native%E4%B9%8B%E6%97%85%EF%BC%9AImage%E8%B5%84%E6%BA%90%E9%80%82%E9%85%8D/">react-native之旅：Image资源适配</a>,</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://github.com/ggchxx/React-Native-Android-Config#react-native-android的配置说明-2015-09-17修改" target="_blank" rel="external">React Native Android的配置说明</a></p>
<p><a href="http://reactnative.cn/docs/0.21/signed-apk-android.html#content" target="_blank" rel="external">官方文档</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native基础：StyleSheet样式属性]]></title>
      <url>http://hammercui.github.io/post/react-native%E5%9F%BA%E7%A1%80%EF%BC%9AStyleSheet%E6%A0%B7%E5%BC%8F%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>以下是StyleSheet所有可用的属性<br><img src="http://7xrf0l.com1.z0.glb.clouddn.com/16-3-9/87816685.jpg" alt=""><br><img src="http://7xrf0l.com1.z0.glb.clouddn.com/16-3-9/69904787.jpg" alt=""><br><img src="http://7xrf0l.com1.z0.glb.clouddn.com/16-3-9/76808690.jpg" alt=""></p>
<p>如果不知道具体的属性怎么写，可以随便写一个，然后运行，报错，react-native会提示你正确的参数，比如我们选择borderStyle，不知随便写，然后报如下错误。<img src="http://7xrf0l.com1.z0.glb.clouddn.com/16-3-9/70960223.jpg" alt=""></p>
<p>这样我们就知道了borderStyle的参数可以使<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;solid&apos;, &apos;dotted&apos;,&apos;dashed&apos;</span><br></pre></td></tr></table></figure></p>
<p>具体什么意思可以翻译。<br>实线 点  虚线</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native android实战：1 创建项目]]></title>
      <url>http://hammercui.github.io/post/react-native-android%E5%AE%9E%E6%88%98%EF%BC%9A1-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h1 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h1><p>执行命令 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init MyProject</span><br></pre></td></tr></table></figure>
<h1 id="导入第三方库"><a href="#导入第三方库" class="headerlink" title="导入第三方库"></a>导入第三方库</h1><p>导入Button库<code>react-native-button</code>，<a href="https://github.com/ide/react-native-button" target="_blank" rel="external">戳这里，打开github</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-native-button --save</span><br></pre></td></tr></table></figure>
<p>导入导航库react-native-router-flux，<a href="https://github.com/hammercui/react-native-router-flux" target="_blank" rel="external">点击查看github</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-native-router-flux --save</span><br></pre></td></tr></table></figure></p>
<p>导入<a href="https://github.com/reactjs/redux" target="_blank" rel="external">redux</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install redux --save</span><br></pre></td></tr></table></figure>
<p>导入<a href="https://github.com/reactjs/react-redux" target="_blank" rel="external">react-redux</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-redux --save</span><br></pre></td></tr></table></figure>
<p>导入<a href="https://github.com/maxs15/react-native-modalbox" target="_blank" rel="external">react-native-modalbox</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-native-modalbox --save</span><br></pre></td></tr></table></figure>
<p>react-native-modalbox如下图<img src="https://camo.githubusercontent.com/d4a496a80e4159490d873dcc37e93b71d6da7e0b/687474703a2f2f692e696d6775722e636f6d2f3358554c4c74382e676966" alt=""></p>
<p>导入<a href="https://github.com/oblador/react-native-vector-icons" target="_blank" rel="external">react-native-vector-icons</a>        </p>
<p><code>react-native-vector-icons</code>是github中很火的开源图标项目，解决我们找四处找图标的麻烦</p>
<p><strong>注意在android使用中，一定不要忘记把<code>node_modules\react-native-vector-icons\Fonts</code>下的所有文件拷贝到<code>android/app/src/main/assets/fonts</code>路径</strong></p>
<h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><p>打开服务 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native start</span><br></pre></td></tr></table></figure>
<p>android虚拟机或真机运行  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native run-android</span><br></pre></td></tr></table></figure>
<h1 id="推荐的IDE"><a href="#推荐的IDE" class="headerlink" title="推荐的IDE"></a>推荐的IDE</h1><p>使用webstorm11,代码补全以及文件索引，要优于atom跟sublime text</p>
<h1 id="推荐模拟器"><a href="#推荐模拟器" class="headerlink" title="推荐模拟器"></a>推荐模拟器</h1><p><a href="https://developer.xamarin.com/guides/android/getting_started/installation/android-player/" target="_blank" rel="external">Xamarin Android Player</a>,自带的菜单按钮特别方便，genymotion在win10经常起不来，后来试用了xamarin，发现相当稳定，强烈推荐</p>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>5.0以下 点击memu菜单或者摇晃机身，弹出选项，选择<code>reload js</code></p>
<p>5.0以上 首先adb reverse tcp:8081 tcp:8081，然后摇晃机身</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://richard-cao.github.io/2015/11/24/React-native-Android-%E5%88%9D%E6%AC%A1%E8%B8%A9%E5%9D%91%E4%B9%8B%E6%97%85/" target="_blank" rel="external">React-Native Android 初次踩坑之旅</a></p>
<p><a href="http://bbs.reactnative.cn/topic/10/%E5%9C%A8windows%E4%B8%8B%E6%90%AD%E5%BB%BAreact-native-android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83" target="_blank" rel="external">在windows下搭建react-native-android开发环境</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native-android实战：Bug集锦]]></title>
      <url>http://hammercui.github.io/post/react-native-android%E5%AE%9E%E6%88%98%EF%BC%9ABug%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<h1 id="android版本开发时遇到的Bug"><a href="#android版本开发时遇到的Bug" class="headerlink" title="android版本开发时遇到的Bug"></a>android版本开发时遇到的Bug</h1><blockquote>
<p>记录我在react-native android平台开发过程遇到的bug</p>
</blockquote>
<h2 id="1-error-undefined-is-not-an-object-evaluating-‘screenPhysicalPixels-width’"><a href="#1-error-undefined-is-not-an-object-evaluating-‘screenPhysicalPixels-width’" class="headerlink" title="1 error:undefined is not an object (evaluating ‘screenPhysicalPixels.width’)"></a>1 error:undefined is not an object (evaluating ‘screenPhysicalPixels.width’)</h2><p><img src="https://cloud.githubusercontent.com/assets/744542/13090471/db3cb65c-d4aa-11e5-85e3-39b36d1d8326.png" alt=""></p>
<p>解决方案：</p>
<p><a href="http://stackoverflow.com/questions/35609603/react-native-android-screenphysicalpixels-width-is-undefined" target="_blank" rel="external">参考地址</a></p>
<p>android\app\build.gradle</p>
<p>修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &quot;com.facebook.react:react-native:0.19.+&quot;</span><br></pre></td></tr></table></figure>
<p>为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &quot;com.facebook.react:react-native:0.20.+&quot;</span><br></pre></td></tr></table></figure>
<h2 id="2-Error-while-updating-property-39-navIcon-39-of-a-view-managed-by-ToolbarAndroid"><a href="#2-Error-while-updating-property-39-navIcon-39-of-a-view-managed-by-ToolbarAndroid" class="headerlink" title="2 Error while updating property &#39;navIcon&#39; of a view managed by: ToolbarAndroid"></a>2 <code>Error while updating property &#39;navIcon&#39; of a view managed by: ToolbarAndroid</code></h2><p><img src="https://cloud.githubusercontent.com/assets/4703440/11673166/8685e3a2-9e51-11e5-9d5d-e3db69cae28f.png" alt=""></p>
<p>解决方案 1：</p>
<p>猜测是nacIcon没有package进apk,我在src文件，有nav_back@2x.png,nav_back@3x.png,我猜测就是这套机制出问题了，我现在尝试只保留nav_back.png,然后就没再报错，等有机会好好研究下打包机制</p>
<p>解决方案2：</p>
<p>turn<br><code>compile &#39;com.facebook.react:react-native:0.20.+&#39;</code><br>to<br><code>compile &#39;com.facebook.react:react-native:0.21.+&#39;</code></p>
<p>参考<a href="https://github.com/oblador/react-native-vector-icons/issues/134" target="_blank" rel="external">Error while updating property ‘navIcon’ of a view managed by: ToolbarAndroid #134</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native基础：flexbox布局]]></title>
      <url>http://hammercui.github.io/post/react-native%E5%9F%BA%E7%A1%80%EF%BC%9Aflexbox%E5%B8%83%E5%B1%80%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<ul>
<li>推荐一篇<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">阮一峰的blog</a>，讲解Flex布局的基础语法</li>
<li>转一个讲的非常好的<a href="http://doc.okbase.net/vczero/archive/154240.html" target="_blank" rel="external">布局实战blog</a></li>
<li>再转一个非常好的<a href="https://segmentfault.com/a/1190000002658374" target="_blank" rel="external">讲布局基础知识的文章</a>。</li>
<li>再转一个好文<a href="react-native 之布局篇">react-native 之布局篇</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react-native基础：导航之react-native-router-flux]]></title>
      <url>http://hammercui.github.io/post/react-native%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%AF%BC%E8%88%AA%E4%B9%8Breact-native-router-flux/</url>
      <content type="html"><![CDATA[<h1 id="react-native-router-flux"><a href="#react-native-router-flux" class="headerlink" title="react-native-router-flux"></a>react-native-router-flux</h1><blockquote>
<p>所有的app设计，都会考虑导航的问题，android一般采用底部tabbar，但是最新的设计方案，更多的倾向于头部tabbar,或者头部scrollTabBar。本方案还是采用底部模式。</p>
</blockquote>
<p>react-native-router-flux是推荐的解决方案，<a href="https://github.com/aksonov/react-native-router-flux" target="_blank" rel="external">github地址</a>。</p>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p><del><a href="https://github.com/aksonov/react-native-router-flux" target="_blank" rel="external">react-native-router-flux</a>依赖于<a href="https://github.com/Thorbenandresen/ExNavigatorExample" target="_blank" rel="external">ExNavigator</a>,所以首先要安装ex-navigator</del></p>
<p>新版本已经全部替换成react-native的Navigation api了。</p>
<h2 id="安装ex-navigator"><a href="#安装ex-navigator" class="headerlink" title="安装ex-navigator"></a>安装ex-navigator</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @exponent/react-native-navigator --save</span><br></pre></td></tr></table></figure>
<p>ExNavigator和Navigator之间的主要区别是可定制route。使用ExNavigator ，你可以定义每个scene的样子，其导航栏的内容应该是什么，当scene获得或失去焦点时自定义动作。</p>
<h2 id="安装react-native-router-flux"><a href="#安装react-native-router-flux" class="headerlink" title="安装react-native-router-flux"></a>安装react-native-router-flux</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react-native-router-flux --save</span><br></pre></td></tr></table></figure>
<h2 id="安装react-native-button"><a href="#安装react-native-button" class="headerlink" title="安装react-native-button"></a>安装<a href="https://github.com/ide/react-native-button/" target="_blank" rel="external">react-native-button</a></h2><p>github上关注度很高的button控件，命令行安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-native-button --save</span><br></pre></td></tr></table></figure>
<h2 id="Feature-特点"><a href="#Feature-特点" class="headerlink" title="Feature 特点"></a>Feature 特点</h2><ul>
<li>集中定义你的screens(routers),以及他们的转场动画</li>
<li>使用简单的语法调用转场，比如Action.login</li>
<li>screens在转场时以前必须的navigator对象， 取消了</li>
<li>使用schema定义一组screens的公共属性，例如：定义一个name为modal的schema,来表示从底部弹出的转场动画</li>
<li>show/hide 导航栏</li>
<li>支持使用tab bar ,使用 <a href="https://github.com/aksonov/react-native-tabs" target="_blank" rel="external">react-native-tabs</a></li>
<li>支持嵌套的navigators,比如，每个tab 都有自己的导航，转场动作将会自动的使用最上层的导航</li>
</ul>
<h2 id="New-Features-and-Highlights"><a href="#New-Features-and-Highlights" class="headerlink" title="New Features and Highlights"></a>New Features and Highlights</h2><ul>
<li>可嵌套的Navigator（e.g. Each tab can have its own navigator, nested in a root navigator）</li>
<li>自定义场景render for action sheet,native TabbarIOS.</li>
<li>Dynamic Routing :allows you 根据application state来选择要render哪个scene(see the Switch renderer, useful for authentication).</li>
<li>为navigation state带来你自定义的reduce，也就是说可以用reduce管理navigation state</li>
<li>Reset History Stack：<code>reset</code>模式能够clear历史栈，并清除navbar back button</li>
<li>更强大的State Control：支持在同一屏幕上具有不同的状态。例如，“查看我的帐户”可以允许对字段进行就地编辑，并且应出现“保存”，“取消”导航栏按钮。</li>
</ul>
<h2 id="Usage-用法"><a href="#Usage-用法" class="headerlink" title="Usage 用法"></a>Usage 用法</h2><p>~~1 在index.js中，定义router，跟他的子节点route</p>
<ul>
<li>如果你的部分screens有公共属性，请定义schema，来减少重复</li>
</ul>
<p>2 在任何screen中</p>
<ul>
<li>import {Actions} from ‘react-native-router-flux’</li>
<li>Actions.ACTION_NAME(PARAMS) 将被适当的调用，并将action跟params传递给route<br>~~</li>
</ul>
<p>使用scene取代了route</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Scene, Router&#125; from &apos;react-native-router-flux&apos;;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;Router&gt;</span><br><span class="line">      &lt;Scene key=&quot;root&quot;&gt;</span><br><span class="line">        &lt;Scene key=&quot;login&quot; component=&#123;Login&#125; title=&quot;Login&quot;/&gt;</span><br><span class="line">        &lt;Scene key=&quot;register&quot; component=&#123;Register&#125; title=&quot;Register&quot;/&gt;</span><br><span class="line">        &lt;Scene key=&quot;home&quot; component=&#123;Home&#125;/&gt;</span><br><span class="line">      &lt;/Scene&gt;</span><br><span class="line">    &lt;/Router&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Actions.ACTION_NAME(PARAMS)</code>: 将调用相应的动作和参数传递给场景</li>
</ul>
<ul>
<li><code>Actions.pop()</code>: pop出当前scene. It accepts following optional params:<ul>
<li><code>{popNum: [number]}</code>：allows to pop multiple screens at once 一次弹出多个scene</li>
<li><code>{refresh: {...propsToSetOnPreviousScene}}</code>：allows to refresh the props of the scene that it pops back to</li>
</ul>
</li>
</ul>
<ul>
<li><code>Actions.refresh(PARAMS)</code>: will update the properties of the current screen. 更新当前scene的属性</li>
</ul>
<h2 id="Configuration-配置"><a href="#Configuration-配置" class="headerlink" title="Configuration 配置"></a>Configuration 配置</h2><h3 id="Router"><a href="#Router" class="headerlink" title="Router:"></a>Router:</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>header</td>
<td>object</td>
<td>null</td>
<td>optional header view</td>
</tr>
<tr>
<td>footer</td>
<td>object</td>
<td>null</td>
<td>optional footer view (e.g. tab bar)</td>
</tr>
<tr>
<td>hideNavBar</td>
<td>bool</td>
<td>false</td>
<td>hides navigation bar for every route</td>
</tr>
</tbody>
</table>
<h4 id="Route"><a href="#Route" class="headerlink" title="Route:"></a>Route:</h4><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>string</td>
<td>required</td>
<td>必须是唯一的,将在screen转场时调用.比如a场景name=’ima’,在b场景要跳转到a，就在b场景onPress事件调用Action.ima(传参)，ps使用redux实现了统一管理state状态</td>
</tr>
<tr>
<td>component</td>
<td>React.Component</td>
<td>semi-required</td>
<td>要显示在screen的主角，也可以嵌套router</td>
</tr>
<tr>
<td>type</td>
<td>string</td>
<td>optional</td>
<td>定义新screen如何被添加到navigation栈。有以下<code>push</code>, <code>modal</code>,<code>actionSheet</code>,<code>replace</code>, <code>switch</code>, <code>reset</code>模式。默认是’push’。<code>replace</code> navigator用新route来replace 当前route. <code>actionSheet</code> 弹出 Action Sheet弹窗, 必须穿回掉函数做参数, 可以看一下demon学习. <code>modal</code> 在当前组件中，插入新组件. 用作在转场之前 (比如登录进程)弹出的提示框，屏蔽了下层的触摸操作。<code>switch</code> 跟tabbar的screen配合使用. <code>reset</code> 用法接近replace，除了他要从navigatior stack中卸载. <code>modal</code> 组件用Actions.dismiss()来取消</td>
</tr>
<tr>
<td>initial</td>
<td>bool</td>
<td>false</td>
<td>设置<code>true</code> 本screen 为初始页</td>
</tr>
<tr>
<td>title</td>
<td>string</td>
<td>null</td>
<td>在navigation bar中显示的标题</td>
</tr>
<tr>
<td>schema</td>
<td>string</td>
<td>optional</td>
<td>预先在schema定义的属性</td>
</tr>
<tr>
<td>wrapRouter</td>
<td>bool</td>
<td>false</td>
<td>If true, the route is automatically nested in its own Router. Useful for modal screens. For type==switch wrapRouter will be true 设置为true 本route为自动嵌套到自己的router里，对于modal scene是有用的。</td>
</tr>
<tr>
<td>sceneConfig</td>
<td>Navigator.SceneConfigs</td>
<td>optional</td>
<td>定义转场动画类型</td>
</tr>
<tr>
<td>defaultRoute</td>
<td>string</td>
<td>optional</td>
<td>定义要跳转到哪个route，当本route作为tab被选中并点击的时候</td>
</tr>
<tr>
<td>hideNavBar</td>
<td>bool</td>
<td>false</td>
<td>隐藏本route的navigation bar</td>
</tr>
<tr>
<td>hideTabBar</td>
<td>bool</td>
<td>false</td>
<td>隐藏本route的tabBar (当父router创建了tabbar并使用了, check Example)</td>
</tr>
<tr>
<td>navigationBarStyle</td>
<td>View style</td>
<td></td>
<td>继承自navigation bar 可选的style</td>
</tr>
<tr>
<td>titleStyle</td>
<td>Text style</td>
<td></td>
<td>optional style override for the title element</td>
</tr>
<tr>
<td>renderTitle</td>
<td>Closure</td>
<td></td>
<td>optional closure to render the title element</td>
</tr>
<tr>
<td>barButtonIconStyle</td>
<td>Image style</td>
<td></td>
<td>继承自icon button可选的style (e.g. back icon)</td>
</tr>
<tr>
<td>leftTitle</td>
<td>string</td>
<td></td>
<td>可选的，显示在left的文本（上一个roue没有提供<code>renderBackButton</code> prop时使用） <code>renderBackButton</code> &gt; <code>leftTitle</code> &gt; <code>previous route&#39;s title</code></td>
</tr>
<tr>
<td>renderLeftButton</td>
<td>Closure</td>
<td></td>
<td>optional closure to render the left title / buttons element</td>
</tr>
<tr>
<td>renderBackButton</td>
<td>Closure</td>
<td></td>
<td>optional closure to render back text or button if this route happens to be the previous route</td>
</tr>
<tr>
<td>leftButtonStyle</td>
<td>View style</td>
<td></td>
<td>optional style override for the container of left title / buttons</td>
</tr>
<tr>
<td>leftButtonTextStyle</td>
<td>Text style</td>
<td></td>
<td>optional style override for the left title element</td>
</tr>
<tr>
<td>rightTitle</td>
<td>string</td>
<td></td>
<td>optional string to display on the right. <code>onRight</code> must be provided for this to appear.</td>
</tr>
<tr>
<td>renderRightButton</td>
<td>Closure</td>
<td></td>
<td>optional closure to render the right title / buttons element</td>
</tr>
<tr>
<td>rightButtonStyle</td>
<td>View style</td>
<td></td>
<td>optional style override for the container of right title / buttons</td>
</tr>
<tr>
<td>rightButtonTextStyle</td>
<td>Text style</td>
<td></td>
<td>optional style override for the right title element</td>
</tr>
</tbody>
</table>
<h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema:"></a>Schema:</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>string</td>
<td>required</td>
<td>The name of the schema, to be referenced in the route as <code>schema={&quot;name&quot;}</code></td>
</tr>
<tr>
<td>property</td>
<td>-</td>
<td>-</td>
<td>A <code>Schema</code> can have any property that you want the <code>Route</code> to inherit 可以定义任何你想在route里面定义的属性</td>
</tr>
</tbody>
</table>
<h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><p>react-native-router-flux已经实现了redex，因为state一改变，render就渲染，使用redux合并状态再渲染，减少渲染次数。</p>
<p>常见 <a href="https://segmentfault.com/a/1190000003503338?_ea=323420" target="_blank" rel="external">segmentfault Redux 介绍</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angularJs学习7：表单form]]></title>
      <url>http://hammercui.github.io/post/angularJs%E5%AD%A6%E4%B9%A07%EF%BC%9A%E8%A1%A8%E5%8D%95form/</url>
      <content type="html"><![CDATA[<blockquote>
<p>什么是表单，一般是form</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;formCtrl&quot;&gt;</span><br><span class="line">  &lt;form novalidate&gt;</span><br><span class="line">    First Name:&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; ng-model=&quot;user.firstName&quot;&gt;&lt;br&gt;</span><br><span class="line">    Last Name:&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; ng-model=&quot;user.lastName&quot;&gt;</span><br><span class="line">    &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;button ng-click=&quot;reset()&quot;&gt;恢复默认&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;p&gt;form = &#123;&#123;user &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;default = &#123;&#123;default&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app = angular.module(&apos;myApp&apos;, []);</span><br><span class="line">app.controller(&apos;formCtrl&apos;, function($scope) &#123;</span><br><span class="line">    $scope.default = &#123;firstName:&quot;John&quot;, lastName:&quot;Doe&quot;&#125;;</span><br><span class="line">    $scope.reset = function() &#123;</span><br><span class="line">        $scope.user = angular.copy($scope.default);</span><br><span class="line">    &#125;;</span><br><span class="line">    $scope.reset();</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><img src="http://i13.tietuku.com/2cda9af82645f33c.png" alt="iamge"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angularJs学习6：指令]]></title>
      <url>http://hammercui.github.io/post/angularJs%E5%AD%A6%E4%B9%A06%EF%BC%9A%E6%8C%87%E4%BB%A4/</url>
      <content type="html"><![CDATA[<blockquote>
<p>什么是指令？什么是模块？</p>
</blockquote>
<h2 id="添加一个自带的控制器"><a href="#添加一个自带的控制器" class="headerlink" title="添加一个自带的控制器"></a>添加一个自带的控制器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl&quot;&gt;</span><br><span class="line">&#123;&#123; firstName + &quot; &quot; + lastName &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app = angular.module(&quot;myApp&quot;, []);</span><br><span class="line">app.controller(&quot;myCtrl&quot;, function($scope) &#123;</span><br><span class="line">    $scope.firstName = &quot;John&quot;;</span><br><span class="line">    $scope.lastName = &quot;Doe&quot;;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="添加一个自定义的指令"><a href="#添加一个自定义的指令" class="headerlink" title="添加一个自定义的指令"></a>添加一个自定义的指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-app=&quot;myApp&quot; runoob-directive&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">var app = angular.module(&quot;myApp&quot;, []);</span><br><span class="line"></span><br><span class="line">app.directive(&quot;runoobDirective&quot;, function() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        template : &quot;我在指令构造器中创建!&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意</p>
<ul>
<li>JavaScript 中应避免使用全局函数。因为他们很容易被其他脚本文件覆盖。</li>
<li>AngularJS 模块让所有函数的作用域在该模块下，避免了该问题。</li>
<li>在我们的实例中，所有 AngularJS 库都在 HTML 文档的头部载入。</li>
</ul>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angularJs学习5： 操作html的Dom]]></title>
      <url>http://hammercui.github.io/post/angularJs%E5%AD%A6%E4%B9%A05%EF%BC%9A%20%E6%93%8D%E4%BD%9Chtml%E7%9A%84Dom/</url>
      <content type="html"><![CDATA[<h2 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div ng-app=&quot;&quot; ng-init=&quot;mySwitch=true&quot;&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;button ng-disabled=&quot;mySwitch&quot;&gt;点我!&lt;/button&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; ng-model=&quot;mySwitch&quot;/&gt;按钮</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&#123;&#123; mySwitch &#125;&#125;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/div&gt; </span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="示例2-show指令-hide指令"><a href="#示例2-show指令-hide指令" class="headerlink" title="示例2 show指令 hide指令"></a>示例2 show指令 hide指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;p ng-show=&quot;true&quot;&gt;我是可见的。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p ng-show=&quot;false&quot;&gt;我是不可见的。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;div ng-app=&quot;&quot; ng-init=&quot;hour=11&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;p ng-show=&quot;hour &gt; 12&quot;&gt;我是可见的。&lt;/p&gt;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angularJs学习4：http请求]]></title>
      <url>http://hammercui.github.io/post/angularJs%E5%AD%A6%E4%B9%A04%EF%BC%9Ahttp%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h1 id="如何通过http从网络获取数据"><a href="#如何通过http从网络获取数据" class="headerlink" title="如何通过http从网络获取数据"></a>如何通过http从网络获取数据</h1><h2 id="1-读取json文件"><a href="#1-读取json文件" class="headerlink" title="1 读取json文件"></a>1 读取json文件</h2><p>AngularJS $http 是一个用于读取web服务器上数据的服务。<br>$http.get(url) 是用于读取服务器数据的函数。</p>
<blockquote>
<p>以下是get请求</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;customersCtrl&quot;&gt; </span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li ng-repeat=&quot;x in names&quot;&gt;</span><br><span class="line">    &#123;&#123; x.Name + &apos;, &apos; + x.Country &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app = angular.module(&apos;myApp&apos;, []);</span><br><span class="line">app.controller(&apos;customersCtrl&apos;, function($scope, $http) &#123;</span><br><span class="line">  $http.get(&quot;http://www.runoob.com/try/angularjs/data/Customers_JSON.php&quot;)</span><br><span class="line">  .success(function (response) &#123;$scope.names = response.records;&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以下是post请求</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        function formController($scope, $http) &#123;</span><br><span class="line">            $scope.commit = function() &#123;</span><br><span class="line">                $http(&#123;</span><br><span class="line">                    method:&quot;POST&quot;,</span><br><span class="line">                    url:&quot;/liberty_oa_2015_4_21/login/login.do&quot;, </span><br><span class="line">                    params:&#123;</span><br><span class="line">                        &quot;userName&quot;:$scope.current.name,</span><br><span class="line">                        &quot;password&quot;:$scope.current.pass</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).success(function(data) &#123;</span><br><span class="line">                    console.log(&quot;success...&quot;);</span><br><span class="line">                &#125;).error(function() &#123;</span><br><span class="line">                    alert(&quot;fail...&quot;);</span><br><span class="line">                &#125;);</span><br><span class="line">             </span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="表格显示"><a href="#表格显示" class="headerlink" title="表格显示"></a>表格显示</h2><ol>
<li>普通显示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr ng-repeat=&quot;x in names&quot;&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123; x.Name &#125;&#125;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123; x.Country &#125;&#125;&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>2.带序号的显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr ng-repeat=&quot;x in names&quot;&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123; $index + 1 &#125;&#125;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123; x.Name &#125;&#125;&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;&#123;&#123; x.Country &#125;&#125;&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angularJs学习3:控制器，过滤器]]></title>
      <url>http://hammercui.github.io/post/angularJs%E5%AD%A6%E4%B9%A03%EF%BC%9A%20%E6%8E%A7%E5%88%B6%E5%99%A8%EF%BC%8C%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="控制器-ng-controller"><a href="#控制器-ng-controller" class="headerlink" title="控制器 ng-controller"></a>控制器 ng-controller</h1><p>指令定义了应用程序控制器</p>
<p>可以在html直接写，也可以单出写在.js文件</p>
<blockquote>
<p>写在html的模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;personCtrl&quot;&gt;</span><br><span class="line"></span><br><span class="line">名: &lt;input type=&quot;text&quot; ng-model=&quot;firstName&quot;&gt;&lt;br&gt;</span><br><span class="line">姓: &lt;input type=&quot;text&quot; ng-model=&quot;lastName&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">姓名: &#123;&#123;fullName()&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app = angular.module(&apos;myApp&apos;, []);</span><br><span class="line">app.controller(&apos;personCtrl&apos;, function($scope) &#123;</span><br><span class="line">    $scope.firstName = &quot;John&quot;;</span><br><span class="line">    $scope.lastName = &quot;Doe&quot;;</span><br><span class="line">    $scope.fullName = function() &#123;</span><br><span class="line">        return $scope.firstName + &quot; &quot; + $scope.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>写在.js的模式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">angular.module(&apos;myApp&apos;, []).controller(&apos;namesCtrl&apos;, function($scope) &#123;</span><br><span class="line">    $scope.names = [</span><br><span class="line">        &#123;name:&apos;Jani&apos;,country:&apos;Norway&apos;&#125;,</span><br><span class="line">        &#123;name:&apos;Hege&apos;,country:&apos;Sweden&apos;&#125;,</span><br><span class="line">        &#123;name:&apos;Kai&apos;,country:&apos;Denmark&apos;&#125;</span><br><span class="line">    ];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="2过滤器"><a href="#2过滤器" class="headerlink" title="2过滤器"></a>2过滤器</h2><table>
<thead>
<tr>
<th>过滤器</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>currency</td>
<td>格式化数字为货币格式。</td>
</tr>
<tr>
<td>filter</td>
<td>从数组项中选择一个子集。</td>
</tr>
<tr>
<td>lowercase</td>
<td>格式化字符串为小写。</td>
</tr>
<tr>
<td>orderBy</td>
<td>根据某个表达式排列数组。</td>
</tr>
<tr>
<td>uppercase</td>
<td>格式化字符串为大写。</td>
</tr>
</tbody>
</table>
<h3 id="2-2如何添加过滤器"><a href="#2-2如何添加过滤器" class="headerlink" title="2.2如何添加过滤器"></a>2.2如何添加过滤器</h3><p>过滤器可以通过一个管道字符（|）和一个过滤器添加到表达式中。.<br>(（下面的两个实例，我们将使用前面章节中提到的 person 控制器）)<br>uppercase 过滤器将字符串格式化为大写：<br>如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;姓名为 &#123;&#123; lastName | uppercase &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angularJs学习2：scope作用域]]></title>
      <url>http://hammercui.github.io/post/angularJs%E5%AD%A6%E4%B9%A02%EF%BC%9Ascope%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<h1 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h1><ul>
<li><p>Scope(作用域) 是应用在 HTML (视图) 和 JavaScript (控制器)之间的纽带。<br>Scope 是一个对象，有可用的方法和属性。<br>Scope 可应用在视图和控制器上。</p>
</li>
<li><p>当你在 AngularJS 创建控制器时，你可以将 $scope 对象当作一个参数传递:</p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;&#123;&#123;carname&#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app = angular.module(&apos;myApp&apos;, []);</span><br><span class="line">app.controller(&apos;myCtrl&apos;, function($scope) &#123;</span><br><span class="line">    $scope.carname = &quot;Volvo&quot;;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;控制器中创建一个属性名 &quot;carname&quot;，对应了视图中使用 &#123;&#123; &#125;&#125; 中的名称。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="AngularJS-应用组成如下："><a href="#AngularJS-应用组成如下：" class="headerlink" title="AngularJS 应用组成如下："></a>AngularJS 应用组成如下：</h2><ul>
<li>View(视图), 即 HTML。</li>
<li>Model(模型), 当前视图中可用的数据。</li>
<li>Controller(控制器), 即 JavaScript 函数，可以添加或修改属性。</li>
</ul>
<p>scope 是模型。<br>scope 是一个 JavaScript 对象，带有属性和方法，这些属性和方法可以在视图和控制器中使用。<br>我自己的理解是：<br>scope就是类似dom的树，根据id取不同的对象，只不过是比dom效率高了，因为是<br>直接获得，比如 input ng-model=”text1”,可以直接通过$.scope.text1赋值</p>
<h2 id="根作用域-rootScope"><a href="#根作用域-rootScope" class="headerlink" title="根作用域 $rootScope"></a>根作用域 $rootScope</h2><p>所有的应用都有一个 $rootScope，它可以作用在 ng-app 指令包含的所有 HTML 元素中。<br>$rootScope 可作用于整个应用中。是各个 controller 中 scope 的桥梁。用 rootscope 定义的值，可以在各个 controller 中使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;姓氏为 &#123;&#123;lastname&#125;&#125; 家族成员:&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li ng-repeat=&quot;x in names&quot;&gt;&#123;&#123;x&#125;&#125; &#123;&#123;lastname&#125;&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app = angular.module(&apos;myApp&apos;, []);</span><br><span class="line"></span><br><span class="line">app.controller(&apos;myCtrl&apos;, function($scope, $rootScope) &#123;</span><br><span class="line">    $scope.names = [&quot;Emil&quot;, &quot;Tobias&quot;, &quot;Linus&quot;];</span><br><span class="line">    $rootScope.lastname = &quot;Refsnes&quot;;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;注意 $rootScope 在循环对象内外都可以访问。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[angularJs学习1：初始angular]]></title>
      <url>http://hammercui.github.io/post/angularJs%E5%AD%A6%E4%B9%A01%EF%BC%9A%E5%88%9D%E5%A7%8Bangular/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[angularJs学习1：初识angular]]></title>
      <url>http://hammercui.github.io/post/angularJs%E5%AD%A6%E4%B9%A01%EF%BC%9A%E5%88%9D%E8%AF%86angular/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>angular是google搞出来的js框架，后端程序如果想做前段，可以考虑尝试下。因为其按照mvc的架构来做框架，并引入了mvvm的机制，就是view动态数据绑定</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>比较适合单页面，更符合app的设计思路，当然，商城页面也可以写，如苏宁易购，主要是有后端开发经验，更容易理解</p>
<blockquote>
<p>什么事单页面场景？</p>
</blockquote>
<h2 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h2><ol>
<li><p><a href="http://www.runoob.com/angularjs/angularjs-tutorial.html" target="_blank" rel="external">angular学习站，模仿w3school</a></p>
</li>
<li><p><a href="http://blog.jobbole.com/46779/" target="_blank" rel="external">伯乐在线的一篇文章</a></p>
</li>
</ol>
<h2 id="配合"><a href="#配合" class="headerlink" title="配合"></a>配合</h2><p>学习这货主要是为了配合ionic的开发</p>
<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ol>
<li>只要看到ng-而不是id,说明用的是angular绑定，而不是jquery的dom查找</li>
<li>angular基本类似于javascript，但是可以直接在html写，angular没有for循环，==条件判断，及异常，但是有自己的实现机制<br>比如：<br>```<div ng-app="" ng-init="names=[
{name:'Jani',country:'Norway'},
{name:'Hege',country:'Sweden'},
{name:'Kai',country:'Denmark'}]">

</div></li>
</ol>
<p></p><p>循环对象：</p><p></p>
<p><ul><br>  <li ng-repeat="x    in names"><br>    undefined, undefined<br>  </li><br></ul><br><br>```        </p>
<ol>
<li>除了这些内置的指令ng-app,ng-init,ng-model,ng-repeat外，还可以自定义指令，但是在命名的时候用驼峰法，使用的时候用-间隔。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo gihthub创建blog]]></title>
      <url>http://hammercui.github.io/post/hexo-gihthub%E5%88%9B%E5%BB%BAblog/</url>
      <content type="html"><![CDATA[<h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><h3 id="hexo的安装"><a href="#hexo的安装" class="headerlink" title="hexo的安装"></a>hexo的安装</h3><p>参考教程1 (<a href="http://blog.csdn.net/poem_of_sunshine/article/details/29369785/" target="_blank" rel="external">http://blog.csdn.net/poem_of_sunshine/article/details/29369785/</a>)<br>参考教程2 <a href="http://www.jianshu.com/p/089fbfe71eef" target="_blank" rel="external">http://www.jianshu.com/p/089fbfe71eef</a></p>
<h3 id="主题的安装"><a href="#主题的安装" class="headerlink" title="主题的安装"></a>主题的安装</h3><p>hexo博客的主题如何选择，来自于<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">知乎社区的讨论</a><br>我自己使用的是jacman主题，推荐一个<a href="http://wsgzao.github.io/post/hexo-jacman/#" target="_blank" rel="external">博客</a>，里面有详细的jacman主题配置指南</p>
<h3 id="常用部件安装"><a href="#常用部件安装" class="headerlink" title="常用部件安装"></a>常用部件安装</h3><p><a href="http://www.jianshu.com/p/739bf1305e66" target="_blank" rel="external">参考博客,详细讲解搜索等等部件的安装</a></p>
<p>1 站内搜索        </p>
<p><a href="http://gengbiao.me/2014/10/22/hexo%E6%B7%BB%E5%8A%A0%E7%99%BE%E5%BA%A6%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/#" target="_blank" rel="external">百度站内搜索，使用教程</a>,但是一直搞不定，暂时放弃了。</p>
<p><a href="https://dashboard.tinysou.com/signup" target="_blank" rel="external">微搜索，使用教程</a></p>
<p><a href="http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype.html" target="_blank" rel="external">switfype搜索，使用教程</a></p>
<h3 id="如何提高搜索引擎的收录"><a href="#如何提高搜索引擎的收录" class="headerlink" title="如何提高搜索引擎的收录"></a>如何提高搜索引擎的收录</h3><p>1 生成站点地图，参考<a href="http://blog.kenai.cc/article/hexo/hexo-skills/" target="_blank" rel="external">blog</a>，貌似没啥效果</p>
<p>2 <a href="http://tabalt.net/blog/make-blog-support-baidu-search-engine/" target="_blank" rel="external">让GitHub Pages博客支持百度搜索引擎收录</a>，这个方案太麻烦了，放弃了</p>
<p>3 <a href="https://www.zhihu.com/question/30898326" target="_blank" rel="external">在知乎上有更好的实现方案</a>,目前尚未实践，这个方案<a href="http://bblove.me/2015/11/25/how-to-solve-the-problem-that-github-blocks-the-baidu-spider/" target="_blank" rel="external">更详细的实施步骤</a></p>
<h2 id="常用命令行"><a href="#常用命令行" class="headerlink" title="常用命令行"></a>常用命令行</h2><p>参考地址 <a href="https://segmentfault.com/a/1190000002632530" target="_blank" rel="external">https://segmentfault.com/a/1190000002632530</a></p>
<p><strong>hexo n “博客名”</strong> == hexo new “我的博客” #新建文章      </p>
<p><strong>hexo p</strong>== hexo publish      </p>
<p><strong>hexo g</strong> == hexo generate#生成        </p>
<p><strong>hexo s</strong> == hexo server #启动服务预览     </p>
<p><strong>hexo d</strong> == hexo deploy#部署</p>
<h2 id="Bug集锦"><a href="#Bug集锦" class="headerlink" title="Bug集锦"></a>Bug集锦</h2><h3 id="1-输入-0-0-0-0：4000没反应"><a href="#1-输入-0-0-0-0：4000没反应" class="headerlink" title="1 输入 0.0.0.0：4000没反应"></a>1 输入 0.0.0.0：4000没反应</h3><p>根据<a href="!https://www.zhihu.com/question/28847824?sort=created">知乎的答案</a>,显示是端口被占用了，修改端口号就行了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p 新端口号（比如11111）</span><br></pre></td></tr></table></figure></p>
<p>修改ip地址，位于\node_modules\hexo-server\index.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo.config.server = assign(&#123;</span><br><span class="line">  log: false,</span><br><span class="line">  ip: &apos;127.0.0.1&apos;</span><br><span class="line">&#125;, hexo.config.server)</span><br></pre></td></tr></table></figure></p>
<p>这样修改完成后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://127.0.0.1:11111/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></p>
<h3 id="2-找不到git部署"><a href="#2-找不到git部署" class="headerlink" title="2 找不到git部署"></a>2 找不到git部署</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure>
<p>解决方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p>部署类型设置git<br>hexo 3.0 部署类型不再是github，_config.yml 中修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@***.github.com:***/***.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<h3 id="3-hexo-s命令不起作用"><a href="#3-hexo-s命令不起作用" class="headerlink" title="3 hexo s命令不起作用"></a>3 hexo s命令不起作用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure>
<h2 id="多pc端的同步问题"><a href="#多pc端的同步问题" class="headerlink" title="多pc端的同步问题"></a>多pc端的同步问题</h2><blockquote>
<p>这个问题是不是大家也思考过，推荐一个<a href="http://chitanda.me/2015/06/18/hexo-sync-in-multiple-pc/" target="_blank" rel="external">bolg</a>。</p>
</blockquote>
<p>讲的太好了，我就不细讲了，我采用的第二种实践，在oschina新建一个工程用来存储blog工程。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android最佳实践4：4.4以下沉浸式体验框架SystemBarTint]]></title>
      <url>http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B54%EF%BC%9A%E6%B2%89%E6%B5%B8%E5%BC%8F%E4%BD%93%E9%AA%8C%E6%A1%86%E6%9E%B6SystemBarTint/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>android也实现了类似于ios的状态栏透明，变色效果，称为沉浸式体验。但是，4.4及以上才能用！！所以强烈推荐这个<a href="https://github.com/jgilfelt/SystemBarTint" target="_blank" rel="external">SystemBarTint</a>框架，能实现同样的效果,而且最低兼容API10.</p>
<p><strong>注意</strong></p>
<p>当不采用MD设计规范时，采用本方案最合适。若使用MD方案了，请最好使用toolbar取代actionbar.具体本方案的兼容性，还需要继续测试。</p>
<h1 id="4-4-以下版本的方案"><a href="#4-4-以下版本的方案" class="headerlink" title="4.4 以下版本的方案"></a>4.4 以下版本的方案</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.readystatesoftware.systembartint:systembartint:1.0.3&apos;</span><br></pre></td></tr></table></figure>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="1-Activity的onCreate方法添加"><a href="#1-Activity的onCreate方法添加" class="headerlink" title="1  Activity的onCreate方法添加"></a>1  Activity的onCreate方法添加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">	//当api》=19时</span><br><span class="line">	if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">			setTranslucentStatus(true);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">    // 创建状态栏的管理实例</span><br><span class="line">    SystemBarTintManager tintManager = new SystemBarTintManager(this);</span><br><span class="line">    // 激活状态栏设置</span><br><span class="line">    tintManager.setStatusBarTintEnabled(true);</span><br><span class="line">    // 激活导航栏设置，当使用actionbar的时候开启</span><br><span class="line">    tintManager.setNavigationBarTintEnabled(true);</span><br><span class="line">	// 设置一个颜色给系统栏  </span><br><span class="line">	tintManager.setTintColor(Color.parseColor(&quot;#99000FF&quot;));  </span><br><span class="line">	// 设置状态栏需颜色或背景图</span><br><span class="line">	tintManager.setStatusBarTintResource(R.color.statusbar_bg);</span><br><span class="line">	// 设置一个样式背景给导航栏，当使用actionbar的时候使用</span><br><span class="line">	tintManager.setNavigationBarTintResource(R.drawable.my_tint);  </span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@TargetApi(19) </span><br><span class="line">	private void setTranslucentStatus(boolean on) &#123;</span><br><span class="line">		Window win = getWindow();</span><br><span class="line">		WindowManager.LayoutParams winParams = win.getAttributes();</span><br><span class="line">		final int bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;</span><br><span class="line">		if (on) &#123;</span><br><span class="line">			winParams.flags |= bits;</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			winParams.flags &amp;= ~bits;</span><br><span class="line">		&#125;</span><br><span class="line">		win.setAttributes(winParams);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-activity的xml配置文件"><a href="#2-activity的xml配置文件" class="headerlink" title="2 activity的xml配置文件"></a>2 activity的xml配置文件</h2><p>记得新增属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="3-Theme的配置"><a href="#3-Theme的配置" class="headerlink" title="3 Theme的配置"></a>3 Theme的配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 我的activity主题，应用于所有的 activity--&gt;</span><br><span class="line">    &lt;style name=&quot;MyTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class="line">		&lt;!-- activity切换动画--&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowAnimationStyle&quot;&gt;@style/activityAnimation&lt;/item&gt;</span><br><span class="line">		&lt;!-- 不显示Title Bar --&gt;</span><br><span class="line">		&lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt;</span><br><span class="line">		&lt;!-- 避免控件都会顶到状态栏上 --&gt;</span><br><span class="line">        &lt;item name=&quot;android:fitsSystemWindows&quot;&gt;true&lt;/item&gt;</span><br><span class="line">		&lt;!-- API 14 theme 的自定义 can go here. --&gt;</span><br><span class="line">		&lt;item name=&quot;android:actionBarStyle&quot;&gt;@style/ActionBarStyle&lt;/item&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--activity统一的切换动画 --&gt;</span><br><span class="line">&lt;style name=&quot;activityAnimation&quot; parent=&quot;@android:style/Animation.Activity&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;android:activityOpenEnterAnimation&quot;&gt;@anim/push_left_in&lt;/item&gt;  </span><br><span class="line">        &lt;item name=&quot;android:activityOpenExitAnimation&quot;&gt;@anim/push_left_out&lt;/item&gt;  </span><br><span class="line">        &lt;item name=&quot;android:activityCloseEnterAnimation&quot;&gt;@anim/back_right_in&lt;/item&gt;  </span><br><span class="line">        &lt;item name=&quot;android:activityCloseExitAnimation&quot;&gt;@anim/back_right_out&lt;/item&gt;  </span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!--API 14主题的自定义 --&gt;</span><br><span class="line">	&lt;style name=&quot;ActionBarStyle&quot; parent=&quot;android:Widget.Holo.Light.ActionBar.Solid.Inverse&quot;&gt;</span><br><span class="line">	&lt;item name=&quot;android:background&quot;&gt;@color/orange&lt;/item&gt;</span><br><span class="line">	&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h1 id="4-4以上版本的方案（不适用第三方框架）"><a href="#4-4以上版本的方案（不适用第三方框架）" class="headerlink" title="4.4以上版本的方案（不适用第三方框架）"></a>4.4以上版本的方案（不适用第三方框架）</h1><p>如何实现，请参考blog <a href="http://blog.csdn.net/koche/article/details/46766963" target="_blank" rel="external">安卓4.4以上修改状态栏颜色</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android最佳实践3：retrofit框架]]></title>
      <url>http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B53%EF%BC%9Aretrofit%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h1 id="retrofit，rxjava编写，符合restful规范的网络请求框架"><a href="#retrofit，rxjava编写，符合restful规范的网络请求框架" class="headerlink" title="retrofit，rxjava编写，符合restful规范的网络请求框架"></a>retrofit，rxjava编写，符合restful规范的网络请求框架</h1><blockquote>
<p>它的底层由okhttp实现，okhttp目前是最好的网络请求框架之一了，google的部分官方项目也在用。<br>完全rxjava的语法，响应式编程。<br>restful的接口规范。<br>总之，使用起来很方便，大大提高生产效率，nice!!。 </p>
</blockquote>
<p>ps:我们采用的是<a href="https://github.com/square/retrofit" target="_blank" rel="external">retrofit2.0</a></p>
<h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p><code>compile &#39;com.squareup.retrofit2:retrofit:2.0.0&#39;</code></p>
<ul>
<li>最低java7 android2.3</li>
</ul>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/square/retrofit" target="_blank" rel="external">retrofit github地址</a></p>
<p><a href="http://www.jcodecraeer.com/" target="_blank" rel="external">泡在网上的日子</a>写的 <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0915/3460.html" target="_blank" rel="external">Retrofit 2.0：有史以来最大的改进</a></p>
<p><a href="http://www.tuicool.com/articles/fQju2uQ" target="_blank" rel="external">用 Retrofit 2 简化 HTTP 请求</a></p>
<p><a href="http://square.github.io/retrofit/" target="_blank" rel="external">rerofit官方api讲解</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android最佳实践2：rxjava框架]]></title>
      <url>http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B52%EF%BC%9Arxjava%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h1 id="rxjava框架，感受响应式编程的魔力"><a href="#rxjava框架，感受响应式编程的魔力" class="headerlink" title="rxjava框架，感受响应式编程的魔力"></a>rxjava框架，感受响应式编程的魔力</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>编辑app的build.gradle文件，新增<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">	...</span><br><span class="line"> 	compile &apos;io.reactivex:rxjava:1.1.0&apos;</span><br><span class="line">  	compile &apos;io.reactivex:rxandroid:1.1.0&apos;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>请先学习参考资料</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>抛物线的<a href="http://gank.io/post/560e15be2dca930e00da1083#toc_10" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a></p>
<p>大头鬼Bruce<a href="http://blog.csdn.net/lzyzsd/article/details/41833541" target="_blank" rel="external">深入浅出RxJava（一：基础篇）</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android最佳实践1：retrolambda框架]]></title>
      <url>http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B51%EF%BC%9Aretrolambda%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h1 id="retrolambad框架，让android也能兼容java8l的ambda表达式"><a href="#retrolambad框架，让android也能兼容java8l的ambda表达式" class="headerlink" title="retrolambad框架，让android也能兼容java8l的ambda表达式"></a>retrolambad框架，让android也能兼容java8l的ambda表达式</h1><blockquote>
<p>我们都知道，java在复杂的内部类，内联函数实现的时候，会产生很多的回掉，代码阅读性会变得很差，经常会遇到迷之缩进。java8开始引入了ladmbad表达式，鼓掌！！但是，你妹，android只支持最高jdk7，坑爹呢。不要紧，伟大的歪果仁搞出了兼容性框架，<a href="https://github.com/evant/gradle-retrolambda" target="_blank" rel="external">gradle-retrolambda</a>,戳戳看。</p>
<p>2016年新更新：google的亲儿子android studio2.1以及支持java8了，并用了新的编译器jack compile替代老旧的dvm了，再次鼓掌，目前还是预览版，尝鲜的小白鼠走起。</p>
</blockquote>
<p>##如何使用retrolambda</p>
<h3 id="1-下载jdk8-并配置环境变量"><a href="#1-下载jdk8-并配置环境变量" class="headerlink" title="1 下载jdk8,并配置环境变量"></a>1 下载<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">jdk8</a>,并配置环境变量</h3><h3 id="2-修改工程的build-gradle"><a href="#2-修改工程的build-gradle" class="headerlink" title="2 修改工程的build.gradle"></a>2 修改工程的build.gradle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:1.3.1&apos;</span><br><span class="line">       + classpath &apos;me.tatarka:gradle-retrolambda:3.2.4&apos;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-修改module，比如app的buidle-gradle"><a href="#3-修改module，比如app的buidle-gradle" class="headerlink" title="3 修改module，比如app的buidle.gradle"></a>3 修改module，比如app的buidle.gradle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">	...</span><br><span class="line">	//打包用java8</span><br><span class="line">   + compileOptions &#123;</span><br><span class="line">   +     sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">   +     targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">   + &#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ apply plugin: &apos;me.tatarka.retrolambda&apos;</span><br></pre></td></tr></table></figure>
<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4 测试"></a>4 测试</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.liuhaihua.cn/archives/83170.html" target="_blank" rel="external">Android 上的 Java 8：使用 retrolambda</a></p>
<p><a href="http://blog.csdn.net/asce1885/article/details/43699715" target="_blank" rel="external">Android开发最佳实践</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android Material Desigin控件学习：综述]]></title>
      <url>http://hammercui.github.io/post/android-Material-Desigin%E6%8E%A7%E4%BB%B6%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%BB%BC%E8%BF%B0/</url>
      <content type="html"><![CDATA[<h1 id="android-Material-Desigin控件学习：综述"><a href="#android-Material-Desigin控件学习：综述" class="headerlink" title="android Material Desigin控件学习：综述"></a>android Material Desigin控件学习：综述</h1><p><strong>com.android.support:design</strong>是android的material design设计风格的兼容库</p>
<blockquote>
<p>都是兼容库，区别是这个库多了个Design。 Android Support Library 22.1只是支持了一些基本控件的材料设计化，但是这个库更多的是对一些特效的实现,其实跟github的很多=库有关系，只不是官方把这些库给标准化了<br>参看教程地址 <a href="http://www.jcodecraeer.com/a/anzhuokaifa/developer/2015/0531/2958.html" target="_blank" rel="external">泡神的博客</a></p>
</blockquote>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.support:appcompat-v7:23.1.1&apos;</span><br><span class="line"></span><br><span class="line">compile &apos;com.android.support:design:23.1.1&apos;</span><br></pre></td></tr></table></figure>
<p>新的Material Design风格主要体现在一些新控件的使用</p>
<h3 id="1-DrawerLayout"><a href="#1-DrawerLayout" class="headerlink" title="1 DrawerLayout"></a>1 DrawerLayout</h3><p><strong>注意事项</strong> DrawerLayout只能有两个子视图，顺序第一个当前视图，顺序第二个是弹出视图，弹出视图的laytout_gravity=”left”,否则都是错误的</p>
<p><img src="http://7xrf0l.com1.z0.glb.clouddn.com/16-3-4/54959584.jpg" alt=""></p>
<h2 id="2-Navigation-View-抽屉导航"><a href="#2-Navigation-View-抽屉导航" class="headerlink" title="2 Navigation View 抽屉导航"></a>2 Navigation View 抽屉导航</h2><p><img src="http://www.jcodecraeer.com/uploads/20150531/1433004784110978.png" alt=""></p>
<p>其实就是在drawLayout滑出来的控件上新增内容，比旧版本更省时间了</p>
<h2 id="3-ToolBar"><a href="#3-ToolBar" class="headerlink" title="3 ToolBar"></a>3 ToolBar</h2><p><img src="http://www.jcodecraeer.com/uploads/20141118/14162834651417.png" alt=""></p>
<p>可以取代actionbar控件</p>
<h2 id="4-输入框控件的悬浮标签"><a href="#4-输入框控件的悬浮标签" class="headerlink" title="4 输入框控件的悬浮标签"></a>4 输入框控件的悬浮标签</h2><p><img src="http://www.jcodecraeer.com/uploads/20150530/1432982783938566.png" alt=""></p>
<h2 id="5-悬浮操作按钮floating-action-button"><a href="#5-悬浮操作按钮floating-action-button" class="headerlink" title="5 悬浮操作按钮floating action button"></a>5 悬浮操作按钮floating action button</h2><p><img src="http://www.jcodecraeer.com/uploads/20150530/1432982801531872.png" alt=""></p>
<h2 id="6-协作滚动控件CoordinatorLayout"><a href="#6-协作滚动控件CoordinatorLayout" class="headerlink" title="6 协作滚动控件CoordinatorLayout"></a>6 协作滚动控件CoordinatorLayout</h2><p>appBarLayout,collapsing toolbar ,toolbar都要放到这个协同层里，就实现了协同滚动</p>
<h2 id="7-Snackbar"><a href="#7-Snackbar" class="headerlink" title="7 Snackbar"></a>7 Snackbar</h2><p><img src="http://www.jcodecraeer.com/uploads/20150530/1432996779507731.gif" alt=""><br>为一个操作提供轻量级的，快速的反馈是使用snackbar的最好时机。snackbar显示在屏幕的底部，包含了文字信息与一个可选的操作按钮。在指定时间结束之后自动消失。另外，用户还可以在超时之前将它滑动删除。</p>
<h2 id="8-选项卡TabLayout"><a href="#8-选项卡TabLayout" class="headerlink" title="8 选项卡TabLayout"></a>8 选项卡TabLayout</h2><p><img src="http://www.jcodecraeer.com/uploads/20150530/1432988507118832.png" alt=""></p>
<h2 id="9-可伸缩折叠的Toolbar-（Collapsing-Toolbar）"><a href="#9-可伸缩折叠的Toolbar-（Collapsing-Toolbar）" class="headerlink" title="9 可伸缩折叠的Toolbar （Collapsing Toolbar）"></a>9 可伸缩折叠的Toolbar （Collapsing Toolbar）</h2><p><img src="http://www.jcodecraeer.com/uploads/20150530/1433000848139569.gif" alt=""></p>
<p>背景大图能根据手势滚动而收缩，可用于对toolbar的补充<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:contentScrim=&quot;?attr/colorPrimary&quot;,CollapsingToolbarLayout</span><br></pre></td></tr></table></figure></p>
<p>这个属性是设置折叠后Toolbar的颜色.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;,</span><br></pre></td></tr></table></figure></p>
<p>这是两个Flag控制滚动时候CollapsingToolbarLayout的表现.</p>
<ul>
<li><p>Scroll, 表示向下滚动列表时候,CollapsingToolbarLayout会滚出屏幕并且消失(原文解释:this flag should be set for all views that want to scroll off the screen - for views that do not use this flag, they’ll remain pinned to the top of the screen)</p>
</li>
<li><p>exitUntilCollapsed, 表示这个layout会一直滚动离开屏幕范围,直到它收折成它的最小高度.(原文解释:this flag causes the view to scroll off until it is ‘collapsed’ (its minHeight) before exiting)<br>app:layout_collapseMode=”parallax”,这是控制滚出屏幕范围的效果的<br>   1) parallax,表示滚动过程中,会一直保持可见区域在正中间.<br>   2) pin,表示不会被滚出屏幕范围.</p>
</li>
</ul>
<h2 id="具体学习demo"><a href="#具体学习demo" class="headerlink" title="具体学习demo"></a>具体学习demo</h2><p>预览图</p>
<p><img src="https://github.com/hammercui/markdownRes/raw/master/222222.gif" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--以后actionbar的布局是AppBarLayout，因为appBar越来越复杂了--&gt;</span><br><span class="line">&lt;android.support.design.widget.AppBarLayout</span><br><span class="line">android:id=&quot;@+id/appbarLayout&quot;</span><br><span class="line">android:layout_width=&quot;match_parent&quot;</span><br><span class="line">android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;!-- toolbar内容--&gt;</span><br><span class="line">&lt;android.support.v7.widget.Toolbar</span><br><span class="line">android:id=&quot;@+id/toolbar&quot;</span><br><span class="line">android:layout_width=&quot;match_parent&quot;</span><br><span class="line">android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">android:background=&quot;?attr/colorPrimary&quot;</span><br><span class="line">app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span><br><span class="line">app:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span><br><span class="line">app:layout_scrollFlags=&quot;scroll|enterAlways&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tablayout内容--&gt;</span><br><span class="line">&lt;android.support.design.widget.TabLayout</span><br><span class="line">android:id=&quot;@+id/tabLayout&quot;</span><br><span class="line">android:layout_width=&quot;match_parent&quot;</span><br><span class="line">android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">app:tabIndicatorColor=&quot;#ef5350&quot;</span><br><span class="line">app:tabSelectedTextColor=&quot;#1976d2&quot;</span><br><span class="line">app:tabTextColor=&quot;#90caf9&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--增强型listview --&gt;</span><br><span class="line">&lt;android.support.v7.widget.RecyclerView</span><br><span class="line">android:id=&quot;@+id/recyclerView&quot;</span><br><span class="line">android:layout_width=&quot;match_parent&quot;</span><br><span class="line">android:layout_height=&quot;match_parent&quot;</span><br><span class="line">app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.FloatingActionButton</span><br><span class="line">android:id=&quot;@+id/fab_1&quot;</span><br><span class="line">android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">android:layout_gravity=&quot;bottom|right&quot;</span><br><span class="line">android:layout_marginBottom=&quot;0.1dp&quot;</span><br><span class="line">app:fabSize=&quot;normal&quot;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure>
<p>java代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * toolbar的初始化,tool新增</span><br><span class="line"> */</span><br><span class="line">public void initToolBar()&#123;</span><br><span class="line">//使用toolBar取代actionBar，以及toolBar的使用</span><br><span class="line">toolbar = (Toolbar)findViewById(R.id.toolbar);</span><br><span class="line">    setSupportActionBar(toolbar);</span><br><span class="line">    getSupportActionBar().setDisplayHomeAsUpEnabled(true);</span><br><span class="line">    getSupportActionBar().setHomeButtonEnabled(true);</span><br><span class="line">drawerLayout = (DrawerLayout)findViewById(R.id.drawerLayout);</span><br><span class="line">drawerToggle =  new ActionBarDrawerToggle(LessonThreeActivity.this,drawerLayout,R.string.drawer_open_content,R.string.drawer_close_content);</span><br><span class="line">//设置标题选项卡</span><br><span class="line">TabLayout tabLayout= (TabLayout)findViewById(R.id.tabLayout);</span><br><span class="line">for (int i=0;i&lt;8;i++)</span><br><span class="line">tabLayout.addTab(tabLayout.newTab().setText(&quot;选项卡：&quot;+i));</span><br><span class="line"></span><br><span class="line">tabLayout.setTabMode(TabLayout.MODE_SCROLLABLE);</span><br><span class="line">//设置RecyclerView</span><br><span class="line">RecyclerView mRecyclerView = (RecyclerView) findViewById(R.id.recyclerView);</span><br><span class="line">    LinearLayoutManager mLayoutManager = new LinearLayoutManager(this);</span><br><span class="line">mLayoutManager.setOrientation(LinearLayout.VERTICAL);</span><br><span class="line">mRecyclerView.setLayoutManager(mLayoutManager);</span><br><span class="line">    RecyclerView.Adapter mAdapter = new MyRecyclerViewAdapter(this);</span><br><span class="line">mRecyclerView.setAdapter(mAdapter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private class MyViewHolder extends  RecyclerView.ViewHolder&#123;</span><br><span class="line">public TextView textView;</span><br><span class="line">public MyViewHolder(View itemView)</span><br><span class="line">        &#123;</span><br><span class="line">super(itemView);</span><br><span class="line">textView = (TextView)itemView.findViewById(android.R.id.text1);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class MyRecyclerViewAdapter extends  RecyclerView.Adapter&lt;MyViewHolder&gt;&#123;</span><br><span class="line">private LayoutInflater layoutInflater;</span><br><span class="line">public MyRecyclerViewAdapter(Activity activity)</span><br><span class="line">    &#123;</span><br><span class="line">super();</span><br><span class="line">layoutInflater = activity.getLayoutInflater();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</span><br><span class="line">        View v = layoutInflater.inflate(android.R.layout.simple_list_item_1, null);</span><br><span class="line">        MyViewHolder holder = new MyViewHolder(v);</span><br><span class="line">return holder;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onBindViewHolder(MyViewHolder holder, int position) &#123;</span><br><span class="line">        holder.textView.setText(&quot;数据position:&quot; + position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int getItemCount() &#123;</span><br><span class="line">return 40;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android最佳实践5：EventBus]]></title>
      <url>http://hammercui.github.io/post/android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B55%EF%BC%9AEventBus/</url>
      <content type="html"><![CDATA[<h1 id="学习EventBus的使用"><a href="#学习EventBus的使用" class="headerlink" title="学习EventBus的使用"></a>学习EventBus的使用</h1><h2 id="介绍EventBus"><a href="#介绍EventBus" class="headerlink" title="介绍EventBus"></a>介绍<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a></h2><h3 id="为什么要使用EventBus呢？"><a href="#为什么要使用EventBus呢？" class="headerlink" title="为什么要使用EventBus呢？"></a>为什么要使用EventBus呢？</h3><p>当我们的Fragment过多的时候，组件之间传递信息会变得异常繁琐，单例不是很好的解决方案，通常我们会使用观察者模式来解决这个问题。EventBus就是一个很不错的观察者模式框架。</p>
<h3 id="EventBus实现了什么？"><a href="#EventBus实现了什么？" class="headerlink" title="EventBus实现了什么？"></a>EventBus实现了什么？</h3><p>主要用于事件的发布和订阅。EventBus定义：是一个发布 / 订阅的事件总线。<br>包含4个成分</p>
<ul>
<li>Publisher:发布者</li>
<li>Subscriber:订阅者</li>
<li>Event:事件，Event可以是任何类型的对象</li>
<li>总线。</li>
</ul>
<p>那么这四者的关系是什么呢？很明显：订阅者订阅事件到总线，发送者发布事件。<br><img src="https://github.com/greenrobot/EventBus/raw/master/EventBus-Publish-Subscribe.png" alt=""></p>
<h3 id="订阅者Subscriber"><a href="#订阅者Subscriber" class="headerlink" title="订阅者Subscriber"></a>订阅者Subscriber</h3><p>在EventBus中，使用约定来指定事件订阅者以简化使用。即所有事件订阅都都是以onEvent开头的函数，具体来说</p>
<ul>
<li>onEvent   它和ThreadModel中的PostThread对应，这个也是默认的类型，当使用这种类型时，回调函数和发起事件的函数会在同一个线程中执行,所以事件处理时间不应太长</li>
<li>onEventMainThread 它和ThreadModel中的MainThread对应,当使用这种类型时，回调函数会在主线程中执行，这个在Android中非常有用，因为在Android中禁止在子线程中更新UI。处理时间也不能太长。</li>
<li>onEventBackgroundThread 当使用这种类型时，如果事件发起函数在主线程中执行，那么回调函数另启动一个子线程，如果事件发起函数在子线程执行，那么回调函数就在这个子线程执行</li>
<li>onEventBusAsync 当使用这种类型时，不管事件发起函数在哪里执行，都会另起一个线程去执行回调,但最好限制线程的数目。</li>
</ul>
<h3 id="发布者Publisher"><a href="#发布者Publisher" class="headerlink" title="发布者Publisher"></a>发布者Publisher</h3><p>可以在任意线程任意位置发送事件，直接调用EventBus的<code>post(Object)</code>方法，可以自己实例化EventBus对象，但一般使用默认的单例就好了：<code>EventBus.getDefault().post(Object)</code>，根据post函数参数的类型，会自动调用订阅相应类型事件的函数。</p>
<h2 id="使用EventBus"><a href="#使用EventBus" class="headerlink" title="使用EventBus"></a>使用EventBus</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>编辑app的build.gradle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;org.greenrobot:eventbus:3.0.0&apos;</span><br></pre></td></tr></table></figure></p>
<h3 id="简单使用步骤"><a href="#简单使用步骤" class="headerlink" title="简单使用步骤"></a>简单使用步骤</h3><ol>
<li><p>定义事件类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class MyEvents &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在订阅者类里，新建事件处理方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Subscribe</span><br><span class="line">public void onEventMainThread(MyEvent events)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>千万别忘记写@Subscribe注解了</strong>，详情见<a href="http://blog.csdn.net/chniccs/article/details/50222827" target="_blank" rel="external">EventBus 注册错误no public methods with the @Subscribe annotation</a></p>
<ol>
<li><p>注册订阅者，在构造函数或onCreate(Bundle savedInstanceState)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().register(this);</span><br></pre></td></tr></table></figure>
</li>
<li><p>取消订阅者，在onDestory()方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().unregister(this);</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送事件，可以在任意方法，线程</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().post(new MyEvent());</span><br></pre></td></tr></table></figure>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>AngelDevil的<a href="http://www.cnblogs.com/angeldevil/p/3715934.html" target="_blank" rel="external">快速Android开发系列通信篇之EventBus</a><br> <a href="Android EventBus实战 没听过你就out了">Android EventBus实战 没听过你就out了</a><br> <a href="http://blog.csdn.net/knighttools/article/details/26608351" target="_blank" rel="external">Android中开源库EventBus使用详解</a></p>
]]></content>
    </entry>
    
  
  
</search>
